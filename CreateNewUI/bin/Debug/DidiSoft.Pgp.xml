<?xml version="1.0"?>
<doc>
  <assembly>
    <name>DidiSoft.Pgp</name>
  </assembly>
  <members>
    <member name="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">
      <summary>
            Exception that indicates that a file is encrypted.
            <para>
            This exception is thrown when we want to verify that a file was not only signed but signed and encrypted.
            </para></summary>
      <remarks>
            Introduced in version 1.7
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="T:DidiSoft.Pgp.PGPException">
      <summary>
            Exception indicating that an OpenPGP encryption error has occurred
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.GeneralException">
      <summary>
            General OpenPGP error
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.FileIsEncryptedException">
      <summary>
            An OpenPGP file is encrypted with a key but we try to open it with verify or decrypt with a password
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.FileIsPBEEncryptedException">
      <summary>
            An OpenPGP file is encrypted with a password but we try to open it with verify or decrypt with a key
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.IntegrityCheckException">
      <summary>
            An OpenPGP file is corrupted
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.KeyIsExpiredException">
      <summary>
            An OpenPGP public key has expired 
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.KeyIsRevokedException">
      <summary>
            An OpenPGP public key is revoked
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.NonPGPDataException">
      <summary>
            A file is not an OpenPGP file or is corrupted
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.WrongPasswordException">
      <summary>
            A specified password is wrong
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.WrongPrivateKeyException">
      <summary>
            A specified file is not an OpenPGP private key file
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.PGPException.WrongPublicKeyException">
      <summary>
            A specified file is not an OpenPGP public key file
            </summary>
    </member>
    <member name="M:DidiSoft.Pgp.PGPException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error text</param>
    </member>
    <member name="M:DidiSoft.Pgp.PGPException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error text</param>
      <param name="e">inner exception</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.FileIsEncryptedException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.FileIsEncryptedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">
      <summary>
            Exception that indicates that a file is encrypted with a password.
            <para>
            This exception is thrown when we want to decrypt with a private key a password based encrypted only (PBE) file
            </para></summary>
      <remarks>
            Introduced in version 1.7.5
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">
      <summary>
            Exception that indicates that the data is corrupted.
            </summary>
      <remarks>
            Introduced in version 1.7.3
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.IntegrityCheckException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.IntegrityCheckException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">
      <summary>
            Exception that indicates that a public key has expired.
            <para>
            This exception is thrown when we want to encrypt content with an 
            </para>
            OpenPGP key and that key has already expired.
            </summary>
      <remarks>
            Introduced in version 1.7.3
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.KeyIsExpiredException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.KeyIsExpiredException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">
      <summary>
            Exception indicating that a public key is revoked.
            <para>
            This exception is thrown when we want to encrypt content with an 
            </para>
            OpenPGP key and that key has already been revoked.
            </summary>
      <remarks>
            Introduced in version 1.7.3
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.KeyIsRevokedException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.KeyIsRevokedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">
      <summary>
            Exception that indicates that a supplied data is not a valid OpenPGP message.
            <para>
            This exception is thrown when we want to decrypt or verify arbitrary file that is not an OpenPGP encrypted or signed data.
            </para></summary>
      <remarks>
            Introduced in version 1.7.2
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.NonPGPDataException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.NonPGPDataException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">
      <summary>
            This exception indicates that we have supplied a wrong password
            for an OpenPGP private key.
            </summary>
      <remarks>
            Introduced in version 1.7
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.WrongPasswordException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.WrongPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="e">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">
      <summary>
            This exception indicates that a private key has not been found  
            in a supplied file/stream parameter or <see cref="T:DidiSoft.Pgp.KeyStore" /> 
            or a private key is not suitable for decryption or signing.
            </summary>
      <remarks>
            Introduced in version 1.7
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">
      <summary>
            Exception that indicates that a public key has not been found  
            in a supplied file/stream parameter or <see cref="T:DidiSoft.Pgp.KeyStore" />.
            </summary>
      <remarks>
            Introduced in version 1.7
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.WrongPublicKeyException.#ctor(System.String)">
      <summary>
            Constructs the exception from a string message
            </summary>
      <param name="message">error description</param>
    </member>
    <member name="M:DidiSoft.Pgp.Exceptions.WrongPublicKeyException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs the exception from a string message and another exception
            </summary>
      <param name="message">error description</param>
      <param name="underlying">Wrapped underlying exception</param>
    </member>
    <member name="T:DidiSoft.Pgp.Extra.InMemoryKeyStore">
      <summary>
            In Memory OpenPGP KeyStore
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="T:DidiSoft.Pgp.KeyStore">
      <summary>
            Represents a store for OpenPGP keys where OpenPGP public and private(secret) keys are persisted and managed. 
            </summary>
      <remarks>
        <para>
            The KeyStore contains both the public and secret key rings combined in one file and protected with password.
            </para>
        <para>
            It can be used with <see cref="T:DidiSoft.Pgp.PGPLib" /> in the methods that require a KeyStore parameter,
            or alone when only key operations are required.	
            </para>
      </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="F:DidiSoft.Pgp.KeyStore.ELGAMAL">
      <summary>
            Constant for ElGamal asymmetric algorithm
            <para>
            Used in DH/DSS key generation 
            </para>
            Constant for ElGamal (DH/DSS) asymmetric algorithm
            </summary>
      <remarks>
            Used in DH/DSS key generation 
            </remarks>
    </member>
    <member name="F:DidiSoft.Pgp.KeyStore.DSA">
      <summary>
            Constant for DSA asymmetric algorithm
            </summary>
      <remarks>
            Used in DH/DSS key generation 
            </remarks>
    </member>
    <member name="F:DidiSoft.Pgp.KeyStore.RSA">
      <summary>
            Constant for RSA asymmetric algorithm
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.KeyStore.EC">
      <summary>
            Constant for Elliptic Curve Cryptography (ECC) asymmetric algorithm (RFC 6637)
            </summary>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.OpenInMemory">
      <summary>
            Creates a new in-memory KeyStore instance.
            </summary>
      <returns>initialized <see cref="T:DidiSoft.Pgp.KeyStore" /> object</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.OpenFile(System.String,System.String)">
      <summary>Initializes a new Key Store object.</summary>
      <remarks>
            Initializes a new Key Store object.
            <para>
            NOTE: The Key store file may not exist, it will be created on first key manipulation operation.
            </para></remarks>
      <param name="keystoreFile">File name of the Key store (absolute or relative path)
            	</param>
      <param name="keystorePassword">Password for the PGP Key store.</param>
      <exception cref="T:System.IO.IOException">
      </exception>
      <returns>initialized <see cref="T:DidiSoft.Pgp.KeyStore" /> object</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.#ctor">
      <summary>Initializes a new Key Store object located in-memory.</summary>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.#ctor(System.String,System.String)">
      <summary>Initializes a new Key Store object.</summary>
      <remarks>
            Initializes a new Key Store object.
            <para>
            NOTE: The Key store file may not exist, it will be created on first key manipulation operation.
            </para></remarks>
      <param name="keystoreFileName">File name of the Key store (absolute or relative path)
            	</param>
      <param name="keystorePassword">Password for the PGP Key store.</param>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.OpenFile(System.String,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.Purge">
      <summary>
            Clears the internal state of this key store.
            </summary>
      <remarks>
            All existing keys already contained in this key store are deleted permanently.
            <para>
            Use this method wisely.
            </para></remarks>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetKeys">
      <summary>
             Returns the key pairs stored in this OpenPGP key store.
             </summary>
      <returns>Array of <c>KeyPairInformation</c> objects stored in this instance of <see cref="T:DidiSoft.Pgp.KeyStore" />. If there are no keys, returns empty array. </returns>
      <example>
        <code lang="C#">
             using System;
             using System.Text;
             using DidiSoft.Pgp;
            
             public class KeyStoreListKeys
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    KeyPairInformation[] keys = ks.GetKeys();
            
                    foreach (KeyPairInformation key in keys) {
                        Console.WriteLine(key.KeyId);
                            foreach (String id in key.UserIds) {
                              Console.WriteLine(id);
                            }
                        }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.Text
             Imports DidiSoft.Pgp
            
             Public Class KeyStoreListKeys
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    Dim keys As KeyPairInformation() = ks.GetKeys()
            
                    For Each key As KeyPairInformation In keys
            
                        Console.WriteLine(key.KeyId)
            
                        For Each id As String In key.UserIds
                            Console.WriteLine(id)
                        Next
                    Next
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetKeyIdForUserId(System.String)">
      <summary>
            Returns the real Key ID (of type <c>long</c>) corresponding to this User Id.
            </summary>
      <param name="userId">User Id of the key owner</param>
      <returns>the key Id if a match has been found or -1 if no match was found</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetKeyIdForKeyIdHex(System.String)">
      <summary>
            Returns the real Key ID (of type <c>long</c>) corresponding to this Hexadecimal Key Id.
            </summary>
      <param name="keyIdHex">Hexadecimal Key Id used by other OpenPG software</param>
      <returns>the key Id if a match has been found or -1 if no match was found</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetSecretKeysData">
      <summary>
            Returns the secret keys data contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <returns>the secret keys data contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetPublicKeysData">
      <summary>
            Returns the public keys data contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <returns>the public keys data contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetPublicKeysWithUserId(System.String)">
      <summary>
            Returns the public keys data with the specified User Id contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <param name="userId">User ID or Key Hex ID of the key in interest</param>
      <returns>the public keys data with the specified User Id contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetPublicKeyWithKeyId(System.Int64)">
      <summary>
            Returns the public key data with the specified Key Id contained in this <c>IKeyStore</c></summary>
      <param name="keyId">Key Id of the key in question</param>
      <returns>the public key data with the specified Key Id contained in this <c>IKeyStore</c></returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPublicKey(System.IO.FileInfo)">
      <summary>
             Imports an OpenPGP public key into this key store instance.
             </summary>
      <param name="publicKeyFile">File of the public key to be imported</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the imported public key</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportPublicKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "keystore password");
                    KeyPairInformation key = keyStore.ImportPublicKey(new FileInfo("public_key.asc"));			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ImportPublicKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "keystore password")
                    Dim key As KeyPairInformation = keyStore.ImportPublicKey(new FileInfo("public_key.asc"))
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no OpenPGP public key in the file</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPublicKey(System.String)">
      <summary>
             Imports an OpenPGP public key into this key store instance.
             </summary>
      <param name="publicKeyFileName">File name of the public key to be imported (absolute or relative path) or the key as ASCII formatted string</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the imported public key</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ImportPublicKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "keystore password");
                    KeyPairInformation key = keyStore.ImportPublicKey(@"public_key.asc");			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ImportPublicKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "keystore password")
                    Dim key As KeyPairInformation = keyStore.ImportPublicKey("public_key.asc")
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no OpenPGP public key in the file</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPrivateKey(System.String)">
      <summary>
             Imports an OpenPGP private key into a custom OpenPGP key store. 
             </summary>
      <remarks>
             If the key store does not exist, it is created.
             </remarks>
      <param name="privateKeyFileName">File of the private key to be imported (absolute or relative path) or the key as ASCII formatted string</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the imported private key</returns>
      <example>
        <code lang="cs">
             using System;
             using DidiSoft.Pgp;
            
             public class ImportPrivateKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "changeit");
                    KeyPairInformation key = keyStore.ImportPrivateKey(@"private_key.asc");			
                }
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ImportPrivateKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "changeit")
                    Dim key As KeyPairInformation = keyStore.ImportPrivateKey("private_key.asc")
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no OpenPGP private key in the file</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPrivateKey(System.IO.FileInfo)">
      <summary>
             Imports an OpenPGP private key into a custom OpenPGP key store. 
             </summary>
      <remarks>
             If the key store does not exist, it is created.
             </remarks>
      <param name="privateKeyFile">File of the Private key to be imported</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the imported private key</returns>
      <example>
        <code lang="cs">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportPrivateKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "changeit");
                    KeyPairInformation key = keyStore.ImportPrivateKey(new FileInfo(@"private_key.asc"));			
                }
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ImportPrivateKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "changeit")
                    Dim key As KeyPairInformation = keyStore.ImportPrivateKey(New FileInfo("private_key.asc"))
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no OpenPGP private key in the file</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPrivateKey(System.String,System.String)">
      <summary>
             Imports and OpenPGP private key into a custom OpenPGP key store. 
             </summary>
      <remarks>
             If the key store does not exist, it is created.
             </remarks>
      <param name="privateKeyFileName">File name of the private key to be imported (absolute or relative path)</param>
      <param name="password">Password of the private key</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the imported private key</returns>
      <example>
        <code lang="cs">
             using System;
             using DidiSoft.Pgp;
            
             public class ImportPrivateKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "changeit");
                    KeyPairInformation key = keyStore.ImportPrivateKey(@"private_key.asc", "changeit");			
                }
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ImportPrivateKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "changeit")
                    Dim key As KeyPairInformation = keyStore.ImportPrivateKey("private_key.asc", "changeit")
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no OpenPGP private key in the file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified password for this private key is incorrect</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPublicKey(System.IO.Stream)">
      <summary>
            Imports an OpenPGP public key into this key store instance.
            </summary>
      <remarks>
            The caller has the responsibility to close the stream
            <para>
            After the import the stream <c>Position</c> is at the end of the stream.
            </para>
            If the stream contains more than one public keys, only the first one is imported
            </remarks>
      <param name="publicKeyStream">stream containing the public key to be imported </param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the imported key</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no public key in this stream</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPrivateKey(System.IO.Stream)">
      <summary>
             Imports and OpenPGP private key into a custom OpenPGP key store. 
             </summary>
      <remarks>
             The caller has the responsibility to close the stream
             <para>
             After the import the stream <c>Position</c> is at the end of the stream.
             </para>
             If the stream contains more than one private keys, only the first one is imported
             </remarks>
      <param name="privateKeyStream">Private key to be imported as Stream for reading</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the imported private key</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportPrivateKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "keystore password");
                    using (Stream keyStream = File.OpenRead(@"private_key.asc"))
                    {
                       KeyPairInformation key = keyStore.ImportPrivateKey(keyStream);			
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ImportPrivateKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "keystore password")
                    Dim keyStream As Stream = File.OpenRead(@"private_key.asc")
                    Dim key As KeyPairInformation = keyStore.ImportPrivateKey(keyStream)
                    keyStream.Close()
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no OpenPGP private key in this source</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportPrivateKey(System.IO.Stream,System.String)">
      <summary>
             Imports and OpenPGP private key into a custom OpenPGP key store. 
             </summary>
      <remarks>
             The caller has the responsibility to close the stream
             <para>
             After the import the stream <c>Position</c> is at the end of the stream.
             </para><para>
             If the stream contains more than one private keys, only the first one is imported
             </para></remarks>
      <param name="privateKeyStream">Private key to be imported as stream for reading</param>
      <param name="password">Password of the private key</param>
      <returns>A <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the imported private key</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportPrivateKey
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "changeit");
                    using (Stream keyStream = File.OpenRead(@"private_key.asc"))
                    {
                       KeyPairInformation key = keyStore.ImportPrivateKey(keyStream, "private key password");			
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ImportPrivateKey
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("DataFiles\key.store", "changeit")
                    Dim keyStream As Stream = File.OpenRead(@"private_key.asc")
                    Dim key As KeyPairInformation = keyStore.ImportPrivateKey(keyStream, "private key password")
                    keyStream.Close()
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no OpenPGP private key in the file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private key password is incorrect</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportKeyRing(System.IO.FileInfo)">
      <summary>
             Imports OpenPGP key ring in this key store.
             </summary>
      <remarks>The key ring may contain public, private or both type of keys.</remarks>
      <param name="keyRingFile">Key Ring file to be imported</param>
      <returns>Array of <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> objects representing the imported keys</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportRing
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"C:\key.store", "changeit");
                    FileInfo keyRing = new FileInfo(@"C:\keyring.asc");
                    keyStore.ImportKeyRing(keyRing);			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ImportRing
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("C:\key.store", "changeit")
                    Dim keyRing As New FileInfo("C:\keyring.asc")
                    keyStore.ImportKeyRing(keyRing)
                End Sub
             End Class
             </code>
      </example>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.String)" />
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportKeyRing(System.String)">
      <summary>
             Imports OpenPGP key ring in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance.
             </summary>
      <remarks>The key ring may contain public, private or both type of keys.</remarks>
      <param name="keyRingFileName">Key file to be imported (absolute or relative path) or the key as ASCII formatted string</param>
      <returns>Array of <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> objects representing the imported keys</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ImportRing
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"C:\key.store", "changeit");
                    keyStore.ImportKeyRing(@"C:\pgp_key.asc");			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ImportRing
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("C:\key.store", "changeit")
                    keyStore.ImportKeyRing("C:\pgp_key.asc")
                End Sub
             End Class
             </code>
      </example>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.String)" />
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportKeyRing(System.IO.Stream)">
      <summary>
             Imports an OpenPGP key ring (one key pair or multiple keys) in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance.
             </summary>
      <remarks>
             The caller has the responsibility to close the stream
             <para>
             After the import the stream <c>Position</c> is at the end of the stream.
             </para>
             The key ring may contain public, private or both type of keys.
             </remarks>
      <param name="keyRingStream">Key Ring stream to be imported</param>
      <returns>Array of <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> objects representing the imported keys</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportRing
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"C:\key.store", "changeit");
                    using (Stream keyPairStream = File.OpenRead(@"C:\pgp_key.asc")) 
                    {
                      keyStore.ImportKeyRing(keyPairStream);			
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ImportRing
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("C:\key.store", "changeit")
                    Dim keyPairStream As Stream = System.IO.File.OpenRead(@"C:\pgp_key.asc") 
                    keyStore.ImportKeyRing(keyPairStream)
                    keyPairStream.Close()
                End Sub
             End Class
             </code>
      </example>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.String)" />
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ImportKeyStore(DidiSoft.Pgp.KeyStore)">
      <summary>
             Imports the keys contained in a KeyStore object into the current KeyStore instance.
             </summary>
      <param name="keyStore">source KeyStore to import from</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> objects representing the imported keys</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ImportKeyStore
             {
                public static void Demo()
                {
                    KeyStore keyStore = new KeyStore(@"C:\key.store", "changeit");
                    
                    KeyStore memoryKeyStore = KeyStore.OpenInMemory();
                    memoryKeyStore.ImportKeyStore(keyStore);
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ImportKeyStore
                Public Shared Sub Demo()
                    Dim keyStore As New KeyStore("C:\key.store", "changeit")
                    
                    Dim memoryKeyStore As KeyStore = KeyStore.OpenInMemory()
                    memoryKeyStore.ImportKeyStore(keyStore)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKeyAsString(System.String)">
      <summary>Exports Public key from this OpenPGP key store as a String in ASCII armoured format.</summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <returns>requested Public key in ASCII armoured format</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ExportKeyASCII
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    String keyAscii = ks.ExportPublicKeyAsString("support@didisoft.com");
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ExportKeyASCII
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim keyAscii As String = ks.ExportPublicKeyAsString("support@didisoft.com")
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKeyAsString(System.Int64)">
      <summary>Exports Public key from this OpenPGP key store as a String in ASCII armoured format.</summary>
      <param name="keyId">Key Id of the Public Key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <returns>requested Public key in ASCII armoured format</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKey(System.IO.Stream,System.String,System.Boolean)">
      <summary>Exports public key from this OpenPGP key store, into a Stream</summary>
      <param name="outStream">Stream where the public key will be exported</param>
      <param name="userId">User Id or hexadecimal Key ID of the key to be exported</param>
      <param name="asciiArmored">if <see langword="true" />, output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ExportKeys
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    bool asciiArmored = true;
                    ks.ExportPublicKey(@"C:\Test\public_key_exported.pkr", "support@didisoft.com", asciiArmored);
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ExportKeys
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim asciiArmored As Boolean = True
                    ks.ExportPublicKey("C:\Test\public_key_exported.pkr", "support@didisoft.com", asciiArmored)
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKey(System.String,System.String,System.Boolean)">
      <summary>Exports public key from this OpenPGP key store, into a file.</summary>
      <param name="fileName">File name where the public key will be exported (absolute or relative path)</param>
      <param name="userId">User Id or hexadecimal Key ID of the key to be exported</param>
      <param name="asciiArmored">if <see langword="true" />, output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
      <example>
        <code lang="cs">
             using System;
             using DidiSoft.Pgp;
            
             public class ExportKeys
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    bool asciiArmored = true;
                    ks.ExportPublicKey(@"C:\Test\public_key_exported.pkr", "support@didisoft.com", asciiArmored);
                }
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ExportKeys
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim asciiArmored As Boolean = True
                    ks.ExportPublicKey("C:\Test\public_key_exported.pkr", "support@didisoft.com", asciiArmored)
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKey(System.String,System.Int64,System.Boolean)">
      <summary>Exports public key from this OpenPGP key store into a file.</summary>
      <param name="fileName">File name where the public key will be exported (absolute or relative path)
            	</param>
      <param name="keyId">Key Id of the Public Key</param>
      <param name="asciiArmored">if <see langword="true" />, output is in ASCII armoured format</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKeyStream(System.String)">
      <summary>Exports public key from this OpenPGP key store as an input stream for reading</summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
      <returns>requested Private key an input stream for reading</returns>
      <example>
             This practical illustration shows how to export a public key as an input stream from this KeyStore object.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ExportKeyStream
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    Stream keyStream = ks.ExportPublicKeyStream("support@didisoft.com");
                }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ExportKeyStream
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim keyAscii As Stream = ks.ExportPublicKeyStream("support@didisoft.com")
                End Sub
             End Class
             </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPublicKeyStream(System.Int64)">
      <summary>Exports public key from this OpenPGP key store as an input stream for reading</summary>
      <param name="keyId">Key Id of the public key</param>
      <returns>requested Private key an input stream for reading</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.String)">
      <summary>Exports a key ring (the public and private key combined) located in this key store in one file.</summary>
      <remarks>The result file is in ASCII armoured format. The private key is exported only if exists.</remarks>
      <param name="fileName">File name where the key ring will be exported (absolute or relative path)</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.String,System.Boolean)">
      <summary>Exports a key ring (the public and private key combined) located in this key store in one file.</summary>
      <remarks>The private key is exported only if exists.</remarks>
      <param name="fileName">File name where the key ring will be exported (absolute or relative path)</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> the output is ASCII armored, when <see langword="false" /> it is binary</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.Int64,System.Boolean)">
      <summary>Exports a key pair (the public and private key combined) located in this key store in one file.</summary>
      <remarks>The private key is exported only if exists.</remarks>
      <param name="fileName">File name where the key pair will be exported (absolute or relative path)</param>
      <param name="keyId">Key Id of the key pair to be exported</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> the output is ASCII armored, when <see langword="false" /> it is binary</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.String,System.Int64)">
      <summary>Exports Key ring (both public and private key) located in this Key store in one file.</summary>
      <remarks>The result file is in ASCII armoured format. The private key is exported only if exists.</remarks>
      <param name="fileName">File name where the key ring will be exported (absolute or relative path)</param>
      <param name="keyId">Key Id of the Public Key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKey(System.String,System.String,System.Boolean)">
      <summary>Exports a private key from this OpenPGP key store into a file.</summary>
      <param name="fileName">File name where the key will be exported (absolute or relative path)</param>
      <param name="userId">User Id or hexadecimal Key ID of the private key to be exported</param>
      <param name="asciiArmored">if <see langword="true" />, output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
      <example>
        <code lang="cs">
             using System;
             using DidiSoft.Pgp;
            
             public class ExportKeys
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    bool asciiArmored = true;
                    ks.ExportPrivateKey(@"C:\Test\private_key_exported.asc", "support@didisoft.com", asciiArmored);
                }
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ExportKeys
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim asciiArmored As Boolean = True
                    ks.ExportPrivateKey("C:\Test\private_key_exported.asc", "support@didisoft.com", asciiArmored)
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKey(System.String,System.Int64,System.Boolean)">
      <summary>Exports a private key from this OpenPGP key store into a file.</summary>
      <param name="fileName">File name where the key will be exported (absolute or relative path)</param>
      <param name="keyId">Key Id of the corresponding Public Key</param>
      <param name="asciiArmored">if <see langword="true" />, output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">If file writing error occur</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKey(System.IO.Stream,System.String,System.Boolean)">
      <summary>Exports a private key from this OpenPGP key store into a Stream.</summary>
      <param name="outStream">Stream where the key will be exported</param>
      <param name="userId">User Id or hexadecimal Key ID of the private key to be exported</param>
      <param name="asciiArmored">if <see langword="true" />, output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
      <example>
        <code lang="cs">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ExportKeys
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    bool asciiArmored = true;
                    using (Stream outStream = File.Create(@"C:\Test\private_key_exported.asc"))
                    {
                      ks.ExportPrivateKey(outStream, "support@didisoft.com", asciiArmored);
                    } 
                }
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ExportKeys
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim asciiArmored As Boolean = True
                    Using outStream As Stream = File.Create("C:\Test\private_key_exported.asc"))
                      ks.ExportPrivateKey(outStream, "support@didisoft.com", asciiArmored)
                    End Using
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.IO.Stream,System.Int64,System.Boolean)">
      <summary>Exports a key pair (the public and private key combined) located in this key store into a Stream</summary>
      <remarks>The private key is exported only if exists.</remarks>
      <param name="outStream">Output stream where the key pair will be exported</param>
      <param name="keyId">Key Id of the key pair to be exported</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> the output is ASCII armored, when <see langword="false" /> it is binary</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">in case of I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportKeyRing(System.IO.Stream,System.String,System.Boolean)">
      <summary>Exports a key pair (the public and private key combined) located in this key store into a Stream</summary>
      <remarks>The private key is exported only if exists.</remarks>
      <param name="outStream">Output stream where the key pair will be exported</param>
      <param name="userId">User Id or hexadecimal Key ID of the key pair to be exported</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> the output is ASCII armored, when <see langword="false" /> it is binary</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
      <exception cref="T:System.IO.IOException">in case of I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKeyAsString(System.String)">
      <summary>Exports private key from this OpenPGP key store as a String in ASCII armoured format.</summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
      <returns>requested Private key in ASCII armoured format</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ExportKeys
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    String keyAscii = ks.ExportPrivateKeyAsString("support@didisoft.com");
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ExportKeys
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim keyAscii As String = ks.ExportPrivateKeyAsString("support@didisoft.com")
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKeyAsString(System.Int64)">
      <summary>Exports private key from this OpenPGP key store as a String in ASCII armoured format.</summary>
      <param name="keyId">Key Id of the corresponding Public Key</param>
      <returns>requested Private key in ASCII armour format</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKeyBytes(System.String)">
      <summary>Exports private key from this OpenPGP key store as a byte array</summary>
      <param name="userId">User Id or hexadecimal Key ID</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
      <returns>requested Private key as byte array</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ExportKeyBytes
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    byte[] keyBytes = ks.ExportPrivateKeyBytes("support@didisoft.com");
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ExportKeyBytes
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim keyAscii As Byte() = ks.ExportPrivateKeyBytes("support@didisoft.com")
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKeyBytes(System.Int64)">
      <summary>Exports private key from this OpenPGP key store as a byte array.</summary>
      <param name="keyId">Key Id of the corresponding public key</param>
      <returns>requested Private key as byte array</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKeyStream(System.String)">
      <summary>Exports private key from this OpenPGP key store as an input stream for reading</summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
      <returns>requested Private key an input stream for reading</returns>
      <example>
             This practical illustration shows how to export a private key as an input stream from this KeyStore object.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class ExportKeyStream
             {
                public void Demo()
                {
                    KeyStore ks = new KeyStore(@"C:\Test\key.store", "changeit");
                    Stream keyStream = ks.ExportPrivateKeyStream("support@didisoft.com");
                }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class ExportKeyStream
                Public Sub Demo()
                    Dim ks As New KeyStore("C:\Test\key.store", "changeit")
                    Dim keyAscii As Stream = ks.ExportPrivateKeyStream("support@didisoft.com")
                End Sub
             End Class
             </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ExportPrivateKeyStream(System.Int64)">
      <summary>Exports private key from this OpenPGP key store as an input stream for reading</summary>
      <param name="keyId">Key Id of the corresponding public key</param>
      <returns>requested Private key an input stream for reading</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ContainsKey(System.String)">
      <summary>
             Checks is there a key with the specified User Id in this Key Store
             </summary>
      <param name="userId">User Id or hexadecimal Key ID of the key in question</param>
      <returns>Returns <c><see langword="true" /></c> if this key store contains key with the specified User Id</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ContainsKey
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    String userId = "support@didisoft.com";
                    if (ks.ContainsKey(userId))
                    {
                        Console.WriteLine("Key found.");
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ContainsKey
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    If (Not ks.ContainsKey("support@didisoft.com")) Then
                        Console.WriteLine("Key found.")
                    End If
                End Sub
             End Class        
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetKey(System.String)">
      <summary>
            Returns a <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the key with a specified Id
            </summary>
      <param name="userId">User Id or hexadecimal Key Id of the key</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the key, or <see langword="null" /> if there is no such key</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetKey(System.Int64)">
      <summary>
            Returns a <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the key with a specified Id
            </summary>
      <param name="keyId">Key Id of the key</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> object representing the key, or <see langword="null" /> if there is no such key</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ContainsPublicKey(System.String)">
      <summary>
             Checks is there a public key with the specified User Id in this Key Store
             </summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <returns>Returns <c><see langword="true" /></c> if this key store contains key with the specified User Id</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ContainsPublicKey
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    String userId = "support@didisoft.com";
                    if (ks.ContainsPublicKey(userId))
                    {
                        Console.WriteLine("Key found.");
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ContainsPublicKey
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    If (Not ks.ContainsPublicKey("support@didisoft.com")) Then
                        Console.WriteLine("Key found.")
                    End If
                End Sub
             End Class        
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ContainsPrivateKey(System.String)">
      <summary>
             Checks is there a private key with the specified User Id in this Key Store
             </summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <returns>Returns <c><see langword="true" /></c> if this key store contains key with the specified User Id</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ContainsPrivateKey
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    String userId = "support@didisoft.com";
                    if (ks.ContainsPrivateKey(userId))
                    {
                        Console.WriteLine("Key found.");
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ContainsPrivateKey
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    If (Not ks.ContainsPrivateKey("support@didisoft.com")) Then
                        Console.WriteLine("Key found.")
                    End If
                End Sub
             End Class        
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ContainsKey(System.Int64)">
      <summary>
             Checks is there a key with the specified Key ID in this Key Store
             </summary>
      <param name="keyId">Key Id of type Int64</param>
      <returns>Returns <c><see langword="true" /></c> if this key store contains key with the specified Key ID</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ContainsKey
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    long keyId = 10000;
                    if (ks.ContainsKey(keyId))
                    {
                        Console.WriteLine("Key found.");
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ContainsKey
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    If (Not ks.ContainsKey(1000)) Then
                        Console.WriteLine("Key found.")
                    End If
                End Sub
             End Class        
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ContainsPublicKey(System.Int64)">
      <summary>
             Checks is there a public key with the specified Key ID in this Key Store
             </summary>
      <param name="keyId">Key Id of type Int64</param>
      <returns>Returns <c><see langword="true" /></c> if this key store contains key with the specified Key ID</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ContainsPublicKey
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    long keyId = 10000;
                    if (ks.ContainsPublicKey(keyId))
                    {
                        Console.WriteLine("Key found.");
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ContainsPublicKey
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    If (Not ks.ContainsPublicKey(1000)) Then
                        Console.WriteLine("Key found.")
                    End If
                End Sub
             End Class        
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ContainsPrivateKey(System.Int64)">
      <summary>
             Checks is there a private key with the specified Key ID in this Key Store
             </summary>
      <param name="keyId">Key Id of type Int64</param>
      <returns>Returns <c><see langword="true" /></c> if this key store contains key with the specified Key ID</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class ContainsPrivateKey
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    long keyId = 10000;
                    if (ks.ContainsPrivateKey(keyId))
                    {
                        Console.WriteLine("Key found.");
                    }
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class ContainsPrivateKey
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    If (Not ks.ContainsPrivateKey(1000)) Then
                        Console.WriteLine("Key found.")
                    End If
                End Sub
             End Class        
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.LoadFromStream(System.IO.Stream,System.String)">
      <summary>
            Loads the KeyStore data from a stream, where it has been stored previously
            </summary>
      <remarks>
            The KeyStore must have been stored there previously unprotected
            </remarks>
      <param name="keystoreStream">KeyStore input stream</param>
      <param name="password">Password if the KeyStore was previously protected with a password</param>
      <exception cref="T:System.ArgumentException">if the specified data stream is not seek-able</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.LoadFromStream(System.IO.Stream)">
      <summary>
            Loads the keystore data from a stream, where it has been stored previously
            </summary>
      <remarks>
            The KeyStore must have been stored there previously unprotected
            </remarks>
      <param name="keystoreStream">keystore input stream</param>
      <exception cref="T:System.ArgumentException">if the specified data stream is not seek-able</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SaveToStream(System.IO.Stream)">
      <summary>
            Saves the key store data to a stream
            </summary>
      <remarks>
            The KeyStore is stored unprotected with a password
            </remarks>
      <param name="keystoreStream">key store output stream</param>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.Save">
      <summary>Saves the Key Store to disk.</summary>
      <remarks>
            Auto invoked after every method that modifies the key store.
            <para>
            If the KeyStore is in-memory, this method does not do anything.
            </para></remarks>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">
      </exception>
      <see cref="P:DidiSoft.Pgp.KeyStore.AutoSave" />
      <see cref="P:DidiSoft.Pgp.KeyStore.BackupOnSave" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SignPublicKey(System.String,System.String,System.String)">
      <summary>
            Signs a public key with a private key.
            </summary>
      <remarks>
            Signing a key certifies that you know the owner of the keys.
            <para>
            When you import keys into your <see cref="T:DidiSoft.Pgp.KeyStore" /> and are sure that the trusted third party 
            is really the organization/person they claim to be, you can sign his/her keys.
            </para><para>
            PGP command line(r) equivalent:
            </para><para>
            pgp --sign-key keyUserId  --signer signingKeyUserId --sig-type exportable
            </para><para>
            GnuPG equivalent command:
            </para><para>
            gpg --local-user signingKeyUserId --sign-key keyUserId
            </para></remarks>
      <param name="keyUserId">User Id of the public key to be signed</param>
      <param name="signingKeyUserId">User Id of the own private key to be used for signing</param>
      <param name="signingKeyPassword">Password of the own private key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">No private key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">No public key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP signing error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ChangePrivateKeyPassword(System.String,System.String,System.String)">
      <summary>
            Changes the password of a private key.
            <para>
            If more than one key pairs exist with the supplied userId, only the first one is affected.
            </para><para>
            This method is equivalent to the GnuPG commands:
            </para><para>
            gpg --edit-key [userId]
            </para>
            Command&gt;passwd
            </summary>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="oldPassword">current password of the private key</param>
      <param name="newPassword">new password of the private key</param>
      <returns>
        <see langword="true" /> if private key password is changed, <see langword="false" /> if there is no key with the specified userId </returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">The supplied current password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.CheckPassword(System.IO.Stream,System.String)">
      <summary>
            Checks if a password for a key store file is correct
            </summary>
      <param name="keyStoreStream">Stream obtained from a KeyStore file</param>
      <param name="password">password for the KeyStore</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the password is correct, <see langword="false" /> otherwise</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.CheckPassword(System.String,System.String)">
      <summary>
            Checks if a password for a key store file is correct
            </summary>
      <param name="keyStoreFileName">File name of the KeyStore (absolute or relative path)</param>
      <param name="password">password for the KeyStore</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the password is correct, <see langword="false" /> otherwise</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ChangePrivateKeyPassword(System.Int64,System.String,System.String)">
      <summary>
            Changes the password of a private key.
            <para>
            This method is equivalent to the GnuPG commands:
            </para><para>
            gpg --edit-key [userId]
            </para>
            Command&gt;passwd
            </summary>
      <param name="keyId">Key Id of the key pair</param>
      <param name="oldPassword">current password of the private key</param>
      <param name="newPassword">new password of the private key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">The supplied current password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeleteKeyPair(System.String)">
      <summary>
             Deletes the first key pair (public and private key) from this key store that has the specified userId.
             </summary>
      <remarks>
             If more than one key pair exist with the supplied userId, only the first one is affected.
             <para>
             If no key exists with the specified userId, no changes to the key store occurs.  
             </para><para>
             This method is equivalent to the GnuPG commands:
             </para><para>
             gpg --delete-secret-keys [userId]
             </para>
             gpg --delete-keys [userId]
             </remarks>
      <param name="userId">User Id or hexadecimal Key ID of the key pair to be deleted</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if key pair is deleted, <see langword="false" /> if there is no key pair with the specified user Id</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class DeleteKeyPair
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore("pgp.keystore", "changeit");
                    ks.DeleteKeyPair("test@gmail.com");			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DeleteKeyPair
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("pgp.keystore", "changeit")
                    ks.DeleteKeyPair("test@gmail.com")
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeleteJpegImage(System.String,System.Int32)">
      <summary>
            Removes a JPEG photo image from an OpenPGP key
            </summary>
      <remarks>
            If more than one OpenPGP key exists with a matching User Id, the first one only will be affected.
            </remarks>
      <param name="userId">User Id or hexadecimal Key Id of the target OpenPGP key</param>
      <param name="imageId">target image sequence id, between 0 and <see cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.String)" />-1</param>
      <returns>true if the image was removed successfully, false if there is no public key with the specified Id</returns>
      <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeleteJpegImage(System.Int64,System.Int32)">
      <summary>
            Removes a JPEG photo image from an OpenPGP key
            </summary>
      <param name="keyId">Key Id of the target OpenPGP key</param>
      <param name="imageId">target image sequence id, between 0 and <see cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />-1</param>
      <returns>true if the image was removed successfully, otherwise false</returns>
      <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetJpegImageData(System.String,System.Int32)">
      <summary>
            Retrieves the associated JPEG photo image bytes from an OpenPGP key
            </summary>
      <remarks>
            If more than one OpenPGP key exists with a matching User Id or Hex Key Id, result for the first will be returned.
            </remarks>
      <param name="userId">Key Id of the OpenPGP key that contains the image</param>
      <param name="imageId">image sequence Id, must be between 0 and <see cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />-1</param>
      <returns>array of bytes, obtained from the JPEG image</returns>
      <example>
            Shows how to load the first photo in an OpenPGP key into a System.Drawing.Image object
            <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             if (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0)
             {
                int imageId = 0; // the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)));
             }
            </code><code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             If (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0) Then
                Dim imageId As Integer = 0 ' the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)))
             End If
            </code></example>
      <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetJpegImageData(System.Int64,System.Int32)">
      <summary>
            Retrieves the associated JPEG photo image bytes from an OpenPGP key
            </summary>
      <param name="keyId">Key Id of the OpenPGP key that contains the image</param>
      <param name="imageId">image sequence Id, must be between 0 and <see cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />-1</param>
      <returns>array of bytes, obtained from the JPEG image</returns>
      <example>
            Shows how to load the first photo in an OpenPGP key into a System.Drawing.Image object
            <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             if (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0)
             {
                int imageId = 0; // the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)));
             }
            </code><code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             If (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0) Then
                Dim imageId As Integer = 0 ' the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)))
             End If
            </code></example>
      <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.String)">
      <summary>
            Retrieves the number of JPEG photo images associated with an OpenPGP key
            </summary>
      <remarks>
            If more than one OpenPGP key exists with a matching User Id or Hex Key Id, result for the first will be returned.
            </remarks>
      <param name="userId">User Id or hexadecimal Key Id of the OpenPGP key</param>
      <returns>number of JPEG photo images contained in the OpenPGP key</returns>
      <example>
            Shows how to load the first photo in an OpenPGP key into a System.Drawing.Image object
            <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             if (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0)
             {
                int imageId = 0; // the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)));
             }
            </code><code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             If (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0) Then
                Dim imageId As Integer = 0 ' the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)))
             End If
            </code></example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)">
      <summary>
            Retrieves the number of JPEG photo images associated with an OpenPGP key
            </summary>
      <param name="keyId">Key Id of the OpenPGP key</param>
      <returns>number of JPEG photo images contained in the OpenPGP key</returns>
      <example>
            Shows how to load the first photo in an OpenPGP key into a System.Drawing.Image object
            <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             if (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0)
             {
                int imageId = 0; // the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)));
             }
            </code><code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             If (keyStore.GetJpegImagesCount(publicKeyId) &gt; 0) Then
                Dim imageId As Integer = 0 ' the first photo
                pictureBox1.Image = Image.FromStream(new MemoryStream(keyStore.GetJpegImageData(publicKeyId, imageId)))
             End If
            </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.AddJpegImage(System.String,System.String,System.Byte[])">
      <summary>
            Adds a JPEG photo image to an OpenPGP key.
            </summary>
      <remarks>
            Multiple JPEG images can be added to an OpenPGP key.
            <para>
            The private key component of the OpenPGP key must also be located in the same <see cref="T:DidiSoft.Pgp.KeyStore" /></para>
            If more than one OpenPGP key exists with a matching User Id, the first one only will be affected.
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.DeleteJpegImage(System.Int64,System.Int32)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImageData(System.Int64,System.Int32)" />
      <param name="userId">User Id or hexadecimal Key Id of the OpenPGP key that will accept the JPEG photo image</param>
      <param name="privateKeyPassword">The password of the private key component of the OpenPGP key </param>
      <param name="jpegImageData">JPEG image file data as array of bytes</param>
      <example>
        <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             byte[] jpegImage = System.IO.File.ReadAllBytes(openFileDialog1.FileName);
             keyStore.AddJpegImage(publicKeyId, txtPassword.Text, jpegImage);
            </code>
        <code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             Dim jpegImage As Byte() = System.IO.File.ReadAllBytes(openFileDialog1.FileName)
             keyStore.AddJpegImage(publicKeyId, txtPassword.Text, jpegImage)
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.AddJpegImage(System.String,System.String,System.String,System.Byte[])">
      <summary>
            Adds a JPEG photo image to an OpenPGP key, but signed with arbitrary secret key
            </summary>
      <remarks>
            Multiple JPEG images can be added to an OpenPGP key.
            <para>
            The private signing key must also be located in the same <see cref="T:DidiSoft.Pgp.KeyStore" /></para>
            If more than one OpenPGP key exists with a matching User Id, the first one only will be affected.
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.DeleteJpegImage(System.Int64,System.Int32)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImageData(System.Int64,System.Int32)" />
      <param name="userId">User Id or hexadecimal Key Id of the OpenPGP key that will accept the JPEG photo image</param>
      <param name="signingUserId">User Id or hexadecimal Key Id of the signing OpenPGP key</param>
      <param name="privateKeyPassword">The password of the signing OpenPGP key</param>
      <param name="jpegImageData">JPEG image file data as array of bytes</param>
      <example>
        <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             byte[] jpegImage = System.IO.File.ReadAllBytes(openFileDialog1.FileName);
             keyStore.AddJpegImage("myemail@mysite.com", "myemail@mysite.com", txtPassword.Text, jpegImage);
            </code>
        <code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             Dim jpegImage As Byte() = System.IO.File.ReadAllBytes(openFileDialog1.FileName)
             keyStore.AddJpegImage("myemail@mysite.com", "myemail@mysite.com", txtPassword.Text, jpegImage)
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.AddJpegImage(System.Int64,System.Int64,System.String,System.Byte[])">
      <summary>
            Adds a JPEG photo image to an OpenPGP key, but signed with arbitrary secret key
            </summary>
      <remarks>
            Multiple JPEG images can be added to an OpenPGP key.
            <para>
            The signing private key must also be located in the same <see cref="T:DidiSoft.Pgp.KeyStore" /></para></remarks>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.DeleteJpegImage(System.Int64,System.Int32)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImageData(System.Int64,System.Int32)" />
      <param name="keyId">Key Id of the OpenPGP key that will accept the JPEG photo image</param>
      <param name="signingSecretKeyId">Key Id of the secret OpenPGP key that will be used for signing</param>
      <param name="privateKeyPassword">The password of the secret OpenPGP key</param>
      <param name="jpegImageData">JPEG image file data as array of bytes</param>
      <example>
        <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             byte[] jpegImage = System.IO.File.ReadAllBytes(openFileDialog1.FileName);
             keyStore.AddJpegImage(publicKeyId, signingSecretKeyId, txtPassword.Text, jpegImage);
            </code>
        <code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             Dim jpegImage As Byte() = System.IO.File.ReadAllBytes(openFileDialog1.FileName)
             keyStore.AddJpegImage(publicKeyId, signingSecretKeyId, txtPassword.Text, jpegImage)
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Key Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.AddJpegImage(System.Int64,System.String,System.Byte[])">
      <summary>
            Adds a JPEG photo image to an OpenPGP key.
            </summary>
      <remarks>
            Multiple JPEG images can be added to an OpenPGP key.
            <para>
            The private key component of the OpenPGP key must also be located in the same <see cref="T:DidiSoft.Pgp.KeyStore" /></para></remarks>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.DeleteJpegImage(System.Int64,System.Int32)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImagesCount(System.Int64)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetJpegImageData(System.Int64,System.Int32)" />
      <param name="keyId">Key Id of the OpenPGP key that will accept the JPEG photo image</param>
      <param name="privateKeyPassword">The password of the private key component of the OpenPGP key </param>
      <param name="jpegImageData">JPEG image file data as array of bytes</param>
      <example>
        <code lang="C#">
             // Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             byte[] jpegImage = System.IO.File.ReadAllBytes(openFileDialog1.FileName);
             keyStore.AddJpegImage(publicKeyId, txtPassword.Text, jpegImage);
            </code>
        <code lang="VB.NET">
             ' Assuming keyStore is an instance of a DidiSoft.Pgp.KeyStore
             Dim jpegImage As Byte() = System.IO.File.ReadAllBytes(openFileDialog1.FileName)
             keyStore.AddJpegImage(publicKeyId, txtPassword.Text, jpegImage)
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Key Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.AddUserId(System.Int64,System.String,System.String)">
      <summary>
            Appends an additional User Id signature to a key contained in this key store.
            </summary>
      <remarks>
            Note that you must also have the corresponding private key in the same key store.
            <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para></remarks>
      <param name="keyId">target key Id</param>
      <param name="privateKeyPassword">the password of the corresponding private key</param>
      <param name="newUserId">the new user Id to be added</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no corresponding private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified password for the private key is wrong</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP exception</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForKeyIdHex(System.String)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForUserId(System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeleteUserId(System.Int64,System.String)">
      <summary>
            Removes a user Id signature from a key
            </summary>
      <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
      <param name="keyId">target key Id</param>
      <param name="userId">user Id to be removed</param>
      <returns>
        <see langword="true" /> if the user id signature was removed, 
                <see langword="false" /> if there was no such user id signature</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified key Id</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP exception</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForKeyIdHex(System.String)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForUserId(System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ChangeUserId(System.Int64,System.String,System.String,System.String)">
      <summary>
            Changes an existing user Id signature of a key with a new user Id
            </summary>
      <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
      <param name="keyId">target key Id</param>
      <param name="privateKeyPassword">the password of the corresponding private key</param>
      <param name="oldUserId">the old user Id to be changed </param>
      <param name="newUserId">the new user Id to be added</param>
      <returns>
        <see langword="true" /> if the user id signature was changed, 
                <see langword="false" /> if there was no such user id signature</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no corresponding private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified password for the private key is wrong</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP exception</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForKeyIdHex(System.String)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForUserId(System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.ChangePrimaryUserId(System.Int64,System.String,System.String)">
      <summary>
            Changes the primary (first) user Id signature of a key with a new user Id
            </summary>
      <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
      <param name="keyId">target key Id</param>
      <param name="privateKeyPassword">the password of the corresponding private key</param>
      <param name="newUserId">the new user Id to be added</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no corresponding private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified password for the private key is wrong</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general PGP exception</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForKeyIdHex(System.String)" />
      <seealso cref="M:DidiSoft.Pgp.KeyStore.GetKeyIdForUserId(System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeletePrivateKey(System.String)">
      <summary>
             Deletes the first private key from this key store that has the specified User Id.
             </summary>
      <remarks>
             If more than one key exist with the supplied User Id, only the first one is affected.
             <para>
             If no key exists with the specified User Id, no changes to the key store occurs.  
             </para>
             This method is equivalent to the GnuPG commands:
             <para>
             gpg --delete-secret-keys [userId]
             </para></remarks>
      <param name="userId">User Id or hexadecimal Key ID of the private key to be deleted</param>
      <returns>
        <see langword="true" /> if the key is deleted, <see langword="false" /> if there is no key with the specified User Id</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class DeletePrivateKey
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore("pgp.keystore", "changeit");
                    ks.DeletePrivateKey("test@gmail.com");			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DeletePrivateKey
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("pgp.keystore", "changeit")
                    ks.DeletePrivateKey("test@gmail.com")
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeletePublicKey(System.String)">
      <summary>
             Deletes the first public key pair from this key store that has the specified User Id.
             </summary>
      <remarks>
             If more than one key exist with the supplied User Id, only the first one is affected.
             <para>
             If no key exists with the specified User Id, no changes to the key store occurs.  
             </para>
             This method is equivalent to the GnuPG commands:
             <para>
             gpg --delete-keys [userId]
             </para></remarks>
      <param name="userId">User Id or hexadecimal Key ID of the public key to be deleted</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the key is deleted, <see langword="false" /> if there is no key with the specified user Id</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class DeletePubKey
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore("pgp.keystore", "changeit");
                    ks.DeletePublicKey("test@gmail.com");			
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DeletePubKey
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("pgp.keystore", "changeit")
                    ks.DeletePublicKey("test@gmail.com")
                End Sub
             End Class
             </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeletePrivateKey(System.Int64)">
      <summary>
            Deletes a private key with the specified key Id from this <see cref="T:DidiSoft.Pgp.KeyStore" />.
            </summary>
      <param name="keyId">Key Id of the private key</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if key is deleted, <see langword="false" /> if there is no key with the specified key Id</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeletePublicKey(System.Int64)">
      <summary>
            Deletes the public key with the specified key Id from this key store.
            </summary>
      <param name="keyId">Key Id of the key</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if key is deleted, <see langword="false" /> if there is no key with the specified key Id</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.DeleteKeyPair(System.Int64)">
      <summary>
            Deletes the key pair (public and private key) from this key store that have the specified keyId.
            </summary>
      <param name="keyId">Key Id of the key pair</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if key pair is deleted, <see langword="false" /> if there is no key pair with the specified key Id</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateEccKeyPair(DidiSoft.Pgp.EcCurve,System.String,System.String)">
      <summary>
             Generates an Elliptic Curve OpenPGP key pair with default values for preferred compression, hashing and cypher
             </summary>
      <remarks>
             Preferred hash algorithms are: SHA-256, SHA-384, SHA-512, SHA-224 
             <para>
             Preferred cipher algorithms are: AES-256, AES-192, AES-128
             </para>
             Preferred compression algorithms are: ZIP, BZIP2, ZLIB, UNCOMPRESSED
             </remarks>
      <param name="curve">Elliptic Curve used in the key generation</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> instance representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateEccKeyPairDemo
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    
                    // EC curve for this key   
                    EcCurve curve = EcCurve.P521;
                    // primary User Id of the key
                    string userId = "demo@didisoft.com";
                    // password for the private key
                    string privateKeyPassword = "changeit";
             
                    ks.GenerateEccKeyPair(curve, userId, privateKeyPassword);
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateEccKeyPairDemo
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
             
                    '  EC curve for this key
                    Dim curve As EcCurve = EcCurve.P521
                    ' primary User Id of the key
                    Dim userId As String = "demo@didisoft.com"
                    ' password for the private key
                    Dim privateKeyPassword As String = "changeit"
                     
                    ks.GenerateEccKeyPair(curve, userId, privateKeyPassword)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateEccKeyPair(DidiSoft.Pgp.EcCurve,System.String,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[])">
      <summary>
             Generates an Elliptic Curve OpenPGP key pair with preferred algorithms and no expiration date
             </summary>
      <remarks>
      </remarks>
      <param name="curve">Elliptic Curve used in the key generation</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Array of compression algorithms supported by the key.</param>
      <param name="hashingAlgorithmTypes">Array of hashing algorithms supported by the key.</param>
      <param name="cipherTypes">Array of symmetric encryption algorithms supported by the key.</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> instance representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateEccKeyPairDemo
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
             
                    // Elliptic Curve to be used for the key
                    EcCurve curve = EcCurve.P521 
             
                    // Preferred algorithms for compression and symmetric encryption
                    CompressionAlgorithm[] compression = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB};
                    HashAlgorithm[] hashingAlgorithm = {HashAlgorithm.SHA256, HashAlgorithm.SHA512, HashAlgorithm.SHA1};
                    CypherAlgorithm[] cyphers = {CypherAlgorithm.AES_128, CypherAlgorithm.CAST5};
            		
                    ks.GenerateEccKeyPair(curve, 
                                         "DidiSoft Support &lt;support@didisoft.com&gt;", 
                                         "changeit",
                                         compression,
                                         hashingAlgorithm,
                                         cyphers);
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateEccKeyPairDemo
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
             
                    ' Elliptic Curve to be used for the key
                    Dim curve As EcCurve = EcCurve.P521
             
                    ' Preferred algorithms for compression and symmetric encryption
                    Dim compression() As CompressionAlgorithm = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB}
                    Dim hashingAlgorithm() As HashAlgorithm = {HashAlgorithm.SHA256, HashAlgorithm.SHA512, HashAlgorithm.SHA1}
                    Dim cyphers() As CypherAlgorithm = {CypherAlgorithm.AES_128, CypherAlgorithm.CAST5}
                    
                    ks.GenerateEccKeyPair(curve, _
                                          "DidiSoft Support &lt;support@didisoft.com&gt;", _
                                          "changeit", _
                                          compression, _
                                          hashingAlgorithm, _
                                          cyphers)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateEccKeyPair(DidiSoft.Pgp.EcCurve,System.String,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[],System.DateTime)">
      <summary>
             Generates an Elliptic Curve OpenPGP key pair with preferred algorithms and expiration date
             </summary>
      <remarks>
      </remarks>
      <param name="curve">Elliptic Curve used in the key generation</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Array of compression algorithms supported by the key.</param>
      <param name="hashingAlgorithmTypes">Array of hashing algorithms supported by the key.</param>
      <param name="cipherTypes">Array of symmetric encryption algorithms supported by the key.</param>
      <param name="validToDate">Expiration Date for this key</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> instance representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateEccKeyPairDemo
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
             
                    // Elliptic Curve to be used for the key
                    EcCurve curve = EcCurve.P521 
             
                    // Preferred algorithms for compression and symmetric encryption
                    CompressionAlgorithm[] compression = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB};
                    HashAlgorithm[] hashingAlgorithm = {HashAlgorithm.SHA256, HashAlgorithm.SHA512, HashAlgorithm.SHA1};
                    CypherAlgorithm[] cyphers = {CypherAlgorithm.AES_128, CypherAlgorithm.CAST5};
            		
                    // key validity date
                    DateTime validToDate = DateTime.Now.AddDays(365);
                    
                    ks.GenerateEccKeyPair(curve, 
                                         "DidiSoft Support &lt;support@didisoft.com&gt;", 
                                         "changeit",
                                         compression,
                                         hashingAlgorithm,
                                         cyphers,
                                         validToDate);
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateEccKeyPairDemo
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
             
                    ' Elliptic Curve to be used for the key
                    Dim curve As EcCurve = EcCurve.P521
             
                    ' Preferred algorithms for compression and symmetric encryption
                    Dim compression() As CompressionAlgorithm = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB}
                    Dim hashingAlgorithm() As HashAlgorithm = {HashAlgorithm.SHA256, HashAlgorithm.SHA512, HashAlgorithm.SHA1}
                    Dim cyphers() As CypherAlgorithm = {CypherAlgorithm.AES_128, CypherAlgorithm.CAST5}
                    
                    ' key validity date
                    Dim validToDate As DateTime = DateTime.Now.AddDays(365)
                    
                    ks.GenerateEccKeyPair(curve, _
                                          "DidiSoft Support &lt;support@didisoft.com&gt;", _
                                          "changeit", _
                                          compression, _
                                          hashingAlgorithm, _
                                          cyphers, _
                                          validToDate)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateRsaKeyPair(System.Int32,System.String,System.String)">
      <summary>
             Generates an RSA OpenPGP key pair with default values for preferred compression, hashing and cypher
             </summary>
      <remarks>
      </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> instance representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    ks.GenerateKeyPair(2048, "demo@didisoft.com", "changeit");
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    ks.GenerateRSAKeyPair(2048, "demo@didisoft.com", "changeit")
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateElgamalKeyPair(System.Int32,System.String,System.String)">
      <summary>
             Generates an Elgamal (DH/DSS) OpenPGP key pair with default values for preferred compression, hashing and cypher.
             </summary>
      <remarks>
      </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> instance representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    ks.GenerateElgamalKeyPair(2048, "demo@didisoft.com", "changeit");
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    ks.GenerateElgamalKeyPair(2048, "demo@didisoft.com", "changeit")
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateKeyPair(System.Int32,System.String,System.String)">
      <summary>
             Generates OpenPGP Key pair with RSA encryption and predefined values for compression, hashing and cypher 
             like the ones generated with PGP Desktop(tm) wizard.
             </summary>
      <remarks>
      </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">
      </exception>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> class representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair
             {
                public void Demo()			
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
                    ks.GenerateKeyPair(1024, "demo@didisoft.com", "changeit");
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair
                Public Sub Test()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
                    ks.GenerateKeyPair(1024, "demo@didisoft.com", "changeit")
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateKeyPair(System.Int32,System.String,DidiSoft.Pgp.KeyAlgorithm,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[])">
      <summary>
             Generates OpenPGP Key pair (public and private key) with no expiration date.
             <para>The newly generated key is stored in this KeyStore instance.</para></summary>
      <remarks>
             Note: for key size larger than 2048 bits key generation will take a few moments.
             </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Array of compression algorithms supported by the key.</param>
      <param name="hashingAlgorithmTypes">Array of hashing algorithms supported by the key.</param>
      <param name="cipherTypes">Array of symmetric encryption algorithms supported by the key.</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> class representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPairRSA
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
            		
                    String userId = "demo2@didisoft.com";
                    String privateKeyPassword = "changeit";
                    CompressionAlgorithm[] compression = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB};
                    HashAlgorithm[] hashingAlgorithm = {HashAlgorithm.MD5, HashAlgorithm.SHA1};
                    CypherAlgorithm[] cypher = {CypherAlgorithm.CAST5, CypherAlgorithm.AES_128};
            		
                    ks.GenerateKeyPair( 1024, 
                                        userId, 
                                        KeyAlgorithm.RSA, 
                                        privateKeyPassword, 
                                        compression, 
                                        hashingAlgorithm, 
                                        cypher);		
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPairRSA
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
            
                    Dim userId As String = "demo2@didisoft.com"
                    Dim privateKeyPassword As String = "changeit"
                    Dim compression() As CompressionAlgorithm = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB}
                    Dim hashingAlgorithm() As HashAlgorithm = {HashAlgorithm.MD5, HashAlgorithm.SHA1}
                    Dim cypher() As CypherAlgorithm = {CypherAlgorithm.CAST5, CypherAlgorithm.AES_128}
            
                    ks.GenerateKeyPair( 1024, _
                                          userId, _
                                          KeyAlgorithm.RSA, _
                                          privateKeyPassword, _
                                          compression, _
                                          hashingAlgorithm, _
                                          cypher)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateKeyPair(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
             Generates OpenPGP Key pair (public and private key).
             <para>The newly generated key is stored in this KeyStore instance.</para></summary>
      <remarks>
             Note: for key size larger than 2048 bits key generation will take a few moments.
             </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key. <para>Comma separated list of one or more of: ZLIB, ZIP, UNCOMPRESSED, BZIP2</para></param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key. <para>Comma separated list of one or more of: SHA256, SHA384, SHA512, SHA224, SHA1, MD5, RIPEMD160, MD2</para></param>
      <param name="cipherTypes">Symmetric algorithms supported by the key. <para>Comma separated list of one or more of: TRIPLE_DES, CAST5, BLOWFISH, AES_128, AES_192, AES_256, TWOFISH, DES, SAFER</para></param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> class representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair2
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
            		
                    String keyAlgorithm = "RSA"; 
                    String userId = "demo2@didisoft.com";
                    String hashingAlgorithm = "SHA1, MD5";
                    String compression = "ZLib, ZIP";
                    String cypher = "CAST5";
                    String privateKeyPassword = "changeit";
            		
                    ks.GenerateKeyPair( 1024, 
                                        userId, 
                                        keyAlgorithm, 
                                        privateKeyPassword, 
                                        compression, 
                                        hashingAlgorithm, 
                                        cypher);		
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair2
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
            
                    Dim keyAlgorithm As String = "RSA"
                    Dim userId As String = "demo2@didisoft.com"
                    Dim hashingAlgorithm As String = "SHA1, MD5"
                    Dim compression As String = "ZLib, ZIP"
                    Dim cypher As String = "CAST5"
                    Dim privateKeyPassword As String = "changeit"
            
                    ks.GenerateKeyPair( 1024, _
                                         userId, _
                                         keyAlgorithm, _
                                         privateKeyPassword, _
                                         compression, _
                                         hashingAlgorithm, _
                                         cypher)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateKeyPair(System.Int32,System.String,DidiSoft.Pgp.KeyAlgorithm,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[],System.DateTime)">
      <summary>
             Generates a PGP key pair (public and private key) that expires on given date.
             <para>
             The newly generated key is stored in this KeyStore instance.
             </para></summary>
      <remarks>
             Note: for key size larger than 2048 bits key generation will take a few moments.
             </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Array of compression algorithms supported by the key.</param>
      <param name="hashingAlgorithmTypes">Array of hashing algorithms supported by the key.</param>
      <param name="cipherTypes">Array of symmetric encryption algorithms supported by the key.</param>
      <param name="validToDate">Expiration Date for this key</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> class representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair2
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
            		
                    String userId = "demo2@didisoft.com";
                    String privateKeyPassword = "changeit";
                    CompressionAlgorithm[] compression = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB};
                    HashAlgorithm[] hashingAlgorithm = {HashAlgorithm.MD5, HashAlgorithm.SHA1};
                    CypherAlgorithm[] cypher = {CypherAlgorithm.CAST5, CypherAlgorithm.AES_128};
            		
                    DateTime validToDate = DateTime.Now.AddDays(365);
             
                    ks.GenerateKeyPair( 1024, 
                                        userId, 
                                        KeyAlgorithm.RSA, 
                                        privateKeyPassword, 
                                        compression, 
                                        hashingAlgorithm, 
                                        cypher, 
                                        validToDate);		
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair2
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
            
                    Dim userId As String = "demo2@didisoft.com"
                    Dim privateKeyPassword As String = "changeit"
                    Dim compression() As CompressionAlgorithm = {CompressionAlgorithm.ZIP, CompressionAlgorithm.ZLIB}
                    Dim hashingAlgorithm() As HashAlgorithm = {HashAlgorithm.MD5, HashAlgorithm.SHA1}
                    Dim cypher() As CypherAlgorithm = {CypherAlgorithm.CAST5, CypherAlgorithm.AES_128}
                    
                    Dim validToDate As DateTime = DateTime.Now.AddDays(365)
            
                    ks.GenerateKeyPair( 1024, _
                                         userId, _
                                         KeyAlgorithm.RSA, _
                                         privateKeyPassword, _
                                         compression, _
                                         hashingAlgorithm, _
                                         cypher, _
                                         validToDate)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateKeyPair(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
      <summary>
             Generates PGP Key pair (public and private key).
             <para>The newly generated key is stored in this KeyStore instance.</para></summary>
      <remarks>
             Note: for key size larger than 2048 bits key generation will take a few moments.
             </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key. <para>Comma separated list of one or more of: ZLIB, ZIP, UNCOMPRESSED, BZIP2</para></param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key. <para>Comma separated list of one or more of: SHA256, SHA384, SHA512, SHA224, SHA1, MD5, RIPEMD160, MD2</para></param>
      <param name="cipherTypes">Symmetric algorithms supported by the key. <para>Comma separated list of one or more of: TRIPLE_DES, CAST5, BLOWFISH, AES_128, AES_192, AES_256, TWOFISH, DES, SAFER</para></param>
      <param name="validToDate">Expiration Date for this key</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> class representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair2
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
            		
                    String keyAlgorithm = "RSA"; 
                    String userId = "demo2@didisoft.com";
                    String hashingAlgorithm = "SHA1";
                    String compression = "ZLib";
                    String cypher = "CAST5";
                    String privateKeyPassword = "changeit";
            		
                    DateTime validToDate = new DateTime(2010, 12, 31); 
             
                    ks.GenerateKeyPair( 1024, 
                                        userId, 
                                        keyAlgorithm, 
                                        privateKeyPassword, 
                                        compression, 
                                        hashingAlgorithm, 
                                        cypher, 
                                        validToDate);		
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair2
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
            
                    Dim keyAlgorithm As String = "RSA"
                    Dim userId As String = "demo2@didisoft.com"
                    Dim hashingAlgorithm As String = "SHA1"
                    Dim compression As String = "ZLib"
                    Dim cypher As String = "CAST5"
                    Dim privateKeyPassword As String = "changeit"
                    
                    Dim validToDate As New DateTime(2010, 12, 31)
            
                    ks.GenerateKeyPair( 1024, _
                                         userId, _
                                         keyAlgorithm, _
                                         privateKeyPassword, _
                                         compression, _
                                         hashingAlgorithm, _
                                         cypher, _
                                         validToDate)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GenerateKeyPair(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64)">
      <summary>
             Generates PGP Key pair (public and private key).
             <para>The newly generated key is stored in this KeyStore instance.</para></summary>
      <remarks>
             Note: for key size larger than 2048 bits key generation will take a few moments.
             </remarks>
      <param name="keySize">Size of the keys</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key. <para>Comma separated list of one or more of: ZLIB, ZIP, UNCOMPRESSED, BZIP2</para></param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key. <para>Comma separated list of one or more of: SHA256, SHA384, SHA512, SHA224, SHA1, MD5, RIPEMD160, MD2</para></param>
      <param name="cipherTypes">Symmetric algorithms supported by the key. <para>Comma separated list of one or more of: TRIPLE_DES, CAST5, BLOWFISH, AES_128, AES_192, AES_256, TWOFISH, DES, SAFER</para></param>
      <param name="expirationAfterDays">umber of days the key will be valid. For example 365 for one year.</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> class representing the generated key pair</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class GenerateKeyPair2
             {
                public static void Demo()
                {
                    KeyStore ks = new KeyStore(@"DataFiles\key.store", "changeit");
            		
                    String keyAlgorithm = "RSA"; 
                    String userId = "demo2@didisoft.com";
                    String hashingAlgorithm = "SHA1";
                    String compression = "ZLib";
                    String cypher = "CAST5";
                    String privateKeyPassword = "changeit";
            		
                    long daysValid = 356; 
             
                    ks.GenerateKeyPair( 1024, 
                                        userId, 
                                        keyAlgorithm, 
                                        privateKeyPassword, 
                                        compression, 
                                        hashingAlgorithm, 
                                        cypher, 
                                        daysValid);		
                }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class GenerateKeyPair2
                Public Shared Sub Demo()
                    Dim ks As New KeyStore("DataFiles\key.store", "changeit")
            
                    Dim keyAlgorithm As String = "RSA"
                    Dim userId As String = "demo2@didisoft.com"
                    Dim hashingAlgorithm As String = "SHA1"
                    Dim compression As String = "ZLib"
                    Dim cypher As String = "CAST5"
                    Dim privateKeyPassword As String = "changeit"
                    
                    Dim daysValid As Long = 365
            
                    ks.GenerateKeyPair( 1024, _
                                        userId, _ 
                                        keyAlgorithm, _
                                        privateKeyPassword, _
                                        compression, _
                                        hashingAlgorithm, _
                                        cypher, _
                                        daysValid)
                End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">Key generation error</exception>
      <exception cref="T:System.ArgumentException">if an invalid parameter was provided</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SetTrust(System.Int64,DidiSoft.Pgp.TrustLevel)">
      <summary>
            Sets an internal trust value for a public key, valid only in this KeyStore instance
            </summary>
      <remarks>
            PGP command line (r) equivalent:
            <para>
            pgp --set-trust keyId --trust trustValue
            </para></remarks>
      <param name="keyId">Key Id of the public key</param>
      <param name="trustValue">trust amount</param>
      <see cref="T:DidiSoft.Pgp.TrustLevel" />
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SetTrust(System.String,DidiSoft.Pgp.TrustLevel)">
      <summary>
            Sets an internal trust value for a public key, valid only in this KeyStore instance
            </summary>
      <remarks>
            PGP command line (r) equivalent:
            <para>
            pgp --set-trust keyId --trust trustValue
            </para></remarks>
      <param name="userId">User Id of the public key</param>
      <param name="trustValue">trust amount</param>
      <see cref="T:DidiSoft.Pgp.TrustLevel" />
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no public key with the specified Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.IsTrusted(System.Int64)">
      <summary>
            Checks is a public key trusted in this Key store.
            </summary>
      <param name="keyId">Key Id of the key to be checked</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if this key is trusted in this key store, <see langword="false" /> otherwise</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no public key with the specified Id</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.SetTrust(System.Int64,DidiSoft.Pgp.TrustLevel)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.IsTrusted(System.String)">
      <summary>
            Checks is a public key trusted in this Key store.
            </summary>
      <param name="userId">User Id or hexadecimal Key ID of the key to be checked</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if this key is trusted in this key store, <see langword="false" /> otherwise</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no public key with the specified Id</exception>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.SetTrust(System.Int64,DidiSoft.Pgp.TrustLevel)" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SignPublicKey(System.Int64,System.Int64,System.String)">
      <summary>
            Signs a public key with a specified private key.
            </summary>
      <remarks>
            Signing a key certifies that you know the owner of the keys.
            <para>
            When you import keys into your <see cref="T:DidiSoft.Pgp.KeyStore" /> and are sure that the trusted third party 
            is really the organization/person they claim to be, you can sign his/her keys.
            </para><para>
            PGP command line(r) equivalent:
            </para><para>
            pgp --sign-key keyId  --signer signingKeyId --sig-type exportable
            </para><para>
            GnuPG equivalent command:
            </para>
            gpg --local-user signingKeyId --sign-key keyId
            </remarks>
      <param name="keyId">Key ID of the public key to be signed</param>
      <param name="signingKeyId">Key ID of the private key used to sign the public key with</param>
      <param name="signingPassword">Password of the private key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">No private key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">No public key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP signing error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SignPublicKeyAsTrustedIntroducer(System.Int64,System.Int64,System.String)">
      <summary>
            Signs a public key as trusted introducer
            </summary>
      <remarks>
            Signs the key indicating that the owner of the key should be completely trusted to vouch for other keys.
            <para>
            PGP command line(r) equivalent:
            </para>
            pgp --sign-key keyId  --signer signingKeyId --sig-type trusted-introducer 
            </remarks>
      <param name="keyId">Key ID of the public key to be signed</param>
      <param name="signingKeyId">Key ID of the private key used to sign the public key with</param>
      <param name="signingKeyPassword">Password of the own private key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">No private key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">No public key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP signing error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.SignPublicKeyAsTrustedIntroducer(System.String,System.Int64,System.String)">
      <summary>
            Signs a public key as trusted introducer
            </summary>
      <remarks>
            Signs the key indicating that the owner of the key should be completely trusted to vouch for other keys.
            <para>
            PGP command line(r) equivalent:
            </para>
            pgp --sign-key userId  --signer signingKeyUserId --sig-type trusted-introducer 
            </remarks>
      <param name="userId">User ID of the public key to be signed</param>
      <param name="signingKeyUserId">User ID of the private key used to sign the public key with</param>
      <param name="signingKeyPassword">Password of the own private key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">No private key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">No public key has been found with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP signing error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetSecretKeysWithUserId(System.String)">
      <summary>
            Returns the secret keys data with the specified User Id contained in this <c>IKeyStore</c></summary>
      <param name="userId">User ID or Key Hex ID of the key in interest</param>
      <returns>the secret keys data with the specified User Id contained in this <c>IKeyStore</c></returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.GetSecretKeyWithKeyId(System.Int64)">
      <summary>
            Returns the secret key data with the specified Key Id contained in this <c>IKeyStore</c></summary>
      <param name="keyId">Key ID of the key in interest</param>
      <returns>the secret key data with the specified Key Id contained in this <c>IKeyStore</c></returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyStore.loadKeyFile(System.String,System.String)">
      <summary>
            Helper method for importing external public or private keys
            </summary>
      <param name="password">password</param>
      <param name="keyFile">keyFile</param>
    </member>
    <member name="E:DidiSoft.Pgp.KeyStore.OnSave">
      <summary>
            Event triggered when the KeyStore data has been modified
            </summary>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.PartialMatchUserIds">
      <summary>
            Sets/Gets is searching keys performed on whole User Id or only on part of it.
            </summary>
      <value>
            if <see langword="true" /> keys can be matched on part of the User Id, when <see langword="false" /> keys will be matched only with a whole User Id
            </value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.IsInMemory">
      <summary>
            Indicates is this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance in-memory (<see langword="true" />)
            or file based (<see langword="false" />)
            </summary>
      <value>
        <see langword="true" /> if this KeyStore is located in-memory, <see langword="false" /> if it is file based</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.FileName">
      <summary>
            File name where this KeyStore object is stored.
            </summary>
      <value>File name where this KeyStore is persisted, an empty string if it is memory based</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.Password">
      <summary>
            Password of this KeyStore
            </summary>
      <value>Password of this KeyStore</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.AutoSave">
      <summary>
            Property that indicates should the KeyStore backing file be auto saved 
            after each operation that changes its state.
            </summary>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.Save" />
      <value>
            if <see langword="true" /> and the KeyStore is backed by a file it is persisted to the disk after each operation, 
            otherwise its state has to be manually persisted by invoking <see cref="M:DidiSoft.Pgp.KeyStore.Save" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.BackupOnSave">
      <summary>
            Property that indicates should the old KeyStore backing file be 
            copied automatically in a file with extension .bak right before the save operation
            </summary>
      <seealso cref="M:DidiSoft.Pgp.KeyStore.Save" />
      <value>
            if <see langword="true" /> and the KeyStore is backed by a file a file with an extension .bak, 
            is stored with its previous state after each operation.
            </value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.UserIds">
      <summary>
            Returns array of Strings representing all key User Id's contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance.
            </summary>
      <value>
            Array of Strings representing all key User Id's contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyStore.HexKeyIds">
      <summary>
            Returns array of Hexadecimal string representation of the key Id's for the keys contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance.
            <para>
            This hexadecimal value is composed of the lower four bytes of the real key Id (8 bytes) and is the same as the one displayed by PGP (r) and GnuPG.
            </para></summary>
      <value>
            Array of hexadecimal string representation of the key Id's for the keys contained in this <see cref="T:DidiSoft.Pgp.KeyStore" /></value>
    </member>
    <member name="T:DidiSoft.Pgp.KeyStore.SaveHandler">
      <summary>
            Save handler delegate method
            </summary>
      <param name="store">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> object that is saved</param>
      <param name="e">event arguments</param>
    </member>
    <member name="M:DidiSoft.Pgp.Extra.InMemoryKeyStore.#ctor">
      <summary>
            Creates an empty In Memory KeyStore
            </summary>
      <remarks>
            Using this class is equivalent with <c>KeyStore.OpenInMemory()</c></remarks>
    </member>
    <member name="T:DidiSoft.Pgp.Inspect.ContentItem">
      <summary>
            Represents information for a file or directory contained in an OpenPGP archive.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.ContentItem.FileName">
      <summary>
            The file name associated with an encrypted item.
            </summary>
      <value>original file name of the item stored in the OpenPGP archive</value>
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.ContentItem.ModificationTime">
      <summary>
            Modification date as stored in the OpenPGP archive
            </summary>
      <value>the modification date of this item stored in the OpenPGP archive</value>
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.ContentItem.IsDirectory">
      <summary>
            Is this item a directory or a file
            </summary>
      <value>
        <see langword="true" /> if the item is a directory, <see langword="false" /> if it is a file</value>
    </member>
    <member name="T:DidiSoft.Pgp.Inspect.PGPInspectLib">
      <summary>
            This class provides methods for inspecting the contents of OpenPGP files and streams.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.IsPublicKeyEncrypted(System.IO.FileInfo)">
      <summary>
            Checks is a given OpenPGP file encrypted with a public key. 
            </summary>
      <param name="encryptedFile">OpenPGP file to be checked</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the file is OpenPGP encrypted with a public key, <see langword="false" /> if this is another type of OpenPGP archive   </returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this file is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.IsPublicKeyEncrypted(System.IO.Stream)">
      <summary>
            Checks is a given OpenPGP data stream encrypted with a public key. 
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="encryptedStream">OpenPGP encrypted stream to be checked</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the stream is OpenPGP encrypted with a public key, <see langword="false" /> if this is another type of OpenPGP archive   </returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.IsPBEEncrypted(System.IO.FileInfo)">
      <summary>
            Checks is a given OpenPGP file encrypted with a password. 
            </summary>
      <param name="encryptedFile">source file to be checked</param>
      <returns>
        <see langword="true" /> if the file is OpenPGP encrypted with a password, <see langword="false" /> if this is another type of OpenPGP archive</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this file is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.IsPBEEncrypted(System.IO.Stream)">
      <summary>
            Checks is a given OpenPGP stream encrypted with a password. 
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="encryptedStream">source stream to be checked</param>
      <returns>
        <see langword="true" /> if the stream is OpenPGP encrypted with a password, <see langword="false" /> if this is another type of OpenPGP archive</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.IsSignedOnly(System.IO.FileInfo)">
      <summary>
             Checks is a given OpenPGP file digitally signed only without encryption
            </summary>
      <remarks>
            Returns <c><see langword="true" /></c> for clear signed data too.
            </remarks>
      <param name="signedFile">OpenPGP file to be checked</param>
      <returns>
        <see langword="true" /> if the archive is only signed with no encryption, <see langword="false" /> otherwise</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.IsSignedOnly(System.IO.Stream)">
      <summary>
            Checks is a given OpenPGP stream digitally signed only without encryption
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            <para>
            Returns <c><see langword="true" /></c> for clear signed data too.
            </para></remarks>
      <param name="signedStream">OpenPGP data stream to be checked</param>
      <returns>
        <see langword="true" /> if the archive is only signed with no encryption, <see langword="false" /> otherwise</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListEncryptionKeyIds(System.IO.FileInfo)">
      <summary>
            Returns the Key Id's that have encrypted a given OpenPGP file 
            </summary>
      <param name="encryptedFile">encrypted OpenPGP file</param>
      <returns>list of encryption Key Id's</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this file is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListEncryptionKeyIds(System.IO.Stream)">
      <summary>
            Returns the Key Id's that have encrypted a given OpenPGP stream 
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="encryptedStream">encrypted OpenPGP stream</param>
      <returns>list of encryption Key Id's</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListRevocationCertificateFile(System.IO.FileInfo)">
      <summary>
            Returns a list of the revocation signatures contained in an OpenPGP revocation certificate
            </summary>
      <param name="revocationCertificateFile">OpenPGP revocation certificate file</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" />, empty array if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListRevocationCertificateText(System.String)">
      <summary>
            Returns a list of the revocation signatures contained in an OpenPGP revocation certificate
            </summary>
      <param name="revocationCertificateText">OpenPGP revocation certificate text</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" />, empty array if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListRevocationCertificateStream(System.IO.Stream)">
      <summary>
            Returns a list of the revocation signatures contained in an OpenPGP revocation certificate
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="revocationCertificateStream">stream obtained form an OpenPGP revocation certificate</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" />, empty array if no signatures are present</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp.Inspect;
            
            public class ListRevocationCertificate
            {
            	public static void Demo()
            	{
            		string revocationCertFile = @"c:\rev_cert.txt";
            
            		PGPInspectLib inspect = new PGPInspectLib();
            		SignatureItem[] revocationSignatures = 
            			inspect.ListRevocationCertificateFile(new FileInfo(revocationCertFile));
            
            		foreach (SignatureItem signature in revocationSignatures)
            		{
            			Console.WriteLine(signature.KeyId);
            		}
            	}
            }
            </code>
        <code lang="VB.NET">
            Imports System
            Imports DidiSoft.Pgp.Inspect
            
            Public Class ListRevocationCertificate
            	Public Shared Sub Demo()
            		Dim revocationCertFile As String = "c:\rev_cert.txt"
            
            		Dim inspect As New PGPInspectLib()
            		Dim revocationSignatures As SignatureItem() = _
            		 inspect.ListRevocationCertificateFile(New FileInfo(revocationCertFile))
            
            		For Each signature As SignatureItem In revocationSignatures
            			Console.WriteLine(signature.KeyId)
            		Next
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListSignatures(System.IO.Stream)">
      <summary>
            Returns an array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" /> objects contained in an OpenPGP signed data
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="signedOnlyStream">OpenPGP signed only data</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" /> objects</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If this stream is not only signed but also encrypted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListSignatures(System.IO.Stream,System.IO.Stream,System.String)">
      <summary>
            Returns a list of the Key Id's for the key(s) that have signed a given OpenPGP archive
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="encryptedStream">OpenPGP encrypted data</param>
      <param name="privateKeyStream">private key data in order to decrypt the file and inspect the signatures</param>
      <param name="privateKeyPassword">private key password</param>
      <returns>list of signing Key Id's, empty if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the input stream was not encrypted with this private key.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the password for this private key is misspelled.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListSigningKeyIds(System.IO.FileInfo)">
      <summary>
            Returns a list of the Key Id's for the key(s) that have signed a given OpenPGP archive
            </summary>
      <param name="signedOnlyFile">OpenPGP signed only data</param>
      <returns>list of signing Key Id's, empty if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this file is not a valid OpenPGP archive</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If this file is not only signed but also encrypted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListSigningKeyIds(System.IO.Stream)">
      <summary>
            Returns a list of the Key Id's for the key(s) that have signed a given OpenPGP archive
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="signedOnlyStream">OpenPGP signed only data</param>
      <returns>list of signing Key Id's, empty if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If this stream is not only signed but also encrypted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListSigningKeyIds(System.IO.FileInfo,System.IO.FileInfo,System.String)">
      <summary>
            Returns a list of the Key Id's for the key(s) that have signed a given OpenPGP archive
            </summary>
      <param name="encryptedFile">OpenPGP encrypted data</param>
      <param name="privateKeyFile">private key data in order to decrypt the file and inspect the signatures</param>
      <param name="privateKeyPassword">private key password</param>
      <returns>list of signing Key Id's, empty if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this file is not a valid OpenPGP archive</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the input file was not encrypted with this private key.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the password for this private key is misspelled.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListSigningKeyIds(System.IO.Stream,System.IO.Stream,System.String)">
      <summary>
            Returns a list of the Key Id's for the key(s) that have signed a given OpenPGP archive
            </summary>
      <remarks>
            After the check the stream Position is at the end of the stream.
            </remarks>
      <param name="encryptedStream">OpenPGP encrypted data</param>
      <param name="privateKeyStream">private key data in order to decrypt the file and inspect the signatures</param>
      <param name="privateKeyPassword">private key password</param>
      <returns>list of signing Key Id's, empty if no signatures are present</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the input stream was not encrypted with this private key.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the password for this private key is misspelled.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListOpenPgpFile(System.String,System.String,System.String)">
      <summary>
            Lists the contents of an OpenPGP encrypted or signed file
            </summary>
      <param name="fileName">OpenPGP encrypted or signed file (absolute or relative path)</param>
      <param name="privateKeyFileName">Private key file name (absolute or relative path) </param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.ContentItem" /> representing the contents of the file</returns>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListOpenPgpStream(System.IO.Stream,System.IO.Stream,System.String)">
      <summary>
             Lists the contents of an OpenPGP encrypted or signed stream
             </summary>
      <param name="encryptedStream">OpenPGP encrypted or signed stream</param>
      <param name="privateKeyStream">Private key file stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.ContentItem" /> representing the contents of the stream</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">If this stream is not a valid OpenPGP archive</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListDetachedSignatureFile(System.String)">
      <summary>
             Lists information for an OpenPGP detached signature file
             </summary>
      <param name="detachedSignatureFile">OpenPGP detached signature file</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" /> objects</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the source is not an OpenPGP detached signature</exception>
    </member>
    <member name="M:DidiSoft.Pgp.Inspect.PGPInspectLib.ListDetachedSignatureStream(System.IO.Stream)">
      <summary>
            Lists information for an OpenPGP detached signature stream
            </summary>
      <param name="detachedSignatureStream">OpenPGP detached signature stream</param>
      <returns>array of <see cref="T:DidiSoft.Pgp.Inspect.SignatureItem" /> objects</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the source is not an OpenPGP detached signature</exception>
    </member>
    <member name="T:DidiSoft.Pgp.Inspect.SignatureItem">
      <summary>
            Contains information for an OpenPGP signature
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.SignatureItem.UserId">
      <summary>
            Gets the signer User identifier is available. 
            <para>
            If not available will return an empty string (String.Empty)
            </para></summary>
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.SignatureItem.KeyId">
      <summary>
            Gets the signature creator's key Id. 
            </summary>
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.SignatureItem.KeyIdHex">
      <summary>
            Gets the signature creator's key Id in hexadecimal format  
            </summary>
    </member>
    <member name="P:DidiSoft.Pgp.Inspect.SignatureItem.CreationTime">
      <summary>
            Returns the signature creation time
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.Logging.LogEventArgs">
      <summary>
            Represents library log event details
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.Logging.LogEventArgs.#ctor(System.String)">
      <summary>
            Constructs a log event details
            </summary>
      <param name="msg">Log message</param>
    </member>
    <member name="P:DidiSoft.Pgp.Logging.LogEventArgs.Message">
      <summary>
            Log event message
            </summary>
      <value>Log event message</value>
    </member>
    <member name="P:DidiSoft.Pgp.Logging.LogEventArgs.EventTime">
      <summary>
            Log event time
            </summary>
      <value>Log event time</value>
    </member>
    <member name="T:DidiSoft.Pgp.CompressionAlgorithm">
      <summary>
            Specifies a compression algorithm. 
            </summary>
      <example>
            This example demonstrates how to specify the preferred compression algorithm used by the library. 
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.Compression = CompressionAlgorithm.ZLIB;
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.Compression = CompressionAlgorithm.ZLIB
            </code></example>
    </member>
    <member name="F:DidiSoft.Pgp.CompressionAlgorithm.ZLIB">
      <summary>
            ZLib compression algorithm
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CompressionAlgorithm.ZIP">
      <summary>
            ZIP compression algorithm
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CompressionAlgorithm.BZIP2">
      <summary>
            BZip 2 compression algorithm
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CompressionAlgorithm.UNCOMPRESSED">
      <summary>
            Data is not compressed
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.ContentDataType">
      <summary>
            Available data types for the OpenPGP archive content
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.ContentDataType.Binary">
      <summary>
            Binary data (Default) 
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.ContentDataType.Text">
      <summary>
            Text data mode. The content will decrypt properly on systems with alternate line endings
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.ContentDataType.Utf8">
      <summary>
            indicates that implementation believes that the literal data contains UTF-8 text
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.CypherAlgorithm">
      <summary>
            Specifies a symmetric encryption (cipher) algorithm. 
            </summary>
      <example>
            This example demonstrates how to specify the preferred cipher algorithm used by the library. 
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.Cypher = CypherAlgorithm.TRIPLE_DES;
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.Cypher = CypherAlgorithm.TRIPLE_DES
            </code></example>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.TRIPLE_DES">
      <summary>
            Triple DES. 168 bit cipher involving three applications of the DES algorithm */
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.CAST5">
      <summary>
            CAST 5 (Default). 128 bit cipher used since PGP 5.0
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.BLOWFISH">
      <summary>
            Blowfish
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.AES_128">
      <summary>
            128 bit AES (Rijndael)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.AES_192">
      <summary>
            192 bit AES (Rijndael)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.AES_256">
      <summary>
            256 bit AES (Rijndael)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.TWOFISH">
      <summary>
            Twofish. 256-bit variant of former AES version
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.DES">
      <summary>
            DES
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.SAFER">
      <summary>
            SAFER
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.CypherAlgorithm.IDEA">
      <summary>
            IDEA
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.EcCurve">
      <summary>
            OpenPGP Elliptic Curve Cryptography (ECC) supported named curves
            defined in RFC 6637
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.EcCurve.P256">
      <summary>
            Elliptic curve over the field of 256 bit prime numbers  (NIST P-256)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.EcCurve.P384">
      <summary>
            Elliptic curve over the field of 384 bit prime numbers  (NIST P-384)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.EcCurve.P521">
      <summary>
            Elliptic curve over the field of 521 bit prime numbers (NIST P-521)
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.HashAlgorithm">
      <summary>
            Specifies a hash algorithm. 
            </summary>
      <example>
            This example demonstrates how to specify the preferred hash algorithm used by the library. 
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.Hash = HashAlgorithm.SHA256;
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.Hash = HashAlgorithm.SHA256
            </code></example>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.SHA1">
      <summary>
            Secure Hash Algorithm (SHA-1)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.SHA256">
      <summary>
            Secure Hash Algorithm 256 bit (SHA-2 256)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.SHA384">
      <summary>
            Secure Hash Algorithm 384 bit (SHA-2 384)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.SHA512">
      <summary>
            Secure Hash Algorithm 512 bit (SHA-2 512)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.SHA224">
      <summary>
            Secure Hash Algorithm 224 bit (SHA-2 224)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.MD5">
      <summary>
            Message Digest 5
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.RIPEMD160">
      <summary>
            RIPEMD-160, 160-bit message digest algorithm (RACE Integrity Primitives Evaluation Message Digest) 
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.HashAlgorithm.MD2">
      <summary>
            Message Digest 2
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.KeyAlgorithm">
      <summary>
            Defines the supported asymmetric encryption algorithms for OpenPGP keys. 
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.KeyAlgorithm.RSA">
      <summary>
            RSA (Rivest, Shamir and Adleman algorithm)
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.KeyAlgorithm.ELGAMAL">
      <summary>
            Implementation of DH/DSS
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.KeyAlgorithm.EC">
      <summary>
            Elliptic Curve Cryptography (ECC) in OpenPGP (RFC 6637)
            </summary>
    </member>
    <member name="T:DidiSoft.Pgp.KeyPairInformation">
      <summary>
            Represents an OpenPGP key pair.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.KeyIdToHex(System.Int64)">
      <summary>
            Helper method that converts a 64 bit Key ID into a 
            hexadecimal Key Id string equivalent to the one provided by PGP (r) and GnuPG.
            </summary>
      <param name="keyId">64 bit key Id to be converted to a hexadecimal string</param>
      <returns>hexadecimal string representation of the lower 32 bits of a key Id</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPublicKey(System.String,System.Boolean)">
      <summary>
            Exports the public key part of this key pair into a file.
            </summary>
      <param name="fileName">File name where the public key will be exported (absolute or relative path)</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> out is ASCII armoured, if <see langword="false" /> binary file format is used.</param>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPrivateKey(System.String,System.Boolean)">
      <summary>
            Exports the private key part of this key pair into a file.
            </summary>
      <param name="fileName">File name where the private key will be exported (absolute or relative path)</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> out is ASCII armored, if <see langword="false" /> binary file format is used.</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPublicKey(System.IO.Stream,System.Boolean)">
      <summary>
            Exports the public key part of this key pair into a Stream.
            </summary>
      <param name="toStream">Stream where the public key will be exported</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> out is ASCII armored, if <see langword="false" /> binary file format is used.</param>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPrivateKey(System.IO.Stream,System.Boolean)">
      <summary>
            Exports the private key part of this key pair into a Stream.
            </summary>
      <param name="toStream">Stream where the private key will be exported</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> out is ASCII armored, if <see langword="false" /> binary file format is used.</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPublicKeyAsBytes">
      <summary>
            Exports the public key part of this key pair as array of bytes.
            </summary>
      <returns>The public key data as byte array</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPublicKeyAsStream">
      <summary>
            Exports the public key part of this key pair as input stream for reading.
            </summary>
      <returns>Returns a Stream for reading, containing the public key data</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPrivateKeyBytes">
      <summary>
            Exports the private key part of this key pair as array of bytes.
            </summary>
      <returns>the private key data as a byte array</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportPrivateKeyStream">
      <summary>
            Exports the private key part of this key pair as an input stream for reading.
            </summary>
      <returns>returns the private key data as Stream for reading</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportKeyPair(System.String,System.Boolean)">
      <summary>
            Exports this key pair into an output stream
            </summary>
      <param name="outputFileName">Output file where the key pair data will be stored (absolute or relative path)</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> out is ASCII armored, if <see langword="false" /> binary file format is used.</param>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.ExportKeyPair(System.IO.Stream,System.Boolean)">
      <summary>
            Exports this key pair into an output stream
            </summary>
      <param name="outStream">Output stream where the key pair data will be stored</param>
      <param name="asciiArmored">if <c><see langword="true" /></c> out is ASCII armored, if <see langword="false" /> binary file format is used.</param>
      <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.CheckPassword(System.String)">
      <summary>
            Checks if a password for a private key is correct
            </summary>
      <param name="password">password to be checked</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the password for the private key is correct, <see langword="false" /> otherwise</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If this instance has no private key in it.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.IsExpiredOnDate(System.DateTime)">
      <summary>
            Returns will this key be expired on a given date
            </summary>
      <param name="date">target Date to check for expiration</param>
      <returns>
        <see langword="true" /> if the key is expired on that date, <see langword="false" /> if not</returns>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.GetJpegImageData(System.Int32)">
      <summary>
            Retrieves the associated JPEG photo image bytes from an OpenPGP key
            </summary>
      <param name="imageId">image sequence Id, must be between 0 and <see cref="M:DidiSoft.Pgp.KeyPairInformation.GetJpegImagesCount" />-1</param>
      <returns>array of bytes, obtained from the JPEG image</returns>
      <example>
            This example shows how to load the first JPEG image contained in an OpenPGP key into a <see cref="T:System.Windows.Forms.PictureBox" /> control.
            <code lang="C#">
            ' private System.Windows.Forms.PictureBox keyPhoto1;
            if (keypair.GetJpegImagesCount() &gt; 0)
            {
               keyPhoto1.Image = Image.FromStream(new MemoryStream(keypair.GetJpegImageData(0)));
            }
            </code><code lang="VB.NET">
            ' Private WithEvents keyPhoto1 As System.Windows.Forms.PictureBox
            If (keypair.GetJpegImagesCount() &gt; 0) Then
                keyPhoto1.Image = Image.FromStream(New MemoryStream(keypair.GetJpegImageData(0)))
            End If
            </code></example>
      <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.GetJpegImagesCount">
      <summary>
            Retrieves the number of JPEG photo images associated with this key
            </summary>
      <returns>number of JPEG photo images contained in this key</returns>
      <example>
            This example shows how to load the first JPEG image contained in an OpenPGP key into a <see cref="T:System.Windows.Forms.PictureBox" /> control.
            <code lang="C#">
            ' private System.Windows.Forms.PictureBox keyPhoto1;
            if (keypair.GetJpegImagesCount() &gt; 0)
            {
               keyPhoto1.Image = Image.FromStream(new MemoryStream(keypair.GetJpegImageData(0)));
            }
            </code><code lang="VB.NET">
            ' Private WithEvents keyPhoto1 As System.Windows.Forms.PictureBox
            If (keypair.GetJpegImagesCount() &gt; 0) Then
                keyPhoto1.Image = Image.FromStream(New MemoryStream(keypair.GetJpegImageData(0)))
            End If
            </code></example>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PreferredCompressions">
      <summary>
            The preferred compression algorithms supported by this key.
            </summary>
      <value>preferred compression algorithms supported by this key.</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PreferredCyphers">
      <summary>
            The preferred cypher algorithms supported by this key.
            </summary>
      <value>preferred cipher symmetric key algorithms supported by this key.</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PreferredHashes">
      <summary>
            The preferred hash algorithms supported by this key.
            </summary>
      <value>preferred hash algorithms supported by this key.</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SignedWithKeyIds">
      <summary>
            Returns a list of the key Id's that have signed 
            the public key(s) included in this key pair
            </summary>
      <seealso cref="M:DidiSoft.Pgp.KeyPairInformation.KeyIdToHex(System.Int64)" />
      <value>Array of key Id's that have signed the key</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PublicRing">
      <summary>
            Public key ring part of this Key Pair
            </summary>
      <value>the raw public key part of this key</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.EncryptionKey">
      <summary>
            Returns <see langword="true" /> if this key can be used for encryption, otherwise <see langword="false" />.
            </summary>
      <value>
        <see langword="true" /> if this key can be used for encryption, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SigningKey">
      <summary>
            Returns <see langword="true" /> if this key can be used for signing, otherwise <see langword="false" />.
            </summary>
      <value>
        <see langword="true" /> if this key can be used for signing, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.Revoked">
      <summary>
            Returns is this Key revoked (not usable any more).
            </summary>
      <value>
        <see langword="true" /> if this key is revoked, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.HasPrivateKey">
      <summary>
            Returns is there a corresponding private key for this key pair entry in this KeyStore instance
            </summary>
      <remarks>
            For our recipients this will be <see langword="false" /> because we have only their public keys in most cases.
            </remarks>
      <value>
        <see langword="true" /> if this key pair contains a private key, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PrivateRing">
      <summary>
            Returns the Private key ring part of this Key Pair.
            </summary>
      <remarks>
            May be <c>null</c> if only a public key is available.  
            </remarks>
      <value>Private key ring part of this Key Pair</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PublicSubKeys">
      <summary>
            Returns an array from all public sub keys of this key.
            </summary>
      <value>Array of public sub keys contained in this key pair</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.PrivateSubKeys">
      <summary>
            Returns an array from all private (secret) sub keys of this key pair.
            </summary>
      <value>Array of private sub keys contained in this key pair</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.KeyId">
      <summary>
            Returns the Key ID of this key pair
            </summary>
      <value>primary Key ID of this key pair</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.KeyIdHex">
      <summary>
            Returns a string representing the hexadecimal value of the Key ID.
            </summary>
      <value>the primary hexadecimal Key ID of this key pair</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.Fingerprint">
      <summary>
            Returns key fingerprint.
            </summary>
      <value>the key fingerprint</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.UserIds">
      <summary>
            Returns User Id's associated with this key.
            </summary>
      <value>Array of associated User ID's</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.UserId">
      <summary>
            Returns the first User Id associated with this key.
            </summary>
      <value>The primary User ID of this key pair or an empty string if none</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.KeySize">
      <summary>
            Returns key size in bits.
            </summary>
      <value>The key size in bits</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.Algorithm">
      <summary>
            Returns the name of the key encryption asymmetric algorithm.
            </summary>
      <value>the name of the key encryption asymmetric algorithm</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.AlgorithmType">
      <summary>
            Returns the name of the key encryption asymmetric algorithm.
            </summary>
      <value>the name of the key encryption asymmetric algorithm</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.CreationTime">
      <summary>
            Returns when was the key created.
            </summary>
      <value>date when the key was created</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.ExpirationTime">
      <summary>
            Returns the key expiration date.
            </summary>
      <value>date when the key will expire</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.ValidDays">
      <summary>
            Returns key validity period in days.
            </summary>
      <value>The key validity in days, 0 if valid forever</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.IsLegacyRSAKey">
      <summary>
            Returns is this key a legacy RSA OpenPGP key
            </summary>
      <remarks>
            Legacy RSA keys were used by PGP 6.5 and older systems.
            </remarks>
      <value>
        <see langword="true" /> if this is a legacy PGP 2.x key, <see langword="false" /> otherwise</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.IsExpired">
      <summary>
            Returns is this key expired (not usable any more)
            </summary>
      <value>
        <see langword="true" /> if the key is expired, <see langword="false" /> if not</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.Trust">
      <summary>
            Returns the trust data assigned to this key
            </summary>
      <value>
            the trust amount assigned to this key
            </value>
      <see cref="T:DidiSoft.Pgp.TrustLevel" />
    </member>
    <member name="T:DidiSoft.Pgp.KeyPairInformation.SubKey">
      <summary>
            Represents a sub key in a key ring
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.KeyPairInformation.SubKey.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
             Sub key info constructor
            </summary>
      <param name="key">key containing the sub key information</param>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.EncryptionKey">
      <summary>
            Returns <see langword="true" /> if this key can be used for encryption, otherwise <see langword="false" />.
            </summary>
      <value>
        <see langword="true" /> if this key can be used for encryption, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.SigningKey">
      <summary>
            Returns <see langword="true" /> if this key can be used for signing, otherwise <see langword="false" />.
            </summary>
      <value>
        <see langword="true" /> if this key can be used for signing, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.Revoked">
      <summary>
            Returns is this Key revoked (not usable any more).
            </summary>
      <value>
        <see langword="true" /> if this key is revoked, otherwise <see langword="false" /></value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.KeyID">
      <summary>
            Returns the Key ID
            </summary>
      <value>the Key Id of this key</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.KeyIDHex">
      <summary>
            Returns a string representing the hexadecimal value of the Key ID.
            </summary>
      <remarks>
            only the lower 4 bytes of the real key id which is 8 bytes.
            </remarks>
      <value>hexadecimal Key ID of this key</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.Fingerprint">
      <summary>
            Returns key fingerprint.
            </summary>
      <value>key fingerprint</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.UserIds">
      <summary>
            Returns User Id's associated with this key.
            </summary>
      <value>Array of User Id's associated with this key</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.UserId">
      <summary>
            Returns the first User Id associated with this key.
            </summary>
      <value>primary User Id of this key</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.KeySize">
      <summary>
            Returns key size in bits.
            </summary>
      <value>key size in bits</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.Algorithm">
      <summary>
            Returns the name of the key encryption asymmetric algorithm.
            </summary>
      <value>key encryption asymmetric algorithm</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.CreationTime">
      <summary>
            Returns when was the key created.
            </summary>
      <value>key creation date</value>
    </member>
    <member name="P:DidiSoft.Pgp.KeyPairInformation.SubKey.ValidDays">
      <summary>
            Returns key validity period in days.
            </summary>
      <value>key validity in days, 0 if the key is valid forever</value>
    </member>
    <member name="T:DidiSoft.Pgp.PGPKeyPair">
      <summary>
            Represents an OpenPGP key loaded from a key file.
            </summary>
      <remarks>
            Provides methods for key generation and key export.
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.#ctor(System.String)">
      <summary>
            Initializes the object from a PGP key file.
            </summary>
      <remarks>
            The PGP key file can be a public key file, a private key file, or combined (mixed).
            </remarks>
      <param name="fileName">absolute or relative path to a PGP key file.</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the specified file does not contain a PGP key or key pair</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.#ctor(System.String,System.String)">
      <summary>
            Initializes the object from a public and private PGP key files.
            </summary>
      <param name="publicKeyFileName">absolute or relative path to the public PGP key file.</param>
      <param name="privateKeyFileName">absolute or relative path to the private PGP key file</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the specified file does not contain a PGP key or key pair</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the specified private key does not match the specified public key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateEccKeyPair(DidiSoft.Pgp.EcCurve,System.String,System.String)">
      <summary>
            Generates an Elliptic curve based OpenPGP key pair (public and private key) with no expiration date
            and predefined preferred algorithms.
            </summary>
      <remarks>
            The key generation takes less than 10 seconds.
            </remarks>
      <param name="curve">Elliptic curve for this key</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <returns>The generated key pair object</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateKeyPairWithoutKS
            {
            	public void Demo()
            	{
            	    // user Id for this key
            		String userId = "rsa_demo@didisoft.com";
            		// private key password for this key
            		String privateKeyPassword = "private key password";
            
                    // NIST curve for this key pair
            		EcCurve curve = EcCurve.P256;
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateEccKeyPair(curve,
            									        userId,
            									        privateKeyPassword);
            
            		// now we can call keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateKeyPairWithoutKS
             Public Sub Demo()
                ' user Id for this key
            	Dim userId As String = "rsa_demo@didisoft.com"
            	' private key password for this key
            	Dim privateKeyPassword As String = "private key password"
            
            
                ' NIST curve for this key pair
            	Dim curve As EcCurve = EcCurve.P256;
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateEccKeyPair(curve, _
            								        userId, _
            								        privateKeyPassword)
            
            	' now we can call keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateEccKeyPair(DidiSoft.Pgp.EcCurve,System.String,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[])">
      <summary>
            Generates an Elliptic curve based OpenPGP key pair (public and private key) with no expiration date
            </summary>
      <remarks>
            The key generation takes less than 10 seconds.
            </remarks>
      <param name="curve">Elliptic curve for this key</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key</param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key</param>
      <param name="cipherTypes">Symmetric algorithms supported by the key</param>
      <returns>The generated key pair object</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateKeyPairWithoutKS
            {
            	public void Demo()
            	{
            	    // user Id for this key
            		String userId = "rsa_demo@didisoft.com";
            		// private key password for this key
            		String privateKeyPassword = "private key password";
            
                    //
                    // Preferred algorithms for this key
                    // 
            		HashAlgorithm[] hashing = { HashAlgorithm.SHA1, 
            									HashAlgorithm.MD5, 
            									HashAlgorithm.SHA256,
            									HashAlgorithm.SHA384,
            									HashAlgorithm.SHA512};
            
            		CompressionAlgorithm[] compression = 
            								{ CompressionAlgorithm.ZIP,
            								  CompressionAlgorithm.ZLIB,
            								  CompressionAlgorithm.UNCOMPRESSED};
            
            		CypherAlgorithm[] cypher = { CypherAlgorithm.CAST5, 
            									 CypherAlgorithm.AES_128,
            									 CypherAlgorithm.AES_192,
            									 CypherAlgorithm.AES_256,
            									 CypherAlgorithm.BLOWFISH};
            
                    // NIST curve for this key pair
            		EcCurve curve = EcCurve.P256;
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateEccKeyPair(curve,
            									userId,
            									privateKeyPassword,
            									compression,
            									hashing,
            									cypher);
            
            		// now we can call keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateKeyPairWithoutKS
             Public Sub Demo()
                ' user Id for this key
            	Dim userId As String = "rsa_demo@didisoft.com"
            	' private key password for this key
            	Dim privateKeyPassword As String = "private key password"
            
                '
                ' Preferred algorithms for this key
                '
            	Dim hashing As HashAlgorithm() = {HashAlgorithm.SHA1, _
            									HashAlgorithm.MD5, _
            									HashAlgorithm.SHA256, _
            									HashAlgorithm.SHA384, _
            									HashAlgorithm.SHA512}
            
            	Dim compression As CompressionAlgorithm() = _
            		{CompressionAlgorithm.ZIP, _
            		CompressionAlgorithm.ZLIB, _
            		CompressionAlgorithm.UNCOMPRESSED}
            
            	Dim cypher As CypherAlgorithm() = {CypherAlgorithm.CAST5, _
            										CypherAlgorithm.AES_128, _
            										CypherAlgorithm.AES_192, _
            										CypherAlgorithm.AES_256, _
            										CypherAlgorithm.BLOWFISH}
            
                ' NIST curve for this key pair
            	Dim curve As EcCurve = EcCurve.P256;
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateEccKeyPair(curve, _
            								userId, _
            								privateKeyPassword, _
            								compression, _
            								hashing, _
            								cypher)
            
            	' now we can call keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateEccKeyPair(DidiSoft.Pgp.EcCurve,System.String,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[],System.DateTime)">
      <summary>
            Generates an Elliptic curve based OpenPGP key pair (public and private key) with no expiration date
            </summary>
      <remarks>
            The key generation takes less than 10 seconds.
            </remarks>
      <param name="curve">Elliptic curve for this key</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key</param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key</param>
      <param name="cipherTypes">Symmetric algorithms supported by the key</param>
      <param name="expirationDate">The expiration date of this key. After this date attempts to encrypt with it will throw an exception.</param>
      <returns>The generated key pair object</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateKeyPairWithoutKS
            {
            	public void Demo()
            	{
            	    // user Id for this key
            		String userId = "rsa_demo@didisoft.com";
            		// private key password for this key
            		String privateKeyPassword = "private key password";
            
                    //
                    // Preferred algorithms for this key
                    // 
            		HashAlgorithm[] hashing = { HashAlgorithm.SHA1, 
            									HashAlgorithm.MD5, 
            									HashAlgorithm.SHA256,
            									HashAlgorithm.SHA384,
            									HashAlgorithm.SHA512};
            
            		CompressionAlgorithm[] compression = 
            								{ CompressionAlgorithm.ZIP,
            								  CompressionAlgorithm.ZLIB,
            								  CompressionAlgorithm.UNCOMPRESSED};
            
            		CypherAlgorithm[] cypher = { CypherAlgorithm.CAST5, 
            									 CypherAlgorithm.AES_128,
            									 CypherAlgorithm.AES_192,
            									 CypherAlgorithm.AES_256,
            									 CypherAlgorithm.BLOWFISH};
            
                    // NIST curve for this key pair
            		EcCurve curve = EcCurve.P256;
            
                    DateTime expirationDate = DateTime.Now.AddYears(1);
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateEccKeyPair(curve,
            									userId,
            									privateKeyPassword,
            									compression,
            									hashing,
            									cypher,
            									expirationDate);
            
            		// now we can call keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateKeyPairWithoutKS
             Public Sub Demo()
                ' user Id for this key
            	Dim userId As String = "rsa_demo@didisoft.com"
            	' private key password for this key
            	Dim privateKeyPassword As String = "private key password"
            
                '
                ' Preferred algorithms for this key
                '
            	Dim hashing As HashAlgorithm() = {HashAlgorithm.SHA1, _
            									HashAlgorithm.MD5, _
            									HashAlgorithm.SHA256, _
            									HashAlgorithm.SHA384, _
            									HashAlgorithm.SHA512}
            
            	Dim compression As CompressionAlgorithm() = _
            		{CompressionAlgorithm.ZIP, _
            		CompressionAlgorithm.ZLIB, _
            		CompressionAlgorithm.UNCOMPRESSED}
            
            	Dim cypher As CypherAlgorithm() = {CypherAlgorithm.CAST5, _
            										CypherAlgorithm.AES_128, _
            										CypherAlgorithm.AES_192, _
            										CypherAlgorithm.AES_256, _
            										CypherAlgorithm.BLOWFISH}
            
                ' NIST curve for this key pair
            	Dim curve As EcCurve = EcCurve.P256;
            
                Dim expirationDate As DateTime = DateTime.Now.AddYears(1)
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateEccKeyPair(curve, _
            								userId, _
            								privateKeyPassword, _
            								compression, _
            								hashing, _
            								cypher, _
            								expirationDate)
            
            	' now we can call keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateElgamalKeyPair(System.Int32,System.String,System.String)">
      <summary>
            Generates an Elgamal (DH/DSS) OpenPGP key pair (public and private key) with no expiration date and default preferred algorithms
            </summary>
      <remarks>
            For key size larger than 2048 bits key generation will take a few moments.
            </remarks>
      <param name="keySize">Size of the keys in bits. Usually between 1024 (low security) and 4096 (very secure)</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <returns>The generated key pair object</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateElgamalKeyPairWithoutKS
            {
            	public void Demo()
            	{
            	    // user Id for this key
            		String userId = "dh_demo@didisoft.com";
            		// private key password for this key
            		String privateKeyPassword = "private key password";
            
            		int keySize = 2048;
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateElgamalKeyPair(keySize,
            									userId,
            									privateKeyPassword);
            
            		// we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateRSAKeyPairWithoutKS
             Public Sub Demo()
                ' user Id for this key
            	Dim userId As String = "dh_demo@didisoft.com"
            	' private key password for this key
            	Dim privateKeyPassword As String = "private key password"
            
            	Dim keySize As Integer = 2048
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateElgamalKeyPair(keySize, _
            								userId, _
            								privateKeyPassword);
            
            	' we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateRsaKeyPair(System.Int32,System.String,System.String)">
      <summary>
            Generates an RSA OpenPGP key pair (public and private key) with no expiration date and default preferred algorithms
            </summary>
      <remarks>
            For key size larger than 2048 bits key generation will take a few moments.
            </remarks>
      <param name="keySize">Size of the keys in bits. Usually between 1024 (low security) and 4096 (very secure)</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="password">Secret key password</param>
      <returns>The generated key pair object</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateRSAKeyPairWithoutKS
            {
            	public void Demo()
            	{
            	    // user Id for this key
            		String userId = "rsa_demo@didisoft.com";
            		// private key password for this key
            		String privateKeyPassword = "private key password";
            
            		int keySize = 2048;
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateRsaKeyPair(keySize,
            									userId,
            									privateKeyPassword);
            
            		// we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateRSAKeyPairWithoutKS
             Public Sub Demo()
                ' user Id for this key
            	Dim userId As String = "rsa_demo@didisoft.com"
            	' private key password for this key
            	Dim privateKeyPassword As String = "private key password"
            
            	Dim keySize As Integer = 2048
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateRsaKeyPair(keySize, _
            								userId, _
            								privateKeyPassword);
            
            	' we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateKeyPair(System.Int32,System.String,DidiSoft.Pgp.KeyAlgorithm,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[])">
      <summary>
            Generates an OpenPGP key pair (public and private key) with no expiration date
            </summary>
      <remarks>
            For key size larger than 2048 bits key generation will take a few moments.
            </remarks>
      <param name="keySize">Size of the keys in bits. Usually between 1024 (low security) and 4096 (very secure)</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">The asymmetric algorithm for the key pair</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key</param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key</param>
      <param name="cipherTypes">Symmetric algorithms supported by the key</param>
      <returns>The generated key pair object</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateKeyPairWithoutKS
            {
            	public void Demo()
            	{
            	    // user Id for this key
            		String userId = "rsa_demo@didisoft.com";
            		// private key password for this key
            		String privateKeyPassword = "private key password";
            
                    //
                    // Preferred algorithms for this key
                    // 
            		HashAlgorithm[] hashing = { HashAlgorithm.SHA1, 
            									HashAlgorithm.MD5, 
            									HashAlgorithm.SHA256,
            									HashAlgorithm.SHA384,
            									HashAlgorithm.SHA512};
            
            		CompressionAlgorithm[] compression = 
            								{ CompressionAlgorithm.ZIP,
            								  CompressionAlgorithm.ZLIB,
            								  CompressionAlgorithm.UNCOMPRESSED};
            
            		CypherAlgorithm[] cypher = { CypherAlgorithm.CAST5, 
            									 CypherAlgorithm.AES_128,
            									 CypherAlgorithm.AES_192,
            									 CypherAlgorithm.AES_256,
            									 CypherAlgorithm.BLOWFISH};
            
            		KeyAlgorithm keyAlgorithm = KeyAlgorithm.RSA;
            		int keySize = 2048;
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateKeyPair(keySize,
            									userId,
            									keyAlgorithm,
            									privateKeyPassword,
            									compression,
            									hashing,
            									cypher);
            
            		// we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateKeyPairWithoutKS
             Public Sub Demo()
                ' user Id for this key
            	Dim userId As String = "rsa_demo@didisoft.com"
            	' private key password for this key
            	Dim privateKeyPassword As String = "private key password"
            
            	Dim hashing As HashAlgorithm() = {HashAlgorithm.SHA1, _
            									HashAlgorithm.MD5, _
            									HashAlgorithm.SHA256, _
            									HashAlgorithm.SHA384, _
            									HashAlgorithm.SHA512}
            
                '
                ' Preferred algorithms for this key
                '
            	Dim compression As CompressionAlgorithm() = _
            		{CompressionAlgorithm.ZIP, _
            		CompressionAlgorithm.ZLIB, _
            		CompressionAlgorithm.UNCOMPRESSED}
            
            	Dim cypher As CypherAlgorithm() = {CypherAlgorithm.CAST5, _
            										CypherAlgorithm.AES_128, _
            										CypherAlgorithm.AES_192, _
            										CypherAlgorithm.AES_256, _
            										CypherAlgorithm.BLOWFISH}
            
            	Dim keyAlgorithm As KeyAlgorithm = KeyAlgorithm.RSA
            	Dim keySize As Integer = 2048
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateKeyPair(keySize, _
            								userId, _
            								keyAlgorithm, _
            								privateKeyPassword, _
            								compression, _
            								hashing, _
            								cypher)
            
            	' we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.GenerateKeyPair(System.Int32,System.String,DidiSoft.Pgp.KeyAlgorithm,System.String,DidiSoft.Pgp.CompressionAlgorithm[],DidiSoft.Pgp.HashAlgorithm[],DidiSoft.Pgp.CypherAlgorithm[],System.DateTime)">
      <summary>
            Generates an OpenPGP key pair (public and private key).
            </summary>
      <remarks>
            For key size larger than 2048 bits key generation will take a few moments.
            </remarks>
      <param name="keySize">Size of the keys in bits. Usually between 1024 (low security) and 4096 (very secure)</param>
      <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
      <param name="keyAlgorithm">The asymmetric algorithm for the key pair</param>
      <param name="password">Secret key password</param>
      <param name="compressionTypes">Compression algorithms supported by the key</param>
      <param name="hashingAlgorithmTypes">Hashing algorithms supported by the key</param>
      <param name="cipherTypes">Symmetric algorithms supported by the key</param>
      <param name="expirationDate">Expiration day for this key pair</param>
      <returns>The generated key pair object</returns>
      <example>
            This example illustrates how to create an OpenPGP key pair that can be exported afterwards
            without using a KeyStore object.
            <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class GenerateKeyPairWithoutKS
            {
            	public void Demo()
            	{
            		String userId = "rsa_demo@didisoft.com";
            		String privateKeyPassword = "private key password";
            
            		HashAlgorithm[] hashing = { HashAlgorithm.SHA1, 
            									HashAlgorithm.MD5, 
            									HashAlgorithm.SHA256,
            									HashAlgorithm.SHA384,
            									HashAlgorithm.SHA512};
            
            		CompressionAlgorithm[] compression = 
            								{ CompressionAlgorithm.ZIP,
            								  CompressionAlgorithm.ZLIB,
            								  CompressionAlgorithm.UNCOMPRESSED};
            
            		CypherAlgorithm[] cypher = { CypherAlgorithm.CAST5, 
            									 CypherAlgorithm.AES_128,
            									 CypherAlgorithm.AES_192,
            									 CypherAlgorithm.AES_256,
            									 CypherAlgorithm.BLOWFISH};
            
            		KeyAlgorithm keyAlgorithm = KeyAlgorithm.RSA;
            		int keySize = 2048;
            		DateTime expirationDate = DateTime.Now.AddYears(1);
            
            		PGPKeyPair keyPair =
            			PGPKeyPair.GenerateKeyPair(keySize,
            									userId,
            									keyAlgorithm,
            									privateKeyPassword,
            									compression,
            									hashing,
            									cypher, _
            									expirationDate);
            
            		// we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class GenerateKeyPairWithoutKS
             Public Sub Demo()
            	Dim userId As String = "rsa_demo@didisoft.com"
            	Dim privateKeyPassword As String = "private key password"
            
            	Dim hashing As HashAlgorithm() = {HashAlgorithm.SHA1, _
            									HashAlgorithm.MD5, _
            									HashAlgorithm.SHA256, _
            									HashAlgorithm.SHA384, _
            									HashAlgorithm.SHA512}
            
            	Dim compression As CompressionAlgorithm() = _
            		{CompressionAlgorithm.ZIP, _
            		CompressionAlgorithm.ZLIB, _
            		CompressionAlgorithm.UNCOMPRESSED}
            
            	Dim cypher As CypherAlgorithm() = {CypherAlgorithm.CAST5, _
            										CypherAlgorithm.AES_128, _
            										CypherAlgorithm.AES_192, _
            										CypherAlgorithm.AES_256, _
            										CypherAlgorithm.BLOWFISH}
            
            	Dim keyAlgorithm As KeyAlgorithm = KeyAlgorithm.RSA
            	Dim keySize As Integer = 2048
            	Dim expirationDate As DateTime = DateTime.Now.AddYears(1)
            
            	Dim keyPair As PGPKeyPair = _
            		PGPKeyPair.GenerateKeyPair(keySize, _
            								userId, _
            								keyAlgorithm, _
            								privateKeyPassword, _
            								compression, _
            								hashing, _
            								cypher, _
            								expirationDate)
            
            	' we can call now keyPair.ExportPublicKey or keyPair.ExportPrivateKey
             End Sub
            End Class
            </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.ChangePrivateKeyPassword(System.String,System.String)">
      <summary>
            Changes the password of this private key
            </summary>
      <param name="oldPassword">current password of the private key</param>
      <param name="newPassword">new password of the private key</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the old password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if no private key has been loaded in this key pair object</exception>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class ChangeKeyPassword
            {
            	public void Demo()
            	{
            		PGPKeyPair privateKey = new PGPKeyPair("my_private_key.asc");
            		
                    try {
            			privateKey.ChangePrivateKeyPassword("old password", "new password");
            		}
            		catch (DidiSoft.Pgp.Exceptions.WrongPasswordException ex) {
            			Console.WriteLine("The old password is not correct.");
            		}
            		
            		bool asciiArmored = true;
            		privateKey.ExportPrivateKey("my_private_key.asc", asciiArmored);
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class ChangeKeyPassword
             Public Sub Demo()
                  Dim privateKey As PGPKeyPair = New PGPKeyPair("my_private_key.asc")
                  
                  Try
                      privateKey.ChangePrivateKeyPassword("old password", "new password")
                  Catch ex As DidiSoft.Pgp.Exceptions.WrongPasswordException
                      Console.WriteLine("The old password is not correct.")
                  End Try
                  
                  Dim asciiArmored As Boolean = True
                  privateKey.ExportPrivateKey("my_private_key.asc", asciiArmored)
             End Sub
            End Class
            </code>
      </example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPKeyPair.parseKeyStream(System.IO.Stream)">
            Parses input stream for public or private openpgp key 
            <param name="inStream">inStream</param><exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception></member>
    <member name="T:DidiSoft.Pgp.PGPLib">
      <summary>
            Provides OpenPGP cryptography methods. 
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="F:DidiSoft.Pgp.PGPLib.CONSOLE">
      <summary>
            This is a special file name constant that can be used in the methods that expect a file name label parameter.
            <para>
            This indicates that the encrypted data is 'for your eyes only', and not to be decrypted in a file on the disk
            </para></summary>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.#ctor">
      <summary>
            Creates new instance of the library
            </summary>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)">
      <summary>
            OpenPGP clear text signs a file.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="inputFile">File to be clear signed </param>
      <param name="privateKeyFile">Private Key file</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputFile">Output file</param>
      <example>
            This example demonstrates how to OpenPGP clear sign a data stream.
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignFileExample 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignFile(new FileInfo(@"DataFiles\INPUT.txt"), 
            					  new FileInfo(@"DataFiles\private_key.asc"), 
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						new FileInfo(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignFileExample
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignFile(New FileInfo("DataFiles\INPUT.txt"), _
            					New FileInfo("DataFiles\private_key.asc"), _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					New FileInfo("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">in case of I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm,System.String)">
      <summary>
            OpenPGP clear text signs a file.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="inputFile">Source file to be clear text signed </param>
      <param name="privateKeyFile">Private key file location</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputFile">Output file location</param>
      <example>
            This example demonstrates how to OpenPGP clear sign a data stream.
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class ClearSignFileExample 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignFile(@"DataFiles\INPUT.txt", 
            					  @"DataFiles\private_key.asc", 
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						@"DataFiles\OUTPUT.sig.txt");
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class ClearSignFileExample
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignFile("DataFiles\INPUT.txt", _
            					"DataFiles\private_key.asc", _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					"DataFiles\OUTPUT.sig.txt")
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            OpenPGP clear signs a file.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.String,System.String,System.String,System.String,System.String)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="inputFileName">File name to be clear signed (absolute or relative path) </param>
      <param name="privateKeyFile">Private key location (absolute or relative path) or the private key as String</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm, one of: SHA256, SHA384, SHA512, SHA224, SHA1, MD5, RIPEMD160, MD2</param>
      <param name="outputFileName">Output file name (absolute or relative path)</param>
      <example>
            This example demonstrates how to OpenPGP clear text sign a data stream.
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class ClearSignFileExample 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignFile(@"DataFiles\INPUT.txt", 
            						@"DataFiles\private_key.asc", 
            						"private key password", 
            						"SHA256", 
            						@"DataFiles\OUTPUT.sig.txt");
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class ClearSignFileExample
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignFile("DataFiles\INPUT.txt", _
            					"DataFiles\private_key.asc", _
            					"private key password", _
            					"SHA256", _
            					"DataFiles\OUTPUT.sig.txt")
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,DidiSoft.Pgp.HashAlgorithm,System.String)">
      <summary>
             OpenPGP clear signs a file with a private key located in a KeyStore.  
             </summary>
      <remarks>
             Clear text signed messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             <para>
             GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
             </para></remarks>
      <param name="inputFileName">Input file to be clear signed (absolute or relative path)</param>
      <param name="keyStore">KeyStore containing the signing private key</param>
      <param name="privateKeyUserId">the whole or part of signing private key User ID or the hexadecimal Key ID</param>
      <param name="privateKeyPassword">signing private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used, for example HashAlgorithm.SHA1</param>
      <param name="outputFileName">Output file where the clear signed message will be stored (absolute or relative path)</param>
      <example>
             This example demonstrates how to OpenPGP clear sign a data stream.
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             class ClearSignFileExample
             {
              public static void Main()
              {
             	// initialize the key store
             	KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
             
             	string signingKeyUserId = "support@didisoft.com";
             	string signingKeyPassword = "private key password";
             
             	// create an instance of the library
             	PGPLib pgp = new PGPLib();
             
             	// clear text sign
             	pgp.ClearSignFile(@"DataFiles\INPUT.txt", ks,
             					  signingKeyUserId,
             					  signingKeyPassword,
             					  HashAlgorithm.SHA1,
             					  @"DataFiles\INPUT.sig.txt");
              }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Class ClearSignFileExample
              Public Shared Sub Demo()
             	' initialize the key store
             	Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
             	Dim signingKeyUserId As String = "support@didisoft.com"
             	Dim signingKeyPassword As String = "private key password"
             
             	' create an instance of the library
             	Dim pgp As New PGPLib()
             
             	' clear text sign
             	pgp.ClearSignFile("DataFiles\INPUT.txt", _
             					ks, _
             					signingKeyUserId, _
             					signingKeyPassword, _
             					HashAlgorithm.SHA1, _
             					"DataFiles\OUTPUT.sig.txt")
              End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,DidiSoft.Pgp.HashAlgorithm,System.String)">
      <summary>
             OpenPGP clear signs a file with a private key located in a KeyStore.  
             </summary>
      <remarks>
            
             Clear text signed messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             <para>
             GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
             </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="inputFileName">Input file to be clear signed (absolute or relative path)</param>
      <param name="keyStore">KeyStore containing the signing private key</param>
      <param name="privateKeyId">signing private key Id</param>
      <param name="privateKeyPassword">signing private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used, for example HashAlgorithm.SHA1</param>
      <param name="outputFileName">Output file where the clear signed message will be stored (absolute or relative path)</param>
      <example>
             This example demonstrates how to OpenPGP clear sign a data stream with the old version 3 signatures.
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             class ClearSignFileExample
             {
              public static void Main()
              {
             	// initialize the key store
             	KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
             
             	long signingKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
             	string signingKeyPassword = "private key password";
             
             	// create an instance of the library
             	PGPLib pgp = new PGPLib();
             
             	// clear text sign
             	pgp.ClearSignFile(@"DataFiles\INPUT.txt", ks,
             					  signingKeyId,
             					  signingKeyPassword,
             					  HashAlgorithm.SHA1,
             					  @"DataFiles\INPUT.sig.txt");
              }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Class ClearSignFileExample
              Public Shared Sub Demo()
             	' initialize the key store
             	Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
             	Dim signingKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
             	Dim signingKeyPassword As String = "private key password"
             
             	' create an instance of the library
             	Dim pgp As New PGPLib()
             
             	' clear text sign
             	pgp.ClearSignFile("DataFiles\INPUT.txt", _
             					ks, _
             					signingKeyId, _
             					signingKeyPassword, _
             					HashAlgorithm.SHA1, _
             					"DataFiles\OUTPUT.sig.txt")
              End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)">
      <summary>
            OpenPGP clear signs a file, using OpenPGP version 3 signature format (old format)
            </summary>
      <remarks>
            Clearsigned messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            Use when needed compatibility with PGP 2.6 and older systems.
            </para><para>
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <param name="inputFile">File to be clear signed </param>
      <param name="privateKeyFile">Private key file </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithms to be used</param>
      <param name="outputFile">Output file</param>
      <example>
            This example demonstrates how to OpenPGP clear text sign a data stream with the old version 3 signatures.
            <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class ClearSignFileV3Example 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignFileV3(new FileInfo(@"DataFiles\INPUT.txt"), 
            					  new FileInfo(@"DataFiles\private_key.asc"), 
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						new FileInfo(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignFileV3Example
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignFileV3(New FileInfo("DataFiles\INPUT.txt"), _
            					New FileInfo("DataFiles\private_key.asc"), _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					New FileInfo("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm,System.String)">
      <summary>
            OpenPGP clear signs a file, using OpenPGP version 3 signature format (old format)
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            Use when needed compatibility with PGP 2.6 and older systems.
            </para><para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <param name="inputFile">Source file to be clear signed </param>
      <param name="privateKeyFile">Private key file location</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithms to be used</param>
      <param name="outputFile">Output file location</param>
      <example>
            This example demonstrates how to OpenPGP clear sign a text file.
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class ClearSignFileV3Example 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignFileV3(@"DataFiles\INPUT.txt", 
            					    @"DataFiles\private_key.asc", 
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						@"DataFiles\OUTPUT.sig.txt");
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class ClearSignFileV3Example
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignFileV3("DataFiles\INPUT.txt", _
            					"DataFiles\private_key.asc", _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					"DataFiles\OUTPUT.sig.txt")
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            OpenPGP clear signs a file, using OpenPGP version 3 signature format (old format)
            <br /><br />
            Use when needed compatibility with PGP 2.x and PGP 5.x systems.
            <br /><br />
            GPG equivalent command: gpg --force-v3-sigs --output outputFileName --clearsign inputFileName 
            </summary>
      <remarks>
            Clearsigned messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.String,System.String,System.String,System.String,System.String)" />
      <param name="inputFileName">File name to be clear signed (absolute or relative path) </param>
      <param name="privateKeyFile">Private key location (absolute or relative path) or as ASCII armour string</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithms, one of: SHA256, SHA384, SHA512, SHA224, SHA1, MD5, RIPEMD160, MD2</param>
      <param name="outputFileName">Output file name (absolute or relative path)</param>
      <example>
            This example demonstrates how to OpenPGP clear text sign a text file.
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class ClearSignFileV3Example 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignFileV3(@"DataFiles\INPUT.txt", 
            						@"DataFiles\private_key.asc", 
            						"private key password", 
            						"SHA256", 
            						@"DataFiles\OUTPUT.sig.txt");
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class ClearSignFileV3Example
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignFileV3("DataFiles\INPUT.txt", _
            					"DataFiles\private_key.asc", _
            					"private key password", _
            					"SHA256", _
            					"DataFiles\OUTPUT.sig.txt")
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStream(System.IO.Stream,System.IO.Stream,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.Stream)">
      <summary>
            OpenPGP clear text signs a data stream.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="dataStream">Data to be clear signed </param>
      <param name="privateKeyStream">Private key as stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputStream">Output stream for the clear text signed data</param>
      <example>
            This example demonstrates how to OpenPGP clear sign a text file.
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignStreamExample 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignStream(File.OpenRead(@"DataFiles\INPUT.txt"), 
            					    File.OpenRead(@"DataFiles\private_key.asc"), 
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						File.Create(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignStreamExample
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignStream(File.OpenRead("DataFiles\INPUT.txt"), _
            					File.OpenRead("DataFiles\private_key.asc"), _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					File.Create("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the provided private key stream is no a valid OpenPGP private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.Stream)">
      <summary>
            OpenPGP clear text signs a data stream with private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <br /><br />
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="dataStream">Data to be clear signed </param>
      <param name="keyStore">KeyStore containing the private key to be used for signing</param>
      <param name="privateKeyUserId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputStream">Output stream for the clear text signed data</param>
      <example>
            This example shows how to clear sign a text file with the signing private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /> file.
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignStreamExample 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
                KeyStore ks = KeyStore.OpenFile("my.keystore", "keystore password");
                
                string privateKeyUserId = "support@didisoft.com";
            
            	// clear text sign
            	pgp.ClearSignStream(File.OpenRead(@"DataFiles\INPUT.txt"), 
            					    ks,
            					    privateKeyUserId,
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						File.Create(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignStreamExample
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
                Dim ks As New KeyStore("my.keystore", "keystore password")
            
                Dim privateKeyUserId As String = "support@didisoft.com"
            
            	pgp.ClearSignStream(File.OpenRead("DataFiles\INPUT.txt"), _
            					ks, _
            					privateKeyUserId, _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					File.Create("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.Int64,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.Stream)">
      <summary>
            OpenPGP clear text signs a data stream with private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <br /><br />
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="dataStream">Data to be clear signed </param>
      <param name="keyStore">KeyStore containing the private key to be used for signing</param>
      <param name="privateKeyId">Key Id of the private key to be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputStream">Output stream for the clear text signed data</param>
      <example>
            This example shows how to clear sign a text file with the signing private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /> file.
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignStreamExample 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
                KeyStore ks = KeyStore.OpenFile("my.keystore", "keystore password");
                
                long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
            
            	// clear text sign
            	pgp.ClearSignStream(File.OpenRead(@"DataFiles\INPUT.txt"), 
            					    ks,
            					    privateKeyId,
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						File.Create(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignStreamExample
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
                Dim ks As New KeyStore("my.keystore", "keystore password")
            
                Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
            
            	pgp.ClearSignStream(File.OpenRead("DataFiles\INPUT.txt"), _
            					ks, _
            					privateKeyId, _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					File.Create("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStreamV3(System.IO.Stream,System.IO.Stream,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.Stream)">
      <summary>
            OpenPGP clear text signs a data stream with the old version 3 signatures.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <br /><br />
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="dataStream">Data to be clear signed </param>
      <param name="privateKeyStream">Private key as stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputStream">Output stream for the clear text signed data</param>
      <example>
            This example demonstrates how to OpenPGP clear sign a data stream.
            <code lang="cs">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignStreamV3Example 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            
            	// clear text sign
            	pgp.ClearSignStreamV3(File.OpenRead(@"DataFiles\INPUT.txt"), 
            					    File.OpenRead(@"DataFiles\private_key.asc"), 
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						File.Create(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="vbnet">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignStreamV3Example
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
            	pgp.ClearSignStreamV3(File.OpenRead("DataFiles\INPUT.txt"), _
            					File.OpenRead("DataFiles\private_key.asc"), _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					File.Create("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the provided private key stream is not an OpenPGP private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStreamV3(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.Stream)">
      <summary>
            OpenPGP clear text signs a data stream with private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /> using version 3 signatures.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <br /><br />
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="dataStream">Data to be clear signed </param>
      <param name="keyStore">KeyStore containing the private key to be used for signing</param>
      <param name="privateKeyUserId">User Id or  the hexadecimal Key ID of the private key to be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputStream">Output stream for the clear text signed data</param>
      <example>
            This example demonstrates how to OpenPGP clear sign a data stream with the old version 3 signatures.
            <code lang="cs">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignStreamV3Example 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
                KeyStore ks = KeyStore.OpenFile("my.keystore", "keystore password");
                
                string privateKeyUserId = "support@didisoft.com";
            
            	// clear text sign
            	pgp.ClearSignStreamV3(File.OpenRead(@"DataFiles\INPUT.txt"), 
            					    ks,
            					    privateKeyUserId,
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						File.Create(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="vbnet">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignStreamV3Example
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
                Dim ks As New KeyStore("my.keystore", "keystore password")
            
                Dim privateKeyUserId As String = "support@didisoft.com"
            
            	pgp.ClearSignStreamV3(File.OpenRead("DataFiles\INPUT.txt"), _
            					ks, _
            					privateKeyUserId, _
            					"private key password", _
            					HashAlgorithm.SHA256, _
            					File.Create("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStreamV3(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.Int64,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.Stream)">
      <summary>
            OpenPGP clear signs a String message.
            </summary>
      <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <br /><br />
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm,System.IO.FileInfo)" />
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <param name="dataStream">Data to be clear signed </param>
      <param name="keyStore">KeyStore containing the private key to be used for signing</param>
      <param name="privateKeyId">Key Id of the private key to be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <param name="outputStream">Output stream for the clear text signed data</param>
      <example>
            This sample shows how to produce a clear signed message.
            <code lang="C#">
            using DidiSoft.Pgp;
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class ClearSignStreamV3Example 
            {
             public static void Demo()
             {
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
                KeyStore ks = KeyStore.OpenFile("my.keystore", "keystore password");
                
                long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
            
            	// clear text sign
            	pgp.ClearSignStreamV3(File.OpenRead(@"DataFiles\INPUT.txt"), 
            					    ks,
            					    privateKeyId,
            						"private key password", 
            						HashAlgorithm.SHA256, 
            						File.Create(@"DataFiles\OUTPUT.sig.txt"));
             }
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class ClearSignStreamV3Example
             Public Shared Sub Demo()
            	Dim pgp As New PGPLib()
            	
                Dim ks As New KeyStore("my.keystore", "keystore password")
            
                Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
            
            	pgp.ClearSignStreamV3(File.OpenRead("DataFiles\INPUT.txt"), _
            					    ks, _
            					    privateKeyId, _
            					    "private key password", _
            					    HashAlgorithm.SHA256, _
            					    File.Create("DataFiles\OUTPUT.sig.txt"))
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.IO.Stream,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
            OpenPGP clear signs a String message.
            </summary>
      <remarks>
            Clearsigned messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <br /><br />
            GPG equivalent command: gpg --clearsign
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,DidiSoft.Pgp.KeyStore,System.String@)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="privateKeyStream">signing private key supplied as Stream</param>
      <param name="privateKeyPassword">signing private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message</returns>
      <example>
            This sample shows how to produce a clear signed message.
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreClearSignString
            {
             public static void Demo()
             {
            	// initialize the key store
            	KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            	string signingKeyUserId = "support@didisoft.com";
            	string signingKeyPassword = "private key password";
            
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
            	string plainText = "Hello World";
            
            	// clear text sign
            	string clearSignedString = pgp.ClearSignString( plainText, ks,
            										 signingKeyUserId,
            										 signingKeyPassword,
            										 HashAlgorithm.SHA1);
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreClearSignString
             Public Shared Sub Demo() 
            	Dim signingKeyUserId As String = "support@didisoft.com"
            	Dim signingKeyPassword As String = "private key password"
            
            	' initialize the key store
            	Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
                ' create an instance of the library
            	Dim pgp As New PGPLib()
            
            	Dim plainText As String = "Hello World"
            
            	Dim clearSignedString As String = pgp.ClearSignString(plainText, ks, _
            														signingKeyUserId, _
            														signingKeyPassword, _
            														HashAlgorithm.SHA1)
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
            OpenPGP clear signs a String message with a private key located in a KeyStore object.
            </summary>
      <remarks>
            Clearsigned messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --clearsign
            </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,DidiSoft.Pgp.KeyStore,System.String@)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="keyStore">KeyStore containing the signing private key</param>
      <param name="privateKeyUserId">signing private key User Id  or the hexadecimal Key ID</param>
      <param name="privateKeyPassword">signing private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message</returns>
      <example>
             This sample shows how to produce a clear signed message when our siging key is in a <see cref="T:DidiSoft.Pgp.KeyStore" /><code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreClearSignString
            {
             public static void Demo()
             {
            	// initialize the key store
            	KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            	string signingKeyUserId = "support@didisoft.com";
            	string signingKeyPassword = "private key password";
            
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
            	string plainText = "Hello World";
            
            	// clear text sign
            	string clearSignedString = pgp.ClearSignString( plainText, ks,
            										 signingKeyUserId,
            										 signingKeyPassword,
            										 HashAlgorithm.SHA1);
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreClearSignString
             Public Shared Sub Demo() 
            	Dim signingKeyUserId As String = "support@didisoft.com"
            	Dim signingKeyPassword As String = "private key password"
            
            	' initialize the key store
            	Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
                ' create an instance of the library
            	Dim pgp As New PGPLib()
            
            	Dim plainText As String = "Hello World"
            
            	Dim clearSignedString As String = pgp.ClearSignString(plainText, ks, _
            														signingKeyUserId, _
            														signingKeyPassword, _
            														HashAlgorithm.SHA1)
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
            OpenPGP clear signs a String message with a private key located in an KeyStore object.
            <para>
            GPG equivalent command: gpg --clearsign
            </para></summary>
      <remarks>
            Clearsigned messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,DidiSoft.Pgp.KeyStore,System.String@)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="keyStore">KeyStore containing the signing private key</param>
      <param name="privateKeyId">signing private key Id</param>
      <param name="privateKeyPassword">signing private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message</returns>
      <example>
             This sample shows how to produce a clear signed message when our siging key is in a <see cref="T:DidiSoft.Pgp.KeyStore" /><code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreClearSignString
            {
             public static void Demo()
             {
            	// initialize the key store
            	KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            	string signingKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
            	string signingKeyPassword = "private key password";
            
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
            	string plainText = "Hello World";
            
            	// clear text sign
            	string clearSignedString = pgp.ClearSignString( plainText, ks,
            										 signingKeyUserId,
            										 signingKeyPassword,
            										 HashAlgorithm.SHA1);
             }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreClearSignString
             Public Shared Sub Demo() 
            	' initialize the key store
            	Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
            	Dim signingKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
            	Dim signingKeyPassword As String = "private key password"
            
                ' create an instance of the library
            	Dim pgp As New PGPLib()
            
            	Dim plainText As String = "Hello World"
            
            	Dim clearSignedString As String = pgp.ClearSignString(plainText, ks, _
            														signingKeyId, _
            														signingKeyPassword, _
            														HashAlgorithm.SHA1)
             End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a String message.
             <br /><br />
             GPG equivalent command: gpg --clearsign
             </summary>
      <remarks>
             Clearsigned messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="privateKeyFile">Private Key file </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message</returns>
      <example>
             This sample shows how to produce a clear signed message.
             <code lang="cs">
             using DidiSoft.Pgp;
             using System;
             using System.IO;
             
             public class Demo
            	{
            		public void ClearSignStringTest()
                 {
                     FileInfo privateKey = new FileInfo(@"c:\private_key.asc");    
                     string password = "pass123";
            
                     string inputString = "the quick brown fox jumps"; 
            
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     
                     string clearSignedString = pgp.ClearSignString(inputString, privateKey, password, HashAlgorithm.SHA1);
                 }
             }    
             </code><code lang="vbnet">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringTest()
             		Dim PrivateKey As New FileInfo("c:\private_key.asc")
             		Dim Password As String = "pass123"
             
             		Dim inputString As String = "the quick brown fox jumps"
            
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim clearSignedString As String = pgp.ClearSignString(inputString, PrivateKey, Password, HashAlgorithm.SHA1)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.ArgumentNullException">if the <paramref name="privateKeyFile" /> parameter is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a String message.
             <br /><br />
             GPG equivalent command: gpg --clearsign
             </summary>
      <remarks>
             Clearsigned messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="privateKeyFile">Private key location (absolute or relative path) or the key in ASCII format as String</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message</returns>
      <example>
             This sample shows how to produce a clear signed message.
             <code lang="cs">
             using DidiSoft.Pgp;
             using System;
             using System.IO;
             
             public class Demo
            	{
            		public void ClearSignStringTest()
                 {
                     string privateKey = @"c:\private_key.asc";    
                     string password = "pass123";
             
                     string inputString = "the quick brown fox jumps"; 
             
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     string clearSignedString = pgp.ClearSignString(inputString, privateKey, password, HashAlgorithm.SHA1);
            
                     // the lines below demonstrate how can be verified the signature of the message
                     string publicKey = @"c:\public_key.asc";
             
                     string outputString;
                     bool verified = pgp.VerifyString(clearSignedString, publicKey, out outputString);
                 }
             }    
             </code><code lang="vbnet">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringTest()
             		Dim privateKey As String = "c:\private_key.asc"
             		Dim password As String = "pass123"
             
             		Dim inputString As String = "the quick brown fox jumps"
            
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		Dim pgpString As String = pgp.ClearSignString(inputString, privateKey, password, HashAlgorithm.SHA1)
             
                     ' the lines below demonstrate how can be verified the signature of the message
                     Dim publicKey As String = "c:\public_key.asc"
            
             		Dim outputString As String
             		Dim verified As Boolean = pgp.VerifyString(pgpString, publicKey, outputString)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a String message, using OpenPGP version 3 signature format (old format used by PGP 2.6)
             </summary>
      <remarks>
             Clearsigned messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             <para>
             Use when needed compatibility with PGP 2.6 and older systems.
             </para>
             GPG equivalent command: gpg --force-v3-sigs --clearsign
             </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.IO.FileInfo,System.String,DidiSoft.Pgp.HashAlgorithm)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="privateKeyFile">Private Key file</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <returns>OpenPGP clear text signed string</returns>
      <example>
             This sample shows how to produce a clear signed message in OpenPGP version 3 format (old format).
             <code lang="C#">
             using DidiSoft.Pgp;
             using System;
             using System.IO;
             
             public class Demo
             {
              public void ClearSignStringV3Example()
              {
                     FileInfo PrivateKey = new FileInfo(@"c:\private_key.asc");    
                     String Password = "pass123";
             
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     
                     String inputString = "stringToSign"; 
                     String pgpString = pgp.ClearSignStringV3(inputString, PrivateKey, Password, HashAlgorithm.SHA1);
            
                     // the lines below demonstrate how can be verified the signature of the message
                     string publicKey = @"c:\public_key.asc"
                     
                     String outputString;
                     bool verified = pgp.VerifyString(pgpString, publicKey, out outputString);
              }
             }    
             </code><code lang="VB">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringV3Example()
             		Dim PrivateKey As New FileInfo("c:\private_key.asc")
             		Dim Password As String = "pass123"
             
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "stringToSign"
             		Dim pgpString As String = pgp.ClearSignStringV3(inputString, PrivateKey, Password, HashAlgorithm.SHA1)
             
                     ' the lines below demonstrate how can be verified the signature of the message
                     Dim publicKey As String = "c:\public_key.asc"
                     
             		Dim outputString As String
             		Dim verified As Boolean = pgp.VerifyString(pgpString, publicKey, outputString)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.ArgumentNullException">if the privateKeyFile parameter is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a file, using OpenPGP version 3 signature format (old format)
             <para>
             Use when needed compatibility with PGP 2.x and PGP 5.x systems.
             </para></summary>
      <remarks>
             Clear signed messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             <para>
             GPG equivalent command: gpg --force-v3-sigs --output outputFileName --clearsign inputFileName 
             </para></remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignFile(System.String,System.String,System.String,System.String,System.String)" />
      <param name="stringToSign">String message to be clear signed (absolute or relative path) </param>
      <param name="privateKeyFile">Private key location (absolute or relative path) or the key as ASCII armoured String</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm to be used</param>
      <returns>OpenPGP clear text signed string</returns>
      <example>
             This sample shows how to produce a clear signed message in OpenPGP version 3 format (old format).
             <code lang="C#">
             using DidiSoft.Pgp;
             using System;
             using System.IO;
             
             public class Demo
             {
              public void ClearSignStringV3Example()
              {
                     String PrivateKey = @"c:\private_key.asc";    
                     String Password = "pass123";
             
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     
                     String inputString = "stringToSign"; 
                     String pgpString = pgp.ClearSignStringV3(inputString, PrivateKey, Password, HashAlgorithm.SHA1);
            
                     // the lines below demonstrate how can be verified the signature of the message
                     string publicKey = @"c:\public_key.asc"
                     
                     String outputString;
                     bool verified = pgp.VerifyString(pgpString, publicKey, out outputString);
              }
             }    
             </code><code lang="VB">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringV3Example()
             		Dim PrivateKey As String = "c:\private_key.asc"
             		Dim Password As String = "pass123"
             
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "stringToSign"
             		Dim pgpString As String = pgp.ClearSignStringV3(inputString, PrivateKey, Password, HashAlgorithm.SHA1)
             
                     ' the lines below demonstrate how can be verified the signature of the message
                     Dim publicKey As String = "c:\public_key.asc"
                     
             		Dim outputString As String
             		Dim verified As Boolean = pgp.VerifyString(pgpString, publicKey, outputString)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.ArgumentException">If the specified <c>hashingAlgorithm</c>parameter is not among the expected values</exception>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> having such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,System.IO.Stream,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a String message, using OpenPGP version 3 signature format (old format)
             </summary>
      <remarks>
             GPG equivalent command: gpg --clearsign --force-v3-sigs 
             </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="privateKeyStream">Private key as Stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message in the old version 3 format</returns>
      <example>
             This sample shows how to produce a clear signed message in OpenPGP version 3 format (old format).
             <code lang="C#">
             using DidiSoft.Pgp;
             using System;
             
             public class Demo
             {
              public void ClearSignStringV3Example()
              {
                     string PrivateKey = "c:\private_key.asc";    
                     string Password = "pass123";
             
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     
                     string inputString = "the quick brown fox jumps"; 
                     string pgpString = String.Empty
                     using (Stream privateKeyStream = PrivateKey.OpenRead())
                     {
                      pgpString = pgp.ClearSignStringV3(inputString, PrivateKey, Password, HashAlgorithm.SHA1);
                     }
            
                     // the lines below demonstrate how can be verified the signature of the message
                     string publicKey = @"c:\public_key.asc"
                     
                     String outputString;
                     bool verified = pgp.VerifyString(pgpString, publicKey, out outputString);
              }
             }    
             </code><code lang="VB">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringV3Example()
             		Dim PrivateKey As String = "c:\private_key.asc"
             		Dim Password As String = "pass123"
             
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "the quick brown fox jumps"
             		Dim pgpString As String = String.Empty
             		Using privateKeyStream As Stream = PrivateKey.OpenRead()
             		 pgpString = pgp.ClearSignStringV3(inputString, PrivateKey, Password, HashAlgorithm.SHA1)
             		End Using
             
             		Dim outputString As String
             		Dim verified As Boolean = pgp.VerifyString(pgpString, PublicKey, outputString)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a String message, using OpenPGP version 3 signature format (old format)
             </summary>
      <remarks>
             GPG equivalent command: gpg --clearsign --force-v3-sigs 
             </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the private key to be used for signing</param>
      <param name="privateKeyUserId">Key User Id  or the hexadecimal Key ID of the private key to be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message in version 3 format</returns>
      <example>
             This sample shows how to produce a clear signed message in OpenPGP version 3 format (old format).
             <code lang="C#">
             using DidiSoft.Pgp;
             using System;
             
             public class Demo
             {
              public void ClearSignStringV3Example()
              {
             	    // initialize the key store
             	    KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
             
             	    string signingKeyId = "support@didisoft.com";
             	    string signingKeyPassword = "private key password";
             
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     
                     string inputString = "the quick brown fox jumps"; 
                     string pgpString = pgp.ClearSignStringV3(inputString, ks, signingKeyId, signingKeyPassword, HashAlgorithm.SHA1);
            
                     // the lines below demonstrate how can be verified the signature of the message
                     string publicKey = @"c:\public_key.asc"
                     
                     String outputString = String.Empty;
                     bool verified = pgp.VerifyString(pgpString, ks, out outputString);
              }
             }    
             </code><code lang="VB">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringV3Example()
             	' initialize the key store
             	    Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
             	    Dim signingKeyId As String = "support@didisoft.com"
             	    Dim signingKeyPassword As String = "private key password"
             
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "the quick brown fox jumps"
             		Dim pgpString As String = pgp.ClearSignStringV3(inputString, ks, signingKeyId, signingKeyPassword, HashAlgorithm.SHA1)
             
             		Dim outputString As String = String.Empty
             		Dim verified As Boolean = pgp.VerifyString(pgpString, ks, outputString)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.ClearSignStringV3(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,DidiSoft.Pgp.HashAlgorithm)">
      <summary>
             OpenPGP clear signs a String message, using OpenPGP version 3 signature format (old format)
             </summary>
      <remarks>
             GPG equivalent command: gpg --clearsign --force-v3-sigs 
             </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.ClearSignString(System.String,System.String,System.String,DidiSoft.Pgp.HashAlgorithm)" />
      <param name="stringToSign">String to be clear signed</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the private key to be used for signing</param>
      <param name="privateKeyId">Key Id of the private key to be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="hashingAlgorithm">Hashing algorithm</param>
      <returns>clear signed string message in version 3 format</returns>
      <example>
             This sample shows how to produce a clear signed message in old OpenPGP version 3 format.
             <code lang="C#">
             using DidiSoft.Pgp;
             using System;
             
             public class Demo
             {
              public void ClearSignStringV3Example()
              {
             	    // initialize the key store
             	    KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
             
             	    long signingKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
             	    string signingKeyPassword = "private key password";
             
                     // create an instance of the library
                     PGPLib pgp = new PGPLib(); 
                     
                     string inputString = "the quick brown fox jumps"; 
                     string pgpString = pgp.ClearSignStringV3(inputString, ks, signingKeyId, signingKeyPassword, HashAlgorithm.SHA1);
            
                     // the lines below demonstrate how can be verified the signature of the message
                     string publicKey = @"c:\public_key.asc"
                     
                     String outputString = String.Empty;
                     bool verified = pgp.VerifyString(pgpString, ks, out outputString);
              }
             }    
             </code><code lang="VB">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub ClearSignStringV3Example()
             	' initialize the key store
             	    Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
             	    Dim signingKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
             	    Dim signingKeyPassword As String = "private key password"
             
                     ' create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "the quick brown fox jumps"
             		Dim pgpString As String = pgp.ClearSignStringV3(inputString, ks, signingKeyId, signingKeyPassword, HashAlgorithm.SHA1)
             
             		Dim outputString As String = String.Empty
             		Dim verified As Boolean = pgp.VerifyString(pgpString, ks, outputString)
                 End Sub
             End Class
             
             </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error occurs</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyStream(System.IO.Stream,System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream)">
      <summary>
            Decrypts and verifies an OpenPGP encrypted and signed stream  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)" />
      <param name="encryptedStream">OpenPGP signed and encrypted data to be decrypted</param>
      <param name="privateKeyStream">Private key to be used for decrypting </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="senderPublicKeyStream">Public key of the sender to be used to verify the digital signature</param>
      <param name="outputStream">Output stream where the decrypted content is stored. It's Position property is at the end of the stream after execution.</param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            public class DecryptAndVerifyStream
            {
             public void Demo()
             { 
            	// create an instance of the library
            	PGPLib pgp = new PGPLib();
            	
            	using (// OpenPGP signed and encrypted data
            			Stream dataStream = File.OpenRead(@"DataFiles\OUTPUTse.pgp"),
            			
            			// public key of the sender, to be used for signature verification
            			senderPublicKeyStream = File.OpenRead(@"DataFiles\sender_public_key.asc"),
            
            			// private key to be used for decryption
            			privateKeyStream = File.OpenRead(@"DataFiles\my_private_key.asc"))                    
            	{                
            		String privateKeyPassword = "private key password";
            
            		// The output can be an arbitrary subclass of System.IO.Stream
            		MemoryStream outputStream = new MemoryStream();
            		bool validSigning = pgp.DecryptAndVerifyStream(dataStream,
                                                                    privateKeyStream,
                                                                    privateKeyPassword,
                                                                    senderPublicKeyStream,
                                                                    outputStream);
            		if (validSigning)
            		{
            			Console.WriteLine("Signature is valid");
            		}
            		else
            		{
            			Console.WriteLine("Signature is invalid");
            		}
            
            		// we must reinitialize the output in order to be able to read from it
            		outputStream = new MemoryStream(outputStream.GetBuffer(), 0, 
            		                                (int)outputStream.Position);
            	}
             }
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Public Class DecryptAndVerifyStream
             Public Sub Demo()
            	' create an instance of the library
            	Dim pgp As New PGPLib()
            
            	' OpenPGP signed and encrypted data
            	Using dataStream As Stream = File.OpenRead("DataFiles\OUTPUTse.pgp"), _
            			senderPublicKeyStream As Stream = File.OpenRead("DataFiles\sender_public_key.asc"), _
            			privateKeyStream As Stream = File.OpenRead("DataFiles\my_private_key.asc")
            
            		' public key of the sender, to be used for signature verification
            
            		' private key to be used for decryption
            		Dim privateKeyPassword As String = "private key password"
            
            		' The output can be an arbitrary subclass of System.IO.Stream
            		Dim outputStream As New MemoryStream()
            		Dim validSigning As Boolean = _
            				pgp.DecryptAndVerifyStream(dataStream, _
            											privateKeyStream, _
            											privateKeyPassword, _
            											senderPublicKeyStream, _
            											outputStream)
            		If validSigning Then
            			Console.WriteLine("Signature is valid")
            		Else
            			Console.WriteLine("Signature is invalid")
            		End If
            
            		' we must reinitialize the output in order to be able to read from it
            		outputStream = New MemoryStream(outputStream.GetBuffer(), _
            										0, _
            										CInt(outputStream.Position))
            	End Using
             End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">The message cannot be decrypted with this private key or the supplied private key is not an OpenPGP private key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">The supplied public key is not an OpenPGP public key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is corrupted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.IO.Stream)">
      <summary>
            Decrypts and verifies an OpenPGP encrypted and signed stream  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)" />
      <param name="encryptedStream">OpenPGP signed and encrypted data to be decrypted</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the private key to be used for decrypting and the sender's public key to be used for signature verification</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputStream">Output stream where the decrypted content is stored. It's Position property is at the end of the stream after execution.</param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <example>
        <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            public class KeyStoreDecryptAndVerifyStream
            {
              public static void Demo()
              {
                // initialize the library
                PGPLib pgp = new PGPLib();
                
                // initialize the key store that contains the public key of the sender
                // and the private key (usually our own) that will be used for decryption
                KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "keystore password");
                
                // password of the private key that will be used for decryption
                String decryptionKeyPassword = "private key password";
                
                // The output can be an arbitrary subclass of System.IO.Stream
                MemoryStream outputStream = new MemoryStream();
                
                using (Stream encryptedStream = File.OpenRead(@"DataFiles\data.pgp"))
                {
                    bool validSigning = pgp.DecryptAndVerifyFile(encryptedStream,
                                                            keyStore,
                                                            decryptionKeyPassword,
                                                            outputStream);
                
                    if (validSigning)
                    {
                        Console.WriteLine("Signature is valid");
                    }
                    else
                    {
                        Console.WriteLine("Signature is invalid");
                    }
                
                    // we must reinitialize the output in order to be able to read from it
                    outputStream = new MemoryStream(outputStream.GetBuffer(), 0, _
                                                    (int)outputStream.Position);
                }
               }
            }
            </code>
        <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Public Class KeyStoreDecryptAndVerifyStream
             Public Shared Sub Demo()
            	' initialize the library
            	Dim pgp As New PGPLib()
            
            	' initialize the key store that contains the public key of the sender
            	' and the private key (usually our own) that will be used for decryption
            	Dim keyStore As New KeyStore("DataFiles\key.store", "keystore password")
            
            	' password of the private key that will be used for decryption
            	Dim decryptionKeyPassword As String = "private key password"
            
            	' The output can be an arbitrary subclass of System.IO.Stream
            	Dim outputStream As New MemoryStream()
            
            	Using encryptedStream As Stream = File.OpenRead("DataFiles\data.pgp")
            		Dim validSigning As Boolean = pgp.DecryptAndVerifyFile(encryptedStream, _
            		                                    keyStore, _
            		                                    decryptionKeyPassword, _
            		                                    outputStream)
            
            		If validSigning Then
            			Console.WriteLine("Signature is valid")
            		Else
            			Console.WriteLine("Signature is invalid")
            		End If
            
            		' we must reinitialize the output in order to be able to read from it
            		outputStream = New MemoryStream(outputStream.GetBuffer(), 0, _
            		                                CInt(outputStream.Position))
            	End Using
             End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key that can decrypt the message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is corrupted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyFile(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Decrypts and verifies an OpenPGP encrypted and signed file  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)" />
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or the encrypted data as ASCII armour string</param>
      <param name="privateKeyFile">Private key location  (absolute or relative path) or as ASCII armour string. This is usually our private key.</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyFile">Public key location (absolute or relative path)  as ASCII armour string. This is usually the public key of the sender.</param>
      <param name="outputFile">File location of the output decrypted file (absolute or relative path).
            <para>If empty the name stored in the PGP decrypted file is used and the application working folder.</para></param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            public class DecryptAndVerify
            {
              public void Demo()
              {
                PGPLib pgp = new PGPLib();
                bool validSigning = pgp.DecryptAndVerifyFile(@"DataFiles\OUTPUTse.pgp",
                                                             @"DataFiles\private_key.asc", 
                                                             "private key password",
                                                             @"DataFiles\public_key.asc",
                                                             @"DataFiles\OUTPUT.txt");
                                                             
            	Console.WriteLine("Signature is valid: " + validSigning);      
              }
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Public Class DecryptAndVerify
              Public Sub Demo()
                Dim pgp As New PGPLib()
                Dim validSigning As Boolean = pgp.DecryptAndVerifyFile("DataFiles\OUTPUT.pgp", _
                                                        "DataFiles\private_key.asc", _
                                                        "private key password", _
                                                        "DataFiles\public_key.asc", _
                                                        "DataFiles\OUTPUT.txt")
                                                        
                Console.WriteLine("Signature is valid: " + validSigning)
              End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">The message cannot be decrypted with this private key or the supplied private key is not an OpenPGP private key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">The supplied public key is not an OpenPGP public key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is integrity c</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyFilePBE(System.String,System.String,System.String,System.String)">
      <summary>
            Decrypts and verifies a PGP password based encrypted (PBE) and signed file  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)" />
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or as ASCII armour string</param>
      <param name="decryptionPassword">Password used to encrypt the file</param>
      <param name="publicKeyFile">Public key location (absolute or relative path) or as ASCII armour string. Used for signature verification </param>
      <param name="outputFile">File name of the Output decrypted file (absolute or relative path)</param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid or there is no signature at all</returns>
      <example>
            This example demonstrates how to decrypt and verify a signed and encrypted with password OpenPGP archive.
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            public class DecryptAndVerifyPBE
            {
              public void Demo()
              {
                PGPLib pgp = new PGPLib();
                bool validSigning = pgp.DecryptAndVerifyFilePBE(@"c:\encrypted_file.pgp",
                                                             "decryption password",
                                                             @"c:\recipient_public_key.asc",
                                                             @"c:\OUTPUT.txt");
                                                             
                Console.WriteLine("Signature is valid: " + validSigning);      
              }
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Public Class DecryptAndVerifyPBE
              Public Sub Demo()
                 Dim pgp As New PGPLib()
                 Dim validSigning As Boolean = pgp.DecryptAndVerifyFilePBE("c:\encrypted_file.pgp", _
                                                        "decryption password", _
                                                        "c:\recipient_public_key.asc", _
                                                        "c:\OUTPUT.txt")
                                                        
                 Console.WriteLine("Signature is valid: " + validSigning)
              End Sub
            End Class
            </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP related error</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyString(System.String,System.String,System.String,System.String,System.String@)">
      <summary>
            Decrypts and verifies PGP encrypted and signed string message  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <param name="inputString">String message that is OpenPGP encrypted and optionally signed in ASCII armour format or file location</param>
      <param name="privateKey">Private key as ASCII armour String or file location. Will be used for decryption</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKey">Public key as ASCII armour String  or file location. Will be used to verify the signature</param>
      <param name="outputString">Decrypted message. 
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <c>true</c> if signature is valid, <c>false</c> if signature is invalid</returns>
      <example>
            This sample shows how to decrypt and verify OpenPGP signed and encrypted string message.
            <code lang="C#">
            using DidiSoft.Pgp;
            using System;
            using System.IO;
            
            public class Demo
            {
             public void DecryptAndVerifyDemo()
             {
                 string pgpString = "...."; // the signed and encrypted message 
            
                 // our private key used for decryption
                 FileInfo PrivateKey = "..."; // private key in String form
                 String Password = "pass123";
            
                 // recipient public key used for verification of the signature
                 string PublicKey = "..."; // recipient's public key in String form
            
                 // create an instance of the library
                 PGPLib pgp = new PGPLib();
                  
                 // verify the validity of the signature and extract the encrypted string message
            		string outputString = String.Empty;
            		bool signatureIsValid = pgp.DecryptAndVerifyString(pgpString, 
            		                                                    PrivateKey, 
            		                                                    Password, 
            		                                                    PublicKey, 
            		                                                    out outputString);
             }
            }    
            </code><code lang="VB">
            Imports DidiSoft.Pgp
            Imports System
            Imports System.IO
            
            Public Class Demo
            	Public Sub DecryptAndVerifyDemo()
            	
                 Dim pgpString As String = "...." ' the signed and encrypted message
            
            	    ' our private key used for decryption
            		Dim PrivateKey As String = " ... " ' private key in String form
            		Dim Password As String = "pass123"
            
                 ' recipient public key used for verification of the signature
                 Dim PublicKey As String = " ... " ' recipient's public key in String form
                 
                 ' create an instance of the library
            		Dim pgp As New PGPLib()
            		
                 ' verify the validity of the signature and extract the encrypted string message
            		Dim outputString As String
            		Dim signatureIsValid As Boolean = pgp.DecryptAndVerifyString(pgpString, _
            		                                                    PrivateKey, _
            		                                                    Password, _
            		                                                    PublicKey, _
            		                                                    outputString)
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">The message cannot be decrypted with this private key or the supplied private key is not an OpenPGP private key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">The supplied public key is not an OpenPGP public key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is corrupted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyString(System.String,System.IO.FileInfo,System.String,System.IO.FileInfo,System.String@)">
      <summary>
            Decrypts and verifies PGP encrypted and signed string message  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <param name="inputString">String message that is OpenPGP encrypted and optionally signed in ASCII armour format or file location</param>
      <param name="privateKeyFile">Private Key file, that will be used for decryption</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyFile">Public Key file, that will be used to verify the signature</param>
      <param name="outputString">Decrypted message. 
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <example>
            This sample shows how to decrypt and verify OpenPGP signed and encrypted string message.
            <code lang="C#">
            using DidiSoft.Pgp;
            using System;
            using System.IO;
            
            public class Demo
            {
             public void DecryptAndVerifyDemo()
             {
                 string pgpString = "...."; // the signed and encrypted message 
            
                 // our private key used for decryption
                 FileInfo PrivateKey = new FileInfo(@"c:\our_private_key.asc");    
                 String Password = "pass123";
            
                 // recipient public key used for verification of the signature
                 FileInfo PublicKey = new FileInfo(@"c:\recipient_public_key.asc");
            
                 // create an instance of the library
                 PGPLib pgp = new PGPLib();
                  
                 // verify the validity of the signature and extract the encrypted string message
            		string outputString = String.Empty;
            		bool signatureIsValid = pgp.DecryptAndVerifyString(pgpString, 
            		                                                    PrivateKey, 
            		                                                    Password, 
            		                                                    PublicKey, 
            		                                                    out outputString);
             }
            }    
            </code><code lang="VB">
            Imports DidiSoft.Pgp
            Imports System
            Imports System.IO
            
            Public Class Demo
            	Public Sub DecryptAndVerifyDemo()
            	
                 Dim pgpString As String = "...." ' the signed and encrypted message
            
            	    ' our private key used for decryption
            		Dim PrivateKey As New FileInfo("c:\private_key.asc")
            		Dim Password As String = "pass123"
            
                 ' recipient public key used for verification of the signature
                 Dim PrivateKey As New FileInfo("c:\private_key.asc")
                 
                 ' create an instance of the library
            		Dim pgp As New PGPLib()
            		
                 ' verify the validity of the signature and extract the encrypted string message
            		Dim outputString As String
            		Dim signatureIsValid As Boolean = pgp.DecryptAndVerifyString(pgpString, _
            		                                                    PrivateKey, _
            		                                                    Password, _
            		                                                    PublicKey, _
            		                                                    outputString)
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if the privateKeyFile parameter is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">The message cannot be decrypted with this private key or the supplied private key is not an OpenPGP private key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">The supplied public key is not an OpenPGP public key or is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is integrity c</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyString(System.String,System.IO.Stream,System.String,System.IO.Stream,System.String@)">
      <summary>
            Decrypts and verifies PGP encrypted and signed string message  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <param name="inputString">String message that is OpenPGP encrypted and optionaly signed in ASCII armour format or file location</param>
      <param name="privateKeyStream">Private key as Stream that will be used for decryption</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyStream">Public key as Stream that will be used to verify the signature</param>
      <param name="outputString">The decrypted string message. 
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <example>
            This sample shows how to decrypt and verify OpenPGP signed and encrypted string message.
            <code lang="cs">
            using DidiSoft.Pgp;
            using System;
            using System.IO;
            
            public class Demo
            {
             public void DecryptAndVerifyDemo()
             {
                 string pgpString = "...."; // the signed and encrypted message 
            
                 // our private key used for decryption
                 FileInfo PrivateKey = new FileInfo(@"c:\our_private_key.asc");    
                 string Password = "pass123";
            
                 // recipient public key used for verification of the signature
                 FileInfo PublicKey = new FileInfo(@"c:\recipient_public_key.asc");
            
                 // create an instance of the library
                 PGPLib pgp = new PGPLib();
                  
                 using (Stream privateKeyStream = PrivateKey.OpenRead())
                 using (Stream publicKeyStream = PublicKey.OpenRead())
                 {
                    // verify the validity of the signature and extract the encrypted string message
            		string outputString = String.Empty;
            		bool signatureIsValid = pgp.DecryptAndVerifyString(pgpString, 
            		                                                    privateKeyStream, 
            		                                                    Password, 
            		                                                    publicKeyStream, 
            		                                                    out outputString);
            	 }	                                                    
             }
            }    
            </code><code lang="vbnet">
            Imports DidiSoft.Pgp
            Imports System
            Imports System.IO
            
            Public Class Demo
            	Public Sub DecryptAndVerifyDemo()
            	
                 Dim pgpString As String = "...." ' the signed and encrypted message
            
            	 ' our private key used for decryption
            	 Dim PrivateKey As New FileInfo("c:\private_key.asc")
            	 Dim Password As String = "pass123"
            
                 ' recipient public key used for verification of the signature
                 Dim PrivateKey As New FileInfo("c:\private_key.asc")
                 
                 ' create an instance of the library
            		Dim pgp As New PGPLib()
            	
                 Using privateKeyStream As Stream = PrivateKey.OpenRead()
                  Using publicKeyStream As Stream = PublicKey.OpenRead()
                   ' verify the validity of the signature and extract the encrypted string message
            	   Dim outputString As String
            	   Dim signatureIsValid As Boolean = pgp.DecryptAndVerifyString(pgpString, _
            		                                                    privateKeyStream, _
            		                                                    Password, _
            		                                                    publicKeyStream, _
            		                                                    outputString)
            	  End Using	                                                     
            	 End Using 	                                                    
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if the privateKeyStream or publicKeyStream parameter is <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading public key file or private key file </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String@)">
      <summary>
            Decrypts and verifies PGP encrypted and signed string message  
            </summary>
      <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
      <param name="inputString">String message that is OpenPGP encrypted and optionally signed in ASCII armour format or file location</param>
      <param name="keyStore">KeyStore object containing the private decryption key and public verification key</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputString">Decrypted plaintext message. 
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key that can decrypt the message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is integrity c</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts and verifies a PGP encrypted and signed file  
             </summary>
      <remarks>
             Supports OpenPGP version 3 signatures format (used by PGP 2.6 systems).
             </remarks>
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or ASCII armour string</param>
      <param name="keyStore">Key store instance containing the Private Key for decryption and the other party Public key for verification</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFile">File location of the output decrypted file (absolute or relative path). Optional parameter. 
             <para>If empty the name stored in the PGP decrypted file is used.</para></param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class KeyStoreDecryptAndVerifyFile
             {
             public static void Demo()
            {
                     KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                      PGPLib pgp = new PGPLib();	
            
                      bool validSigning = pgp.DecryptAndVerifyFile(@"DataFiles\OUTPUT.pgp", 
                                                                  keyStore, 
                                                                  "private key password", 
                                                                  @"DataFiles\OUTPUT.txt");
                      Console.WriteLine("Signature is valid: " + validSigning);
            
             } 
            }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class KeyStoreDecryptAndVerifyFile
              Public Shared Sub Demo()
                      Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                      Dim pgp As new PGPLib()
            
                      Dim validSigning As Boolean = pgp.DecryptAndVerifyFile("DataFiles\OUTPUT.pgp", _
                                                                          keyStore, _
                                                                          "private key password", _
                                                                          "DataFiles\OUTPUT.txt")
                      Console.WriteLine("Signature is valid: " + validSigning)
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the private decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key that can decrypt the message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">If the input data is encrypted with a password</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">If the input data is integrity c</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptAndVerifyFilePBE(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts and verifies the signature of a PGP encrypted and signed file  
             </summary>
      <remarks>
             Supports OpenPGP version 3 format too (used by PGP 2.x systems).
             </remarks>
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or ASCII armour string</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> instance containing the public key for digital signature verification</param>
      <param name="decryptionPassword">Password used to encrypt the file</param>
      <param name="outputFile">File location of the Output decrypted file (absolute or relative path)</param>
      <returns>
        <see langword="true" /> if signature is valid, <see langword="false" /> if signature is invalid or there is no signature at all</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class KeyStoreDecryptAndVerifyFilePBE
             {
              public static void Demo()
              {
                     KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                      PGPLib pgp = new PGPLib();	
            
                      bool validSigning = pgp.DecryptAndVerifyFilePBE(@"DataFiles\OUTPUT.pgp", 
                                                                  keyStore, 
                                                                  "decryption password", 
                                                                  @"DataFiles\OUTPUT.txt");
                                                                  
                      Console.WriteLine("Signature is valid: " + validSigning);
              }
            }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class KeyStoreDecryptAndVerifyFilePBE
               Public Shared Sub Demo()
                      Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                      Dim pgp As New PGPLib()	
            
                      Dim validSigning As Boolean = pgp.DecryptAndVerifyFilePBE("DataFiles\OUTPUT.pgp", _
                                                                          keyStore, _
                                                                          "decryption password", _
                                                                          "DataFiles\OUTPUT.txt")
                                                                          
                      Console.WriteLine("Signature is valid: " + validSigning)
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo)">
      <summary>
             Decrypts a PGP encrypted file using a private key file.
             </summary>
      <param name="encryptedFile">File to be decrypted </param>
      <param name="privateKeyFile">Private Key file </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFile">Output file where the decrypted data will be stored</param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	  // initialize the library
             	  PGPLib pgp = new PGPLib();
             	
             	  FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
             	  FileInfo privateKeyLocation = new FileInfo(@"c:\private_key.asc");
             	  string privateKeyPassword = "key password";
             	  FileInfo decryptedOutput = new FileInfo(@"c:\OUTPUT.txt");
             
             	  // decrypt and obtain the original file name
             	  string originalFileName = 
             	    pgp.DecryptFile(inputFileLocation,
             					  privateKeyLocation,
             					  privateKeyPassword,
             					  decryptedOutput);		
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 ' decrypt and obtain the original file name
             	 Dim originalFileName As String
             	 originalFileName = 
             	   pgp.DecryptFile(New FileInfo("c:\INPUT.pgp"), _
             					  New FileInfo("c:\private_key.asc"), _
             					  "key password", _
             					  New FileInfo("c:\OUTPUT.txt"))
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if one or more of the FileInfo parameters are <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFilePBE(System.String,System.String,System.String)">
      <summary>
             Decrypts a PGP conventional password encrypted file (also known as PBE, symmetric key encrypted).
             </summary>
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or ASCII armour string</param>
      <param name="password">Password used for symmetric encryption of the input file</param>
      <param name="outputFileName">File name of the Output decrypted file (absolute or relative path)</param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class DecryptPBEDemo
             {
              public void Demo()
              {
             	  // initialize the library
             	  PGPLib pgp = new PGPLib();
             	
             	  string inputFileLocation = @"c:\INPUT.pgp";
             	  string password = "private key password";
             	  string decryptedOutput = @"c:\OUTPUT.txt";
             
             	  // decrypt and obtain the original file name
             	  string originalFileName = 
             	    pgp.DecryptFilePBE(inputFileLocation,
             					       password,
             					       decryptedOutput);		
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class DecryptPBEDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 ' decrypt and obtain the original file name
             	 Dim originalFileName As String
             	 originalFileName = _
             	    pgp.DecryptFilePBE("c:\INPUT.pgp", _
             					       "private key password", _
             					       "c:\OUTPUT.txt")
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the file is encrypted with a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">This is a key encrypted archive but we try to decrypt it with a password</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFile(System.String,System.String,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted file using Private key file.
             </summary>
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or as ASCII armour string</param>
      <param name="privateKeyFile">Private key file (absolute or relative path) or as ASCII armour string</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFileName">File name of the Output decrypted file (absolute or relative path). Optional parameter. 
                                           <para>If empty the name stored in the PGP decrypted file is used.</para></param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
             This example shows how to decrypt an OpenPGP encrypted file with a decryption private key and the key password.
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	// initialize the library
             	PGPLib pgp = new PGPLib();
             	
             	string inputFileLocation = @"c:\INPUT.pgp";
             	string privateKeyLocation = @"c:\private_key.asc";
             	string privateKeyPassword = "key password";
             	string decryptedOutput = @"c:\OUTPUT.txt";
             
             	// decrypt and obtain the original file name
             	string originalFileName = 
             	  pgp.DecryptFile(inputFileLocation,
             					  privateKeyLocation,
             					  privateKeyPassword,
             					  decryptedOutput);		
              }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
             Public Sub Demo()
             	' create an instance of the library
             	Dim pgp As New PGPLib()
             
             	' decrypt and obtain the original file name
             	Dim originalFileName As String
             	originalFileName = _
             	  pgp.DecryptFile("c:\INPUT.pgp", _
             					"c:\private_key.asc", _
             					"key password", _
             					"c:\OUTPUT.txt")
              End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFile(System.String,System.IO.Stream,System.String,System.String)">
      <summary>
             Decrypts an OpenPGP encrypted file with a private key supplied as an input stream.
             </summary>
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or ASCII armour string</param>
      <param name="privateKeyStream">Private Key input stream   </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFileName">File name of the Output decrypted file (absolute or relative path). Optional parameter. 
                                           <para>If empty the name stored in the PGP decrypted file is used.</para></param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
             This example shows how to decrypt an OpenPGP encrypted file with a decryption private key and the key password.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	// initialize the library
             	PGPLib pgp = new PGPLib();
             	
              using (Stream privateKeyStream = File.OpenRead(@"c:\private_key.asc"))
              {
             	  string inputFileLocation = @"c:\INPUT.pgp";
             	  string privateKeyPassword = "key password";
             	  string decryptedOutput = @"c:\OUTPUT.txt";
             
             	  // decrypt and obtain the original file name
             	  string originalFileName = 
             	    pgp.DecryptFile(inputFileLocation,
             					  privateKeyStream,
             					  privateKeyPassword,
             					  decryptedOutput);		
             	 }
              }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               Dim privateKeyStream As Stream = Nothing
               Try 
                privateKeyStream = New FileStream("c:\private_key.asc", FileMode.Open)
                
             	  ' decrypt and obtain the original file name
             	  Dim originalFileName As String
             	  originalFileName = _
             	    pgp.DecryptFile("c:\INPUT.pgp", _
             					privateKeyStream, _
             					"key password", _
             					"c:\OUTPUT.txt")
             	 Finally
            			privateKeyStream.Close()
            	 End Try
              End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptBytes(System.Byte[],System.Byte[],System.String,System.Byte[]@)">
      <summary>
             Decrypts OpenPGP encrypted data in the form of byte array with a private key supplied also as byte array.
             </summary>
      <param name="encryptedBytes">OpenPGP encrypted data as byte array</param>
      <param name="privateKeyBytes">Private key bytes</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputBytes">Decrypted content</param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.IO.Stream)">
      <summary>
             Decrypts an OpenPGP encrypted data stream with a private key supplied as an input stream.
             </summary>
      <remarks>
             The caller of this method has the obligation to close the output stream.
             </remarks>
      <param name="encryptedStream">OpenPGP encrypted data stream</param>
      <param name="privateKeyStream">Private key input stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputStream">Decrypted content</param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
             This example shows how to decrypt an OpenPGP encrypted stream with a decryption private key.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptStreamDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
               Stream privateKeyStream = null;
               Stream inputFileStream = null;
               Stream decryptedStream = null;
               try {
                privateKeyStream = new FileStream(@"c:\private_key.asc", FileMode.Open);
             	  inputFileStream = new FileStream(@"c:\INPUT.pgp", FileMode.Open);
             	  string privateKeyPassword = "key password";
             	  decryptedStream = new FileStream(@"c:\OUTPUT.txt", FileMode.Create);
             
             	  // decrypt and obtain the original file name
             	  string originalFileName = 
             	    pgp.DecryptStream(inputFileStream,
             					  privateKeyStream,
             					  privateKeyPassword,
             					  decryptedStream);		
             	 } finally {
             	   inputFileStream.Close();
             	   privateKeyStream.Close();
             	   decryptedStream.Close();
             	 }
              }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptStreamDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               Dim privateKeyStream As Stream = Nothing
               Dim inputStream As Stream = Nothing
               Dim decryptedStream As Stream = Nothing
               
               Try 
                privateKeyStream = New FileStream("c:\private_key.asc", FileMode.Open)
                inputStream = New FileStream("c:\INPUT.pgp", FileMode.Open)
                decryptedStream = New FileStream("c:\OUTPUT.txt", FileMode.Create)
                
             	  ' decrypt and obtain the original file name
             	  Dim originalFileName As String
             	  originalFileName = _
             	    pgp.DecryptStream(inputStream, _
             					privateKeyStream, _
             					"key password", _
             					decryptedStream)
             	 Finally
            			privateKeyStream.Close()
            			inputStream.Close()
            			decryptedStream.Close()
            	 End Try
            	 
              End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.IO.Stream)">
      <summary>
             Decrypts an OpenPGP encrypted data stream with a private key located in a KeyStore.
             </summary>
      <remarks>
             The caller of this method has the obligation to close the output stream.
             </remarks>
      <param name="encryptedStream">OpenPGP encrypted data stream</param>
      <param name="keyStore">KeyStore containing the private key</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputStream">Decrypted content</param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
             This example shows how to decrypt an OpenPGP encrypted stream with a private key located in a KeyStore.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptStreamDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
               // initialize theKeyStore
            	 KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");
            	 
               Stream inputFileStream = null;
               Stream decryptedStream = null;
               try {
             	  inputFileStream = new FileStream(@"c:\INPUT.pgp", FileMode.Open);
             	  string privateKeyPassword = "key password";
             	  decryptedStream = new FileStream(@"c:\OUTPUT.txt", FileMode.Create);
             
             	  // decrypt and obtain the original file name
             	  string originalFileName = 
             	    pgp.DecryptStream(inputFileStream,
             					  keyStore,
             					  privateKeyPassword,
             					  decryptedStream);		
             	 } finally {
             	   inputFileStream.Close();
             	   decryptedStream.Close();
             	 }
              }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptStreamDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               ' initialize theKeyStore
            	 Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
            	 
               Dim inputStream As Stream = Nothing
               Dim decryptedStream As Stream = Nothing
               
               Try 
                inputStream = New FileStream("c:\INPUT.pgp", FileMode.Open)
                decryptedStream = New FileStream("c:\OUTPUT.txt", FileMode.Create)
                
             	  ' decrypt and obtain the original file name
             	  Dim originalFileName As String
             	  originalFileName = _
             	    pgp.DecryptStream(inputStream, _
             					keyStore, _
             					"key password", _
             					decryptedStream)
             	 Finally
            			inputStream.Close()
            			decryptedStream.Close()
            	 End Try
            	 
              End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptTo(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <remarks>
             The multiple files OpenPGP archives are supported by PGP Desktop (tm) 9+ and compatible software.
             </remarks>
      <param name="encryptedPGPStream">PGP encrypted stream to be decrypted</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> instance containing the private decryption key</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
               // initialize the library
               PGPLib pgp = new PGPLib();
               
                // initialize theKeyStore
               KeyStore keysStore = new KeyStore("c:\pgp.keystore"); 
            
               FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
               string privateKeyPassword = "decryption key password";
               string outputFolder = @"c:\Output";
             
               // decrypt and obtain the original file name(s)
               string[] decryptedFileNames = 
               pgp.DecryptTo(inputFile.OpenRead(),
                                      keysStore,
                                      privateKeyPassword,
                                      outputFolder);
              
                // print the full path of the decrypted file(s)
                foreach (string filename in decryptedFileNames)
                {
                   System.Console.WriteLine(filename);
                }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               ' initialize theKeyStore
               Dim keysStore As New KeyStore("c:\pgp.keystore") 
             
             	 Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and obtain the original file name
             	 Dim decryptedFileNames As String() = _
             	    pgp.DecryptTo(inputFile.OpenRead(), _
             					  keysStore, _
             					  "decryption key password", _
             					  outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStreamInFolder(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <remarks>
             The multiple files OpenPGP archives are supported by PGP Desktop (tm) 9+ and compatible software.
             </remarks>
      <param name="encryptedStream">OpenPGP encrypted stream to be decrypted</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> instance containing the private decryption key</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
               // initialize the library
               PGPLib pgp = new PGPLib();
               
                // initialize theKeyStore
               KeyStore keysStore = new KeyStore("c:\pgp.keystore"); 
            
               FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
               string privateKeyPassword = "decryption key password";
               string outputFolder = @"c:\Output";
             
               // decrypt and obtain the original file name(s)
               string[] decryptedFileNames = 
               pgp.DecryptStreamTo(inputFile.OpenRead(),
                                      keysStore,
                                      privateKeyPassword,
                                      outputFolder);
              
                // print the full path of the decrypted file(s)
                foreach (string filename in decryptedFileNames)
                {
                   System.Console.WriteLine(filename);
                }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               ' initialize theKeyStore
               Dim keysStore As New KeyStore("c:\pgp.keystore") 
             
             	 Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and obtain the original file name
             	 Dim decryptedFileNames As String() = _
             	    pgp.DecryptStreamTo(inputFile.OpenRead(), _
             					        keysStore, _
             					       "decryption key password", _
             					       outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStreamPBE(System.IO.Stream,System.String,System.IO.Stream)">
      <summary>
             Decrypts a PGP conventional password encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedStream">OpenPGP password encrypted stream to be decrypted</param>
      <param name="password">Decryption password (this is the same password used for encrypting the file)</param>
      <param name="outputStream">Output stream for the decrypted content</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
             	 FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
             	 string decryptionPassword = "decryption password";
             	 Stream decryptedStream = New FileStream("c:\OUTPUT.txt", FileMode.Create)
             
             	 // decrypt and obtain the original file name(s)
             	 string[] decryptedFileNames = 
             	   pgp.DecryptStreamPBE(inputFile.OpenRead(),
             					       decryptionPassword,
             					       decryptedStream);
             					  
             	 // print the internal name of the decrypted file
             	 System.Console.WriteLine(filename);
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	 Dim decryptedStream As New FileStream("c:\OUTPUT.txt", FileMode.Create)
             	
             	 ' decrypt and obtain the original file name
             	 Dim filename As String = _
             	  pgp.DecryptStreamPBE(inputFile.OpenRead(), _
             					"decryption password", _
             					decryptedStream)
             					 
               ' print the internal name of the decrypted file
               System.Console.WriteLine(filename)
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the file is encrypted with a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptPBETo(System.IO.Stream,System.String,System.String)">
      <summary>
             Decrypts a PGP conventional password encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedPGPStream">PGP conventional password encrypted stream to be decrypted</param>
      <param name="decryptionPassword">Decryption password (this is the same password used for encrypting the file)</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	// initialize the library
             	PGPLib pgp = new PGPLib();
             	
             	FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
             	string decryptionPassword = "decryption password";
             	string outputFolder = @"c:\Output";
             
             	// decrypt and obtain the original file name(s)
             	string[] decryptedFileNames = 
             	  pgp.DecryptTo(inputFile.OpenRead(),
             					  decryptionPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and obtain the original file name
             	 Dim decryptedFileNames As String() = _
             	    pgp.DecryptTo(inputFile.OpenRead(), _
             					"decryption password", _
             					outputFolder)
             					 
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                  System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the file is encrypted with a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStreamPBEInFolder(System.IO.Stream,System.String,System.String)">
      <summary>
             Decrypts a PGP conventional password encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedStream">OpenPGP conventional password encrypted stream to be decrypted</param>
      <param name="decryptionPassword">Decryption password (this is the same password used for encrypting the file)</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
             	 FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
             	 string decryptionPassword = "decryption password";
             	 string outputFolder = @"c:\Output";
             
             	 // decrypt and obtain the original file name(s)
             	 string[] decryptedFileNames = 
             	    pgp.DecryptStreamPBEInFolder(inputFile.OpenRead(),
             					                 decryptionPassword,
             					                 outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and obtain the original file name
             	 Dim decryptedFileNames As String() = _
             	  pgp.DecryptStreamPBEInFolder(inputFile.OpenRead(), _
             					"decryption password", _
             					outputFolder)
             					 
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the file is encrypted with a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFilePBEInFolder(System.String,System.String,System.String)">
      <summary>
             Decrypts a PGP conventional password encrypted file that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedFile">PGP conventional password encrypted file to be decrypted (absolute or relative path) or as ASCII armour string</param>
      <param name="decryptionPassword">Decryption password (this is the same password used for encrypting the file)</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path)</param>
      <returns>Array of file name(s) of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	// initialize the library
             	PGPLib pgp = new PGPLib();
             	
             	string inputFile = @"c:\INPUT.pgp";
             	string decryptionPassword = "decryption password";
             	string outputFolder = @"c:\Folder1";
             
             	// decrypt and obtain the decrypted file name(s)
             	string[] decryptedFileNames = 
             	  pgp.DecryptFilePBEInFolder(inputFile,
             					  decryptionPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFile As String = "c:\INPUT.pgp"
             	 Dim outputFolder As String = "c:\Folder1"
             	
             	 ' decrypt and obtain the decrypted file name(s)
             	 Dim decryptedFileNames As String() = _
             	  pgp.DecryptFilePBEInFolder(inputFile, _
             					"decryption password", _
             					outputFolder)
             					 
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the file is encrypted with a public key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptTo(System.IO.Stream,System.IO.Stream,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedPGPStream">PGP encrypted stream to be decrypted</param>
      <param name="privateKeyStream">Private Key input stream   </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	// initialize the library
             	PGPLib pgp = new PGPLib();
             	
             	FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
             	FileInfo privateKey = new FileInfo(@"c:\private_key.asc");
             	string privateKeyPassword = "key password";
             	string outputFolder = @"c:\Output";
             
             	// decrypt and obtain the original file name(s)
             	string[] decryptedFileNames = 
             	  pgp.DecryptTo(inputFile.OpenRead(),
             					  privateKey.OpenRead(),
             					  privateKeyPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
             Public Sub Demo()
             	' create an instance of the library
             	Dim pgp As New PGPLib()
             
             	Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	Dim privateKey As New FileInfo("c:\private_key.asc")
             	Dim outputFolder As String = "c:\Output"
             	
             	' decrypt and obtain the original file name
             	Dim decryptedFileNames As String() = _
             	  pgp.DecryptTo(inputFile.OpenRead(), _
             					privateKey.OpenRead(), _
             					"key password", _
             					outputFolder)
             					
             ' print the full path of the decrypted file(s)
                        For Each filename As String In decryptedFileNames
                            System.Console.WriteLine(filename)
                        Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStreamInFolder(System.IO.Stream,System.IO.Stream,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted stream that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedStream">OpenPGP encrypted stream to be decrypted</param>
      <param name="privateKeyStream">Private Key input stream   </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
             	 FileInfo inputFile = new FileInfo(@"c:\INPUT.pgp");
             	 FileInfo privateKey = new FileInfo(@"c:\private_key.asc");
             	 string privateKeyPassword = "key password";
             	 string outputFolder = @"c:\Output";
             
             	 // decrypt and obtain the original file name(s)
             	 string[] decryptedFileNames = 
             	  pgp.DecryptStreamTo(inputFile.OpenRead(),
             					  privateKey.OpenRead(),
             					  privateKeyPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFile As New FileInfo("c:\INPUT.pgp")
             	 Dim privateKey As New FileInfo("c:\private_key.asc")
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and obtain the original file name
             	 Dim decryptedFileNames As String() = _
             	    pgp.DecryptStreamTo(inputFile.OpenRead(), _
             					privateKey.OpenRead(), _
             					"key password", _
             					outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptTo(System.String,System.String,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted file that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedFile">OpenPGP encrypted file location or as ASCII armour string</param>
      <param name="privateKeyFile">Private key location or data as ASCII armour string</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
             	 string inputFileLocation = @"c:\INPUT.pgp";
             	 string privateKeyLocation = @"c:\private_key.asc";
             	 string privateKeyPassword = "key password";
             	 string outputFolder = @"c:\Output";
             
             	 // decrypt and return array with full file paths 
             	 // of the extracted file(s)
             	 string[] decryptedFileNames = 
             	    pgp.DecryptTo(inputFileLocation,
             					  privateKeyLocation,
             					  privateKeyPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFileLocation As String = "c:\INPUT.pgp"
             	 Dim privateKeyLocation As String = "c:\private_key.asc"
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and return array with full file paths
             	 ' of the exytracted file(s)
             	 Dim decryptedFileNames As String() = _
             	   pgp.DecryptTo(inputFileLocation, _
             					privateKeyLocation, _
             					"key password", _
             					outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptTo(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted file that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedFile">OpenPGP encrypted file location or as ASCII armour string</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> instance containing the private decryption key</param>
      <param name="privateKeyPassword">Private (decryption) key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of one or more file names (full path) of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
               // initialize theKeyStore
               KeyStore keyStore = new KeyStore("c:\pgp.keystore");
              
             	 string inputFileLocation = @"c:\INPUT.pgp";
             	 string privateKeyPassword = "key password";
             	 string outputFolder = @"c:\Output";
             
             	 // decrypt and return array with full file paths 
             	 // of the exytracted file(s)
             	 string[] decryptedFileNames = 
             	  pgp.DecryptTo(inputFileLocation,
             					  keyStore,
             					  privateKeyPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               ' initialize theKeyStore
               Dim keysStore As New KeyStore("c:\pgp.keystore")
              
             	 Dim inputFileLocation As String = "c:\INPUT.pgp"
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and return array with full file paths
             	 ' of the exytracted file(s)
             	 Dim decryptedFileNames As String() = _
             	  pgp.DecryptTo(inputFileLocation, _
             					keysStore, _
             					"key password", _
             					outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFileInFolder(System.String,System.String,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted file that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedFile">OpenPGP encrypted file location or as ASCII armour string</param>
      <param name="privateKeyFile">Private key location or as ASCII armour string</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of file names of the decrypted file(s)</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	 // initialize the library
             	 PGPLib pgp = new PGPLib();
             	
             	 string inputFileLocation = @"c:\INPUT.pgp";
             	 string privateKeyLocation = @"c:\private_key.asc";
             	 string privateKeyPassword = "key password";
             	 string outputFolder = @"c:\Output";
             
             	 // decrypt and return array with full file paths 
             	 // of the extracted file(s)
             	 string[] decryptedFileNames = 
             	   pgp.DecryptFileTo(inputFileLocation,
             					  privateKeyLocation,
             					  privateKeyPassword,
             					  outputFolder);
             					  
             	 // print the full path of the decrypted file(s)
             	 foreach (string filename in decryptedFileNames)
             	 {
             	    System.Console.WriteLine(filename);
             	 }
              }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
             	 Dim inputFileLocation As String = "c:\INPUT.pgp"
             	 Dim privateKeyLocation As String = "c:\private_key.asc"
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and return array with full file paths
             	 ' of the extracted file(s)
             	 Dim decryptedFileNames As String() = _
             	   pgp.DecryptFileTo(inputFileLocation, _
             					privateKeyLocation, _
             					"key password", _
             					outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFileInFolder(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted file that may contain multiple files to a specified directory.
             </summary>
      <param name="encryptedFile">OpenPGP encrypted file location or as ASCII armour string</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> instance containing the private decryption key</param>
      <param name="privateKeyPassword">Private (decryption) key password</param>
      <param name="outputFolderLocation">Folder where decrypted file(s) will be extracted (absolute or relative path).</param>
      <returns>Array of one or more file names (full path) of the decrypted file(s)</returns>
      <example>
        <code lang="C#"><![CDATA[
             using System;
             using DidiSoft.Pgp;
             
             public class DecryptDemo
             {
              public void Demo()
              {
             	  // initialize the library
             	  PGPLib pgp = new PGPLib();
             	
             	  // initialize theKeyStore
             	  KeyStore keyStore = new KeyStore("c:\pgp.keystore");
              
             	  string inputFileLocation = @"c:\INPUT.pgp";
             	  string privateKeyPassword = "key password";
             	  string outputFolder = @"c:\Output";
             
             	  // decrypt and return array with full file paths 
             	  // of the extracted file(s)
             	  string[] decryptedFileNames = 
             	    pgp.DecryptFileTo(inputFileLocation,
             					  keyStore,
             					  privateKeyPassword,
             					  outputFolder);
             					  
             	   // print the full path of the decrypted file(s)
             	   foreach (string filename in decryptedFileNames)
             	   {
             	     System.Console.WriteLine(filename);
             	   }
              }
             }
             ]]></code>
        <code lang="VB"><![CDATA[
             Imports System
             Imports DidiSoft.Pgp
             
             Public Class DecryptDemo
              Public Sub Demo()
             	 ' create an instance of the library
             	 Dim pgp As New PGPLib()
             
               ' initialize theKeyStore
               Dim keysStore As New KeyStore("c:\pgp.keystore")
              
             	 Dim inputFileLocation As String = "c:\INPUT.pgp"
             	 Dim outputFolder As String = "c:\Output"
             	
             	 ' decrypt and return array with full file paths
             	 ' of the extracted file(s)
             	 Dim decryptedFileNames As String() = _
             	  pgp.DecryptFileTo(inputFileLocation, _
             					keysStore, _
             					"private key password", _
             					outputFolder)
             					
               ' print the full path of the decrypted file(s)
               For Each filename As String In decryptedFileNames
                   System.Console.WriteLine(filename)
               Next   
              End Sub
             End Class
             ]]></code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted file using Private key located inKeyStore.
             </summary>
      <param name="encryptedFile">File to be decrypted (absolute or relative path) or as ASCII armour string</param>
      <param name="keyStore">Key store containing the Private Key</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outputFileName">File name of the Output decrypted file (absolute or relative path). Optional parameter. 
                                           <para>If empty the name stored in the PGP decrypted file is used.</para></param>
      <returns>The original file name of the decrypted data if stored inside the PGP archive or an empty string if there was no internal file name label.</returns>
      <example>
        <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
            	public class KeyStoreDecryptFile
            	{
            		public static void Demo()
            		{
            		    // initialize theKeyStore
            			KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");
            			
                     // initialize the library
            			PGPLib pgp = new PGPLib();	
            			
            			String privateKeyPassword = "key password";
                     pgp.DecryptFile(@"c:\INPUT.pgp", keyStore, privateKeyPassword, @"c:\OUTPUT.txt");			
            		}
            	}
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
            	Public Class KeyStoreDecryptFile
            		Public Shared Sub Demo()
            		    ' initialize theKeyStore
            			Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
            			
                     ' initialize the library
            			Dim pgp As New PGPLib()
            
            			Dim privateKeyPassword As String = "key password"
            			pgp.DecryptFile("c:\INPUT.pgp", keyStore, privateKeyPassword, "c:\OUTPUT.txt")
            		End Sub
            	End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied <see cref="T:DidiSoft.Pgp.KeyStore" /> does not contain a suitable decryption key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptString(System.String,System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted message.
             </summary>
      <param name="encryptedString">OpenPGP encrypted message</param>
      <param name="privateKeyAscii">Private key in ASCII armour format or private key file location</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>Decrypted string</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptString(System.String,DidiSoft.Pgp.KeyStore,System.String)">
      <summary>
            Decrypts OpenPGP encrypted string message
            </summary>
      <param name="encryptedString">OpenPGP encrypted string message or file location</param>
      <param name="keyStore">KeyStore object that contains the decryption key</param>
      <param name="privateKeyPassword">Password of the private decryption key located in theKeyStore</param>
      <returns>decrypted plain text string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class DecryptStringWithKeyStore
            {
             public void Demo()
             {
              // initialize the key store
              KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
              try {
                      PGPLib pgp = new PGPLib();
            
                       // OpenPGP encrypted string
                       string encryptedString = ... 
            
                       string plainText = pgp.DecryptString(encryptedString, ks, "private key password");
               }
               catch (ArgumentException) 
               {
                       Console.WriteLine("No suitable decryption key was found in this key store.");
               }
             }
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class DecryptStringWithKeyStore
            	Public Sub Demo()
            		' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
            		Try
            			Dim pgp As New PGPLib()
            			
            			' OpenPGP encrypted string
            			Dim encryptedString As String = ...
            
            			Dim plainText As String = pgp.DecryptString(encryptedString, ks, "private key password")
            		Catch generatedExceptionName As ArgumentException
            			Console.WriteLine("No suitable decryption key was found in this key store.")
            		End Try
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted message but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptStringPBE(System.String,System.String)">
      <summary>
             Decrypts a PGP encrypted message.
             </summary>
      <param name="encryptedString">OpenPGP encrypted message or file location</param>
      <param name="password">Password to be used to decrypt the string</param>
      <returns>Decrypted string</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading private key file </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptString(System.String,System.IO.Stream,System.String)">
      <summary>
             Decrypts a PGP encrypted message.
             </summary>
      <param name="encryptedString">OpenPGP encrypted message or file location</param>
      <param name="privateKeyStream">Private key stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>Decrypted string</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading private key file </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified password for the private key is wrong</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if provided private key is not a valid OpenPGP private key or doesn't match this message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted message but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DecryptString(System.String,System.IO.FileInfo,System.String)">
      <summary>
             Decrypts a PGP encrypted message.
             </summary>
      <param name="encryptedString">OpenPGP encrypted message</param>
      <param name="privateKeyFile">Private key file</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>Decrypted string</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             class DecryptString {
            
                    public static String Demo(String encryptedString)
                    {
                        PGPLib pgp = new PGPLib();
                        String plainString = pgp.DecryptString(encryptedString, 
                                                                 new FileInfo(@"DataFiles\private_key.asc"), 
                                                                 "private key password");
                        return plainString;
                    }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
                Class DecryptString
                    Public Shared Function Demo(ByVal encryptedString As String) As String
                        Dim pgp As New PGPLib()
                        Dim plainString As String = pgp.DecryptString(encryptedString, _
                                                                     New FileInfo("DataFiles\private_key.asc"), _
                                                                     "private key password")
                        Return plainString
                    End Function
                End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message or is not a private key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">The input data is not a valid OpenPGP encrypted message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.IntegrityCheckException">The encrypted message is corrupted</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsPBEEncryptedException">This is a password only encrypted archive but we try to decrypt it with a private key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            PGP Encrypts given file using the first available Public PGP key from a Key ring file
            and a passphrase that can be used to decrypt the file if the private key is lost.
            </summary>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFileName">Key ring file name (absolute or relative path)</param>
      <param name="passphrase">Additional passphrase that can be used to decrypt the file instead of using the private key</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should file be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFilePBE(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a file with a public key and a password.
            <para>
            The password can be used to decrypt the file if the corresponding private key is lost.
            </para><para>
            Example GnuPG command:</para>
            gpg -r [public key user id] -c -e [dataFileName]
            </summary>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFile">Public key to encrypt with (absolute or relative path) or as ASCII armour string</param>
      <param name="passphrase">Additional passphrase that can be used to decrypt the file instead of using the private key</param>
      <param name="outputFileName">File location for the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the output be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
            The example below shows how to encrypt a file with both public key and a password
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
                pgp.EncryptFilePBE(@"DataFiles\INPUT.txt",
                                   @"DataFiles\public_key.asc",
                                   "alternative_password",
                                   @"DataFiles\OUTPUT.pgp", 
                                   asciiArmor, 
                                   withIntegrityCheck);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               pgp.EncryptFilePBE("DataFiles\INPUT.txt", _
                                  "DataFiles\public_key.asc", _
                                  "alternative_password", _
                                  "DataFiles\OUTPUT.pgp", _
                                   asciiArmor, _
                                   withIntegrityCheck)
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFilePBE(System.String,System.IO.Stream,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a file with a public key and a password.
            <para>
            The password can be used to decrypt the file if the corresponding private key is lost.
            </para><para>
            Example GnuPG command:</para>
            gpg -r [public key user id] -c -e [dataFileName]
            </summary>
      <remarks>
            The caller has the obligation to close the public key stream.
            </remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="publicKeyStream">Public key to encrypt with (absolute or relative path)</param>
      <param name="passphrase">Additional passphrase that can be used to decrypt the file instead of using the private key</param>
      <param name="outputFileName">File location for the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the output be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
            The example below shows how to OpenPGP encrypt a file with both public key and a password
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
                pgp.EncryptFilePBE(@"DataFiles\INPUT.txt",
                                   @"DataFiles\public_key.asc",
                                   "alternative_password",
                                   @"DataFiles\OUTPUT.pgp", 
                                   asciiArmor, 
                                   withIntegrityCheck);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               pgp.EncryptFilePBE("DataFiles\INPUT.txt", _
                                  "DataFiles\public_key.asc", _
                                  "alternative_password", _
                                  "DataFiles\OUTPUT.pgp", _
                                   asciiArmor, _
                                   withIntegrityCheck)
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStreamPBE(System.IO.Stream,System.String,System.IO.Stream,System.String,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a stream with a public key and a password.
            <para>
            The password can be used to decrypt the file if the corresponding private key is lost.
            </para><para>
            Example GnuPG command:</para>
            gpg -r [public key user id] -c -e [dataFileName]
            </summary>
      <remarks>
            The caller has the obligation to close the public key stream.
            <para>
            The caller has the obligation to close the data stream.
            </para>
            The caller has the obligation to close the output stream.
            </remarks>
      <param name="dataStream">Stream source to be encrypted</param>
      <param name="fileNameLabel">File name label to be associated with the encrypted data</param>
      <param name="publicKeyStream">Public key to encrypt with</param>
      <param name="passphrase">Additional passphrase that can be used to decrypt the file instead of using the private key</param>
      <param name="outputStream">Destination for the encrypted output</param>
      <param name="asciiArmor">Should the output be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added</param>
      <example>
            The example below shows how to OpenPGP encrypt a stream with both public key and a password
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
              public void Demo() {
                // create an instance of the library
                PGPLib pgp = new PGPLib();
                
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
               Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
               Stream publicKeyStream = File.OpenRead(@"DataFiles\public.asc");
               Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
            
               pgp.EncryptStreamPBE(inputStream,
                                    "data.txt",
                                    publicKeyStream,
                                    "alternative_password",
                                    encryptedStream, 
                                    asciiArmor, 
                                    withIntegrityCheck);	
                                    
                inputStream.Close();
                publicKeyStream.Close();
                encryptedStream.Close();
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
               ' create an instance of the library
               Dim pgp As New PGPLib()
               
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
               Dim publicKeyStream As Stream = File.OpenRead("DataFiles\public.asc")
               Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            
               pgp.EncryptStreamPBE(inputStream, _
                                    "my_file.txt", _
                                    publicKeyStream, _
                                    "alternative_password", _
                                    encryptedStream, _
                                    asciiArmor, _
                                    withIntegrityCheck)
                                    
                inputStream.Close()
                publicKeyStream.Close()
                encryptedStream.Close()
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStreamPBE(System.IO.Stream,System.String,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            Encrypts a stream with a password.
            <para>
            Example GnuPG command:
            </para>
            gpg -c -e [dataFileName]
            </summary>
      <remarks>
            The caller has the obligation to close the data stream.
            <para>
            The caller has the obligation to close the output stream.
            </para></remarks>
      <param name="dataStream">Stream source to be encrypted</param>
      <param name="fileNameLabel">File name label to be associated with the encrypted data</param>
      <param name="passphrase">Pass phrase used to encrypt/decrypt the file</param>
      <param name="outputStream">Destination for the encrypted output</param>
      <param name="asciiArmor">Should the output be in ASCII armoured format</param>
      <example>
            The example below shows how to OpenPGP encrypt a stream with a password
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPBEDemo {
              public void Demo() {
                // create an instance of the library
                PGPLib pgp = new PGPLib();
                
                bool asciiArmor = true;
              
                Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
            
                pgp.EncryptStreamPBE(inputStream,
                                    "data.txt",
                                    "encryption password",
                                    encryptedStream, 
                                    asciiArmor)
                                    
                inputStream.Close();
                encryptedStream.Close();
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
               ' create an instance of the library
               Dim pgp As New PGPLib()
               
               Dim asciiArmor As Boolean = True
            
               Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
               Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            
               pgp.EncryptStreamPBE(inputStream, _
                                    "my_file.txt", _
                                    "encryption password", _
                                    encryptedStream, _
                                    asciiArmor)
                                    
                inputStream.Close()
                encryptedStream.Close()
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStreamPBE(System.IO.Stream,System.String,System.String,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a stream with a password.
            <para>
            Example GnuPG command:
            </para>
            gpg -c -e [dataFileName]
            </summary>
      <remarks>
            The caller has the obligation to close the data stream.
            <para>
            The caller has the obligation to close the output stream.
            </para></remarks>
      <param name="dataStream">Stream source to be encrypted</param>
      <param name="fileNameLabel">File name label to be associated with the encrypted data</param>
      <param name="passphrase">Pass phrase used to encrypt/decrypt the file</param>
      <param name="outputStream">Destination for the encrypted output</param>
      <param name="asciiArmor">Should the output be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added</param>
      <example>
            The example below shows how to OpenPGP encrypt a stream with a password
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPBEDemo {
              public void Demo() {
                // create an instance of the library
                PGPLib pgp = new PGPLib();
                
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
               Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
               Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
            
               pgp.EncryptStreamPBE(inputStream,
                                    "data.txt",
                                    "encryption password",
                                    encryptedStream, 
                                    asciiArmor, 
                                    withIntegrityCheck);	
                                    
                inputStream.Close();
                encryptedStream.Close();
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
               ' create an instance of the library
               Dim pgp As New PGPLib()
               
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
               Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            
               pgp.EncryptStreamPBE(inputStream, _
                                    "my_file.txt", _
                                    "encryption password", _
                                    encryptedStream, _
                                    asciiArmor, _
                                    withIntegrityCheck)
                                    
                inputStream.Close()
                encryptedStream.Close()
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStreamPBE(System.IO.Stream,System.IO.Stream,System.String,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a stream with a public key and a passphrase.
            <para>
            The passphrase can be used to decrypt the file if the corresponding private key is lost.
            </para><para>
            Example GnuPG command:
            </para>
            gpg -r [public key user id] -c -e [dataFileName]
            </summary>
      <remarks>
            The encrypted data is labeled "for your eyes only"
            <para>
            The caller has the obligation to close the public key stream.
            </para><para>
            The caller has the obligation to close the data stream.
            </para>
            The caller has the obligation to close the output stream.
            </remarks>
      <param name="dataStream">Stream source to be encrypted</param>
      <param name="publicKeyStream">Public key to encrypt with</param>
      <param name="passphrase">Additional passphrase that can be used to decrypt the file instead of using the private key</param>
      <param name="outputStream">Destination for the encrypted output</param>
      <param name="asciiArmor">Should the output be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added</param>
      <example>
            The example below shows how to OpenPGP encrypt a stream with both public key and a password
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
              public void Demo() {
               // create an instance of the library
               PGPLib pgp = new PGPLib();
                
               bool asciiArmor = true;
               bool withIntegrityCheck = true;
              
               Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
               Stream publicKeyStream = File.OpenRead(@"DataFiles\public.asc");
               Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
            
               pgp.EncryptStreamPBE(inputStream,
                                    publicKeyStream,
                                    "alternative_password",
                                    encryptedStream, 
                                    asciiArmor, 
                                    withIntegrityCheck);	
                                    
                inputStream.Close();
                publicKeyStream.Close();
                encryptedStream.Close();
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
               ' create an instance of the library
               Dim pgp As New PGPLib()
               
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
               Dim publicKeyStream As Stream = File.OpenRead("DataFiles\public.asc")
               Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            
               pgp.EncryptStreamPBE(inputStream, _
                                    "publicKeyStream, _
                                    "alternative_password", _
                                    encryptedStream, _
                                    asciiArmor, _
                                    withIntegrityCheck)
                                    
                inputStream.Close()
                publicKeyStream.Close()
                encryptedStream.Close()
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFilePBE(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Encrypts a file only with a passphrase.
            <para>
            The same passphrase is used to decrypt the file.
            </para>
            Equivalent GnuPG command:
            <para>
            gpg -c -e [dataFileName]
            </para></summary>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="passphrase">Passphrase used to encrypt the file</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should file be in ASCII armoured format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <example>
            This example shows how to encrypt a file only with a password.
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPasswordBasedDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
              
                pgp.EncryptFilePBE(@"DataFiles\INPUT.txt",
                                        "private key password",
                                        @"DataFiles\OUTPUT.pgp", 
                                        asciiArmor);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptPasswordBasedDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
            
               pgp.EncryptFilePBE("DataFiles\INPUT.txt", _
                                   "private key password", _
                                   "DataFiles\OUTPUT.pgp", _
                                   asciiArmor)
              End Sub
            End Class
            </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFilePBE(System.IO.FileInfo,System.String,System.IO.FileInfo,System.Boolean)">
      <summary>
            Encrypts a file only with a password.
            <para>
            The same password is used to decrypt the file.
            </para><para>
            Equivalent GnuPG command:</para>
            gpg -c -e [dataFileName]
            </summary>
      <param name="dataFile">File to be encrypted</param>
      <param name="passphrase">Passphrase used to encrypt the file</param>
      <param name="outputFile">File of the output encrypted file</param>
      <param name="asciiArmor">Should file be in ASCII armoured format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <example>
            This example shows how to encrypt a file only with a password.
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPasswordBasedDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
              
                pgp.EncryptFilePBE(new FileInfo(@"DataFiles\INPUT.txt"),
                                   "private key password",
                                   new FileInfo(@"DataFiles\OUTPUT.pgp"), 
                                   asciiArmor);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptPasswordBasedDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
            
               pgp.EncryptFilePBE(New FileInfo("DataFiles\INPUT.txt"), _
                                   "private key password", _
                                   New FileInfo("DataFiles\OUTPUT.pgp"), _
                                   asciiArmor)
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFilePBE(System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a file only with a password.
            <para>
            The same password is used to decrypt the file.
            </para><para>
            Equivalent GnuPG command:</para>
            gpg -c -e [dataFileName]
            </summary>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="passphrase">Passphrase used to encrypt the file</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should file be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <example>
            This example shows how to encrypt a file only with a password.
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPasswordBasedDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
                pgp.EncryptFilePBE(@"DataFiles\INPUT.txt",
                                        "private key password",
                                        @"DataFiles\OUTPUT.pgp", 
                                        asciiArmor, 
                                        withIntegrityCheck);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptPasswordBasedDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               pgp.EncryptFilePBE("DataFiles\INPUT.txt", _
                                   "private key password", _
                                   "DataFiles\OUTPUT.pgp", _
                                   asciiArmor, _
                                   withIntegrityCheck)
              End Sub
            End Class
            </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFilePBE(System.IO.FileInfo,System.String,System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a file only with a password.
            <para>
            The same password is used to decrypt the file.
            </para><para>
            Equivalent GnuPG command:</para>
            gpg -c -e [dataFileName]
            </summary>
      <param name="dataFile">File to be encrypted</param>
      <param name="passphrase">Passphrase used to encrypt the file</param>
      <param name="outputFile">File of the output encrypted file</param>
      <param name="asciiArmor">Should file be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <example>
            This example shows how to encrypt a file only with a password.
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPasswordBasedDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
                pgp.EncryptFilePBE(new FileInfo(@"DataFiles\INPUT.txt"),
                                   "private key password",
                                   new FileInfo(@"DataFiles\OUTPUT.pgp"), 
                                   asciiArmor, 
                                   withIntegrityCheck);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptPasswordBasedDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               pgp.EncryptFilePBE(New FileInfo("DataFiles\INPUT.txt"), _
                                   "private key password", _
                                   New FileInfo("DataFiles\OUTPUT.pgp"), _
                                   asciiArmor, _
                                   withIntegrityCheck)
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if one or more of the FileInfo parameters are <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFolderPBE(System.IO.FileInfo,System.String,System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
            Encrypts a whole folder with it's contents only with a password.
            <para>
            The same password is used to decrypt the file.
            </para></summary>
      <remarks>
            This format requires that your recipient use PGP Desktop 9 or newer in order to decrypt the file.
            </remarks>
      <param name="folder">Folder to be encrypted</param>
      <param name="passphrase">Password used to encrypt the file</param>
      <param name="outputFile">File of the output encrypted file</param>
      <param name="asciiArmor">Should file be in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <example>
            This example shows how to encrypt a whole folder only with a password.
            <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptPasswordBasedDemo {
              public void Demo() {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
                pgp.EncryptFolderPBE(new FileInfo(@"c:\DataFiles"),
                                   "encryption_password",
                                   new FileInfo(@"DataFiles\OUTPUT.pgp"), 
                                   asciiArmor, 
                                   withIntegrityCheck);	
             }
            }	
            </code><code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptPasswordBasedDemo
             Public Sub Demo()
               Dim pgp As New PGPLib()
               Dim asciiArmor As Boolean = True
               Dim withIntegrityCheck As Boolean = False
            
               pgp.EncryptFolderPBE(New FileInfo("c:\DataFiles"), _
                                   "encryption_password", _
                                   New FileInfo("DataFiles\OUTPUT.pgp"), _
                                   asciiArmor, _
                                   withIntegrityCheck)
              End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if one or more of the FileInfo parameters are <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo)">
      <summary>
             OpenPGP encrypts given file using the first available public OpenPGP key from a key ring file
             </summary>
      <remarks>
             The encrypted file is in binary format with no integrity check, this is the most compatible format
             with old versions of the original PGP program.
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataFile">File to be encrypted </param>
      <param name="publicKeyFile">Recipient public key file </param>
      <param name="outputFile">Output encrypted file</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptDemo {
             		public void Demo() {
             			PGPLib pgp = new PGPLib();
                     	FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                     	FileInfo publicKey = new FileInfo(@"DataFiles\public.asc");
                     	FileInfo encryptedFile = new FileInfo(@"DataFiles\OUTPUT.pgp");
                     	
             			pgp.EncryptFile(inputFile, publicKey, encryptedFile);	
             		}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptDemo
             	Public Sub Demo()
             		Dim pgp As New PGPLib()
             		Dim inputFile As New FileInfo("DataFiles\INPUT.txt")
             		Dim publicKey As New FileInfo("DataFiles\public.asc")
             		Dim encryptedFile As New FileInfo("DataFiles\OUTPUT.pgp")
             		
                     pgp.EncryptFile(inputFile, publicKey, encryptedFile)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if one or more of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.String,System.String,System.Boolean)">
      <summary>
            OpenPGP encrypts given file using the first available public PGP key from a key ring file
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFile">File to be encrypted </param>
      <param name="publicKeyFile">Recipient public key file </param>
      <param name="outputFile">Output encrypted file</param>
      <param name="asciiArmor">If <see langword="true" /> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	string inputFile = @"DataFiles\INPUT.txt";
                    	string publicKey = @"DataFiles\public.asc";
                    	string encryptedFile = @"DataFiles\OUTPUT.pgp";
                    	
                        bool asciiArmor = true;
                        
            			pgp.EncryptFile(inputFile, publicKey, encryptedFile, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputFile As String = "DataFiles\INPUT.txt"
            		Dim publicKey As String = "DataFiles\public.asc"
            		Dim encryptedFile As String = "DataFiles\OUTPUT.pgp"
            		
                    Dim asciiArmor As Boolean = True
            		
                    pgp.EncryptFile(inputFile, publicKey, encryptedFile, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
      <summary>
            OpenPGP encrypts given file using the first available public OpenPGP key from a key ring file
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFile">File to be encrypted </param>
      <param name="publicKeyFile">Recipient public key file </param>
      <param name="outputFile">Output encrypted file</param>
      <param name="asciiArmor">If <see langword="true" /> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                    	FileInfo publicKey = new FileInfo(@"DataFiles\public.asc");
                    	FileInfo encryptedFile = new FileInfo(@"DataFiles\OUTPUT.pgp");
                    	
                        bool asciiArmor = true;
                        
            			pgp.EncryptFile(inputFile, publicKey, encryptedFile, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		Dim inputFile As New FileInfo("DataFiles\INPUT.txt")
            		Dim publicKey As New FileInfo("DataFiles\public.asc")
            		Dim encryptedFile As New FileInfo("DataFiles\OUTPUT.pgp")
            		
                    Dim asciiArmor As Boolean = True
                    
                    pgp.EncryptFile(inputFile, publicKey, encryptedFile, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.String,System.String)">
      <summary>
            OpenPGP encrypts given file using the first available public PGP key from a key ring file
            </summary>
      <remarks>
            The encrypted file is in binary format with no integrity check, this is the most compatible format
            with old versions of the original PGP program.
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataFile">File to be encrypted </param>
      <param name="publicKeyFile">Recipient public key file </param>
      <param name="outputFile">Output encrypted file</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
                    	
                        string inputFile = @"DataFiles\INPUT.txt";
                    	string publicKey = @"DataFiles\public.asc";
                    	string encryptedFile = @"DataFiles\OUTPUT.pgp";
                    	
            			pgp.EncryptFile(inputFile, publicKey, encryptedFile, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputFile As String = "DataFiles\INPUT.txt"
            		Dim publicKey As String = "DataFiles\public.asc"
            		Dim encryptedFile As String = "DataFiles\OUTPUT.pgp"
            		
                    pgp.EncryptFile(inputFile, publicKey, encryptedFile, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
            PGP Encrypts given file using the first available Public PGP key from a Key ring file
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFile">File to be encrypted </param>
      <param name="publicKeyFile">Public Key ring file</param>
      <param name="outputFile">Output file (encrypted)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptDemo 
            {
            	public void Demo() 
            	{
            		PGPLib pgp = new PGPLib();
                   	
                    bool asciiArmor = true;
                   	bool withIntegrityCheck = true;
                   	
                   	FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                   	FileInfo publicKey = new FileInfo(@"DataFiles\public.asc");
                   	FileInfo encryptedFile = new FileInfo(@"DataFiles\OUTPUT.pgp");
                    	
            		pgp.EncryptFile(inputFile,
                                    publicKey,
                                    encryptedFile, 
                  	                asciiArmor, 
                   	                withIntegrityCheck);	
            	}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptDemo
             Public Sub Demo()
                 Dim pgp As New PGPLib()
            
                 Dim asciiArmor As Boolean = True
                 Dim withIntegrityCheck As Boolean = False
            
                Dim inputFile As New FileInfo("DataFiles\INPUT.txt");
                Dim publicKey As New FileInfo("DataFiles\public.asc")
                Dim encryptedFile As New FileInfo("DataFiles\OUTPUT.pgp")
            
                pgp.EncryptFile(inputFile, _
            					publicKey, _
            					encryptedFile, _
            					asciiArmor, _
            					withIntegrityCheck)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFiles(System.IO.FileInfo[],System.IO.FileInfo[],System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
             Encrypts multiple files into a single OpenPGP archive, using one ore more recipient public keys. 
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFiles">File(s) to be encrypted </param>
      <param name="publicKeyFiles">Public key ring file(s) </param>
      <param name="outputFile">Output file (encrypted)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptDemo 
             {
              public void Demo() 
             {
                PGPLib pgp = new PGPLib();
             
                     bool asciiArmor = true;
                     bool withIntegrityCheck = true;
              
                     // files to be encrypted
                     FileInfo[] inputFiles =
                        new FileInfo[] {new FileInfo(@"c:\file1.txt"),
                                      new FileInfo(@"c:\file2.dat"),
                                      new FileInfo(@"c:\file3.xls")};
            
                     // one or more public keys to encrypt with
                     FileInfo[] recipientPublicKeys =
                        new FileInfo[] {new FileInfo(@"c:\recipient_1_key.asc"), 
                                      new FileInfo(@"c:\recipient_2_key.asc"), 
                                      new FileInfo(@"c:\recipient_3_key.asc")};
            
                     // encryption output
                     FileInfo encryptedOutputFile = new FileInfo(@"c:\OUTPUT.pgp");
             
                     pgp.EncryptFiles(inputFiles,
                                         recipientPublicKeys,
                                         encryptedOutputFile, 
                     	                asciiArmor, 
                     	                withIntegrityCheck);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptDemo
               Public Sub Demo()
                    Dim pgp As New PGPLib()
              
                    Dim asciiArmor As Boolean = True
                    Dim withIntegrityCheck As Boolean = False
             
                     '-- files to be encrypted
                     Dim inputFiles As FileInfo() = _
                        New FileInfo() {New FileInfo("c:\file1.txt"), _
                                      New FileInfo("c:\file2.dat"), _
                                      New FileInfo("c:\file3.xls")}
            
                     '-- one or more public keys to encrypt with
                     Dim recipientPublicKeys As FileInfo() = _
                        New FileInfo() {New FileInfo("c:\recipient_1_key.asc"), _
                                      New FileInfo("c:\recipient_2_key.asc"), _
                                      New FileInfo("c:\recipient_3_key.asc")}
            
                     '-- encryption output
                      Dim encryptedOutputFile As New FileInfo("c:\OUTPUT.pgp")
             
                     pgp.EncryptFiles(inputFiles, _
              						recipientPublicKeys, _
             						encryptedOutputFile, _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentException">If the array with files to be encrypted is empty</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If one of the supplied public keys is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If one of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If one of the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFiles(System.String[],System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
             Encrypts multiple files into a single OpenPGP archive, using one ore more recipient public keys. 
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFiles">File(s) to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFiles">Public key ring file(s) (absolute or relative path)</param>
      <param name="outputFileName">Output encrypted file name(absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptDemo {
              public void Demo() {
                     PGPLib pgp = new PGPLib();
             
                     bool asciiArmor = true;
                     bool withIntegrityCheck = true;
             
                     // files to be encrypted
                     string[] inputFiles =
                        new string[] {@"c:\file1.txt",
                                      @"c:\file2.dat",
                                      @"c:\file3.xls"};
            
                     // one or more public keys to encrypt with
                     string[] recipientPublicKeys =
                        new string[] {@"c:\recipient_1_key.asc", 
                                      @"c:\recipient_2_key.asc", 
                                      @"c:\recipient_3_key.asc"};
            
                     // encryption output
                    string encryptedOutputFile = @"c:\OUTPUT.pgp";
             
                     pgp.EncryptFiles(inputFiles,
                                      recipientPublicKeys,
                                      encryptedOutputFile, 
                                      asciiArmor, 
                                      withIntegrityCheck);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptDemo
              Public Sub Demo()
                  Dim pgp As New PGPLib()
             
                  Dim asciiArmor As Boolean = True
                  Dim withIntegrityCheck As Boolean = False
             
                     '-- files to be encrypted
                     Dim inputFiles As String() = _
                        New String() {"c:\file1.txt", _
                                      "c:\file2.dat", _
                                      "c:\file3.xls"}
            
                     '-- one or more public keys to encrypt with
                     Dim recipientPublicKeys As String() = _
                        New String() {"c:\recipient_1_key.asc", _
                                      "c:\recipient_2_key.asc", _
                                      "c:\recipient_3_key.asc"}
            
                     '-- encryption output
                    Dim encryptedOutputFile As String = "c:\OUTPUT.pgp"
             
                     pgp.EncryptFiles(inputFiles, _
             						recipientPublicKeys, _
             						encryptedOutputFile, _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentException">If the array with files to be encrypted is empty</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If one of the supplied public keys is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If one of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If one of the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFiles(System.String[],DidiSoft.Pgp.KeyStore,System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
             Encrypts multiple files into a single OpenPGP archive, using one ore more recipient public keys. 
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFiles">File(s) to be encrypted (absolute or relative path)</param>
      <param name="keyStore">KeyStore containing the public keys of the recipients</param>
      <param name="recipientUserIds">User ID's  or the hexadecimal Key ID's of the recipients public keys</param>
      <param name="outputFileName">Output encrypted file name(absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptDemo {
              public void Demo() {
                     PGPLib pgp = new PGPLib();
             
                     // Should the output file be in ASCII armoured format
                     bool asciiArmor = true;
                     // Should integrity check information be added to the encrypted file
                     bool withIntegrityCheck = true;
             
                     // files to be encrypted
                     string[] inputFiles =
                        new string[] {@"c:\file1.txt",
                                      @"c:\file2.dat",
                                      @"c:\file3.xls"};
            
                     // one or more public keys to encrypt with
                     string[] recipientUserIds =
                        new string[] {"recipient@company1.com", 
                                      "recipient@company2.com", 
                                      "recipient@company3.com"};
            
                    KeyStore ks = KeyStore.OpenFile(@"c:\my.keystore", "my password"); 
             
                    // encryption output
                    string encryptedOutputFile = @"c:\OUTPUT.pgp";
             
                     pgp.EncryptFiles(inputFiles,
                                      ks,
                                      recipientUserIds,
                                      encryptedOutputFile, 
                                      asciiArmor, 
                                      withIntegrityCheck);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptDemo
              Public Sub Demo()
                  Dim pgp As New PGPLib()
             
                  ' Should file be in ASCII armoured format
                  Dim asciiArmor As Boolean = True
                  ' Should integrity check information be added to the encrypted file
                  Dim withIntegrityCheck As Boolean = False
             
                  '-- files to be encrypted
                  Dim inputFiles As String() = _
                        New String() {"c:\file1.txt", _
                                      "c:\file2.dat", _
                                      "c:\file3.xls"}
            
                  '-- one or more public keys to encrypt with
                  Dim recipientUserIds As String() = _
                        New String() {"recipient@company1.com", _
                                      "recipient@company2.com", _
                                      "recipient@company3.com"}
            
                  KeyStore ks = KeyStore.OpenFile("c:\my.keystore", "my password")
             
                  '-- encryption output
                  Dim encryptedOutputFile As String = "c:\OUTPUT.pgp"
             
                  pgp.EncryptFiles(inputFiles, _
                                 ks, _
             					recipientUserIds, _
             					encryptedOutputFile, _
             					asciiArmor, _
             					withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentException">If the array with files to be encrypted is empty</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If one of the supplied public keys is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If one of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If one of the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFiles(System.String[],DidiSoft.Pgp.KeyStore,System.Int64[],System.String,System.Boolean,System.Boolean)">
      <summary>
             Encrypts multiple files into a single OpenPGP archive, using one ore more recipient public keys. 
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFiles">File(s) to be encrypted (absolute or relative path)</param>
      <param name="keyStore">KeyStore containing the public keys of the recipients</param>
      <param name="recipientKeyIds">Key ID's of the recipients public keys</param>
      <param name="outputFileName">Output encrypted file name(absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptDemo {
              public void Demo() {
                     PGPLib pgp = new PGPLib();
             
                     // Should the output file be in ASCII armoured format
                     bool asciiArmor = true;
                     // Should integrity check information be added to the encrypted file
                     bool withIntegrityCheck = true;
             
                     // files to be encrypted
                     string[] inputFiles =
                        new string[] {@"c:\file1.txt",
                                      @"c:\file2.dat",
                                      @"c:\file3.xls"};
            
                    KeyStore ks = KeyStore.OpenFile(@"c:\my.keystore", "my password"); 
             
                    // one or more public keys to encrypt with
                    long[] recipientKeyIds =
                        new long[] {ks.GetKeyIdForKeyIdHex("312C8210"), 
                                      ks.GetKeyIdForKeyIdHex("30DDBE94"), 
                                      ks.GetKeyIdForKeyIdHex("74BB3286")};
            
                    // encryption output
                    string encryptedOutputFile = @"c:\OUTPUT.pgp";
             
                     pgp.EncryptFiles(inputFiles,
                                      ks,
                                      recipientKeyIds,
                                      encryptedOutputFile, 
                                      asciiArmor, 
                                      withIntegrityCheck);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptDemo
              Public Sub Demo()
                  Dim pgp As New PGPLib()
             
                  ' Should file be in ASCII armoured format
                  Dim asciiArmor As Boolean = True
                  ' Should integrity check information be added to the encrypted file
                  Dim withIntegrityCheck As Boolean = False
             
                  '-- files to be encrypted
                  Dim inputFiles As String() = _
                        New String() {"c:\file1.txt", _
                                      "c:\file2.dat", _
                                      "c:\file3.xls"}
            
                  KeyStore ks = KeyStore.OpenFile("c:\my.keystore", "my password")
                  
                  '-- one or more public keys to encrypt with
                  Dim recipientKeyIds As Long() = _
                        New Long() {ks.GetKeyIdForKeyIdHex("312C8210"), _
                                      ks.GetKeyIdForKeyIdHex("30DDBE94"), _
                                      ks.GetKeyIdForKeyIdHex("74BB3286")}
                                      
                  '-- encryption output
                  Dim encryptedOutputFile As String = "c:\OUTPUT.pgp"
             
                  pgp.EncryptFiles(inputFiles, _
                                 ks, _
             					recipientKeyIds, _
             					encryptedOutputFile, _
             					asciiArmor, _
             					withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentException">If the array with files to be encrypted is empty</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If one of the supplied public keys is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If one of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If one of the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Encrypts given file using the first available public PGP key from a Key ring file
             </summary>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFile">Public key location (absolute or relative path) or as ASCII armour stream</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptDemo 
             {
              public void Demo() 
              {
                PGPLib pgp = new PGPLib();
                bool asciiArmor = true;
                bool withIntegrityCheck = true;
              
                pgp.EncryptFile(@"c:\INPUT.txt",
                                     @"c:\public_key.asc",
                                     @"c:\OUTPUT.pgp", 
                                     asciiArmor, 
                                     withIntegrityCheck);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptDemo
             	Public Sub Demo()
                   Dim pgp As New PGPLib()
                   Dim asciiArmor As Boolean = True
                   Dim withIntegrityCheck As Boolean = False
             
                     pgp.EncryptFile("c:\INPUT.txt", _
             						"c:\public_key.asc", _
             						"c:\OUTPUT.pgp", _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFolder(System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP Encrypts given folder with its subfolders and files into a PGP Zip archive
             </summary>
      <remarks>
             This feature is compatible with PGP Desktop version 9 and above.
             </remarks>
      <param name="folderName">Folder to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFileName">Key ring file name (absolute or relative path)</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptFolderDemo 
             {
             	public void Demo() 
             	{
             		PGPLib pgp = new PGPLib();
                 	bool asciiArmor = true;
                     	
             		pgp.EncryptFolder(@"c:\DataFiles",
                                    @"c:\public_key.asc",
                                    @"c:\OUTPUT.pgp", 
                 	                  asciiArmor);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptFolderDemo
              Public Sub Demo()
                  Dim pgp As New PGPLib()
                  Dim asciiArmor As Boolean = True
             
                  pgp.EncryptFolder("c:\DataFiles", _
             						"c:\public_key.asc", _
             						"c:\OUTPUT.pgp", _
             						asciiArmor)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFolder(System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Encrypts given folder with its subfolders and files into a PGP Zip archive
             </summary>
      <remarks>
             This feature is compatible with PGP Desktop version 9 and above.
             </remarks>
      <param name="folderName">Folder to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFileName">Key ring file name (absolute or relative path)</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptFolderDemo 
             {
             	public void Demo() 
             	{
             		PGPLib pgp = new PGPLib();
                 	bool asciiArmor = true;
                 	bool withIntegrityCheck = true;
                     	
             		pgp.EncryptFolder(@"c:\DataFiles",
                                    @"c:\public_key.asc",
                                    @"c:\OUTPUT.pgp", 
                 	                  asciiArmor, 
                     	              withIntegrityCheck);	
             	}
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptFolderDemo
              Public Sub Demo()
                  Dim pgp As New PGPLib()
                  Dim asciiArmor As Boolean = True
                  Dim withIntegrityCheck As Boolean = False
             
                  pgp.EncryptFolder("c:\DataFiles", _
             						"c:\public_key.asc", _
             						"c:\OUTPUT.pgp", _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFolder(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
      <summary>
             OpenPGP Encrypts given folder with its subfolders and files into a PGP Zip archive
             </summary>
      <remarks>
             This feature is compatible with PGP Desktop version 9 and above.
             </remarks>
      <param name="folder">Folder to be encrypted</param>
      <param name="publicKeyFile">Public key file name</param>
      <param name="outputFile">Output encrypted file</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptFolderDemo 
             {
             public void Demo() 
             {
                 PGPLib pgp = new PGPLib();
                 bool asciiArmor = true;
                     
                 pgp.EncryptFolder(new FileInfo(@"c:\DataFiles"),
                                    new FileInfo(@"c:\public_key.asc"),
                                    new FileInfo(@"c:\OUTPUT.pgp"), 
                                    asciiArmor);	
               } 
             }
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptFolderDemo
              Public Sub Demo()
                 Dim pgp As New PGPLib()
                 Dim asciiArmor As Boolean = True
             
                  pgp.EncryptFolder(New FileInfo("c:\DataFiles"), _
             						New FileInfo("c:\public_key.asc"), _
             						New FileInfo("c:\OUTPUT.pgp"), _
             						asciiArmor)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFolder(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Encrypts given folder with its subfolders and files into a PGP Zip archive
             </summary>
      <remarks>
             This feature is compatible with PGP Desktop version 9 and above.
             </remarks>
      <param name="folder">Folder to be encrypted</param>
      <param name="publicKeyFile">Public key file name</param>
      <param name="outputFile">Output encrypted file</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptFolderDemo 
             {
             public void Demo() 
             {
                 PGPLib pgp = new PGPLib();
                 bool asciiArmor = true;
                 bool withIntegrityCheck = true;
                     
                 pgp.EncryptFolder(new FileInfo(@"c:\DataFiles"),
                                    new FileInfo(@"c:\public_key.asc"),
                                    new FileInfo(@"c:\OUTPUT.pgp"), 
                                    asciiArmor, 
                                   withIntegrityCheck);	
               } 
             }
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptFolderDemo
              Public Sub Demo()
                 Dim pgp As New PGPLib()
                 Dim asciiArmor As Boolean = True
                 Dim withIntegrityCheck As Boolean = False
             
                  pgp.EncryptFolder(New FileInfo("c:\DataFiles"), _
             						New FileInfo("c:\public_key.asc"), _
             						New FileInfo("c:\OUTPUT.pgp"), _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
             PGP Encrypts a file for multiple recipients. 
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="publicKeyFiles">Array of paths to PGP public key files (absolute or relative paths), that will be used for the encryption</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptForMultiRecipientsDemo {
               public void Demo() {
                  PGPLib pgp = new PGPLib();
                  // ASCII armor or binary
                  bool asciiArmor = true;
                  // append integrity protection check
                  bool withIntegrityCheck = false;
                  
                  string[] recipientsPublicKeys = 
                                         {@"c:\recipient_1_key.asc",
                                          @"c:\recipient_2_key.asc",
                                          @"c:\recipient_3_key.asc"};
             
                  pgp.EncryptFile(@"c:\INPUT.txt",
                                  recipientsPublicKeys,
                                  @"c:\OUTPUT.pgp", 
                                  asciiArmor, 
                                  withIntegrityCheck);	
               }
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptForMultiRecipientsDemo
               Public Sub Demo()
                 Dim pgp As New PGPLib()
                 ' ASCII armor or binary
                 Dim asciiArmor As Boolean = True
                 ' append integrity protection check
                 Dim withIntegrityCheck As Boolean = False
             
                  Dim recipientsPublicKeys As String() = _
                      New String() {"c:\recipient_1_key.asc", _
                                    "c:\recipient_2_key.asc", _
                                    "c:\recipient_3_key.asc"}
             
                  pgp.EncryptFile("c:\INPUT.txt", _
             						recipientsPublicKeys, _
             						"c:\OUTPUT.pgp", _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If one of the supplied public keys is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If one of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If one of the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.IO.Stream[],System.String,System.Boolean,System.Boolean)">
      <summary>
             PGP Encrypts a file for multiple recipients. 
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path)</param>
      <param name="publicKeysStreams">Array of public keys passed as input Streams, that will be used for the encryption</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <example>
        <code lang="C#">
             using System.IO;
             using DidiSoft.Pgp; 
                
             class EncryptForMultiRecipientsDemo {
               public void Demo() {
                  PGPLib pgp = new PGPLib();
                  
                  bool asciiArmor = true;
                  bool withIntegrityCheck = false;
                  
                  FileStream file1 = File.OpenRead(@"c:\recipient_1_key.asc");
                  FileStream file2 = File.OpenRead(@"c:\recipient_2_key.asc");
                  
                  Stream[] recipientsPublicKeys = {file1, file2};
                  
                  pgp.EncryptFile(@"c:\INPUT.txt",
                                  recipientsPublicKeys,
                                  @"c:\OUTPUT.pgp", 
                                  asciiArmor, 
                                  withIntegrityCheck);	
               }
             }	
             </code>
        <code lang="VB">
             Imports System.IO
             Imports DidiSoft.Pgp
             
             Class EncryptForMultiRecipientsDemo
               Public Sub Demo()
                 Dim pgp As New PGPLib()
                 
                 Dim asciiArmor As Boolean = True
                 Dim withIntegrityCheck As Boolean = False
             
                 Dim file1 As FileStream = File.OpenRead(PublicKey.FullName)
                 Dim file2 As FileStream = File.OpenRead(PublicKey2.FullName)
                 
                 Dim recipientsPublicKeys As Stream() = {file1, file2}
             
                 pgp.EncryptFile("c:\INPUT.txt", _
             						recipientsPublicKeys, _
             						"c:\OUTPUT.pgp", _
             						asciiArmor, _
             						withIntegrityCheck)
             	End Sub
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If one of the supplied public keys is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If one of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If one of the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,System.IO.Stream,System.String,System.Boolean,System.Boolean)">
      <summary>
            PGP Encrypts given file using the first available Public key from a Key ring input stream
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path) </param>
      <param name="publicKeyStream">Input stream from the Public key</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII Armored mode. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP encrypts given file using a public key from a Key store.
             <para>
             If more than one key exists with the specified userId, the first one is used.
             </para></summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="userId">User Id or the hexadecimal Key ID or the recipient's key.<para>
                                  The first Public key with this <b>userId</b> located in <b>keyStore</b> is used for encryption.</para></param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII Armored mode. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if no public key exists with the specified keyId</exception>
      <example>
        <code lang="C#">
              using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreEncryptFile
            	{
                  public static void Demo()
                  {
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");
                     PGPLib pgp = new PGPLib();
            
                     String publicKeyUserId = "support@didisoft.com";
                     bool asciiArmor = false; // binary output
                     bool integrityCheck = false; // no integrity check
                     pgp.EncryptFile(@"DataFiles\INPUT.txt", 
                                     keyStore, 
                                     publicKeyUserId, 
                                     @"DataFiles\OUTPUT.pgp", 
                                     asciiArmor, 
                                     integrityCheck);			
                  }
             }
             </code>
        <code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
            	Public Class KeyStoreEncryptFile
            		Public Shared Sub Demo()
            			Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
            			Dim pgp As New PGPLib()
            
            			Dim publicKeyUserId As String = "support@didisoft.com"
            			Dim asciiArmor As Boolean = False ' binary output
            			Dim integrityCheck As Boolean = False ' no integrity check
            			pgp.EncryptFile("DataFiles\INPUT.txt", _
            			                keyStore, _
            			                publicKeyUserId, _
            			                "DataFiles\OUTPUT.pgp", _
            			                asciiArmor, _
            			                integrityCheck)
            		End Sub
            	End Class
             </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the specified public key is not found</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
            PGP encrypts given file using a public key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
        <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="encryptionKeysUserIds">Array of User Id's for all the public encryption keys</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the specified public key is not found</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Boolean,System.Boolean)">
      <summary>
            PGP encrypts given file using a public key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
        <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataFileName">File name to be encrypted (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="keyId">Key Id of the recipient public key</param>
      <param name="outputFileName">File name of the Output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">Should the encrypted file be in ASCII armoured format. If <see langword="false" /> the encrypted file is in binary format.</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the encrypted file.</param>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the specified public key is not found</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,System.IO.FileInfo)">
      <summary>
             Encrypts a String message in OpenPGP ASCII armoured format.
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="stringToEncrypt">String to be encrypted </param>
      <param name="publicKeyFile">Public key File</param>
      <returns>stringToEncrypt OpenPGP encrypted</returns>
      <example>
        <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             class EncryptString
             {  
            		public static String Demo() {
              		PGPLib pgp = new PGPLib();
            			String encryptedString = 
            			    pgp.EncryptString("Hello World", 
            			                      new FileInfo(@"DataFiles\public_key.asc"));
            			
                     return encryptedString;            
            		}   
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Class EncryptString
                 Public Shared Function Demo() As String
                    Dim pgp As New PGPLib()
                    Dim encryptedString As String = _
                     pgp.EncryptString("Hello World", _
                                       New FileInfo("DataFiles\public_key.asc"))
                        
                    Return encryptedString
             	End Function
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if the <see cref="T:System.IO.FileInfo" /> parameter is <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,System.IO.FileInfo[])">
      <summary>
             Encrypts a String message in OpenPGP ASCII armoured format for multiple recipients.
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="stringToEncrypt">String to be encrypted </param>
      <param name="publicKeyFiles">Array of recipients public key files</param>
      <returns>stringToEncrypt OpenPGP encrypted</returns>
      <example>
        <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             class EncryptString
             {  
                   public static String Demo() 
                   PGPLib pgp = new PGPLib();
              
                    FileInfo[] publicKeyFiles = {new FileInfo(@"DataFiles\public_key1.asc"),
                                                  new FileInfo(@"DataFiles\public_key2.asc")};
             
                     String encryptedString = 
                           pgp.EncryptString("Hello World", 
                                                            publicKeyFiles);
            
                     return encryptedString;
              }   
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Class EncryptString
                 Public Shared Function Demo() As String
                    Dim pgp As New PGPLib()
            
                    Dim publicKeyFiles As FileInfo() = {New FileInfo("DataFiles\public_key1.asc"), _
                                                       New FileInfo("DataFiles\public_key2.asc")}
            
                    Dim encryptedString As String = _
                      pgp.EncryptString("Hello World", _
                                       publicKeyFiles)
                        
                    Return encryptedString
               End Function
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if one or more of the <see cref="T:System.IO.FileInfo" /> parameters are <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,System.IO.Stream)">
      <summary>
             Encrypts a String message in OpenPGP ASCII armoured format.
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="stringToEncrypt">String to be encrypted </param>
      <param name="publicKeyStream">OpenPGP public key as an input stream</param>
      <returns>stringToEncrypt OpenPGP encrypted</returns>
      <example>
        <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             class EncryptString
             {  
            		public static String Demo() 
            		{
              		PGPLib pgp = new PGPLib();
              		
                      using (Stream publicKeyStream = File.OpenRead("recipient_key.asc")) 
                      {
            			 string encryptedString = 
            			    pgp.EncryptString("Hello World", 
            			                      publicKeyStream);
            			
                       return encryptedString;            
                      }
            		}   
             }
             </code>
        <code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Class EncryptString
                 Public Shared Function Demo() As String
                    Dim pgp As New PGPLib()
                    
                    Using publicKeyStream As Stream = File.OpenRead("recipient_key.asc")  
                     Dim encryptedString As String = _
                      pgp.EncryptString("Hello World", _
                                       publicKeyStream)
                        
                      Return encryptedString
                    End Using
             	End Function
             End Class
             </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if the <see cref="T:System.IO.FileInfo" /> parameter is <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,System.String)">
      <summary>
            PGP Encrypts given String in OpenPGP ASCII armoured format.
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><br />
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="stringToEncrypt">String to be encrypted </param>
      <param name="publicKeyAscii">Public key as String in ASCII armoured format or public key file location</param>
      <returns>stringToEncrypt OpenPGP encrypted</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStringPBE(System.String,System.String)">
      <summary>
             Encrypts a String message with a password in OpenPGP ASCII armoured format.
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><br />
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="stringToEncrypt">String to be encrypted </param>
      <param name="encryptionPassword">Encryption password</param>
      <returns>stringToEncrypt OpenPGP encrypted</returns>
      <example>
        <code lang="cs">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             class EncryptStringPBE
             {  
            		public static String Demo() {
              		PGPLib pgp = new PGPLib();
            			String encryptedString = 
            			    pgp.EncryptStringPBE("Hello World", "password");
            			
                     return encryptedString;            
            		}   
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Class EncryptStringPBE
                 Public Shared Function Demo() As String
                    Dim pgp As New PGPLib()
                    Dim encryptedString As String = _
                     pgp.EncryptStringPBE("Hello World", "password")
                        
                    Return encryptedString
             	End Function
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStringPBE(System.String,System.IO.Stream,System.String)">
      <summary>
             Encrypts a String message with a public key and a password in OpenPGP ASCII armoured format.
             </summary>
      <remarks>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><br />
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="stringToEncrypt">String to be encrypted </param>
      <param name="publicKeyStream">Public key as Stream that will be used for encryption</param>
      <param name="encryptionPassword">Alternative encryption password, that can be used if the private decryption key is lost</param>
      <returns>stringToEncrypt OpenPGP encrypted</returns>
      <example>
        <code lang="cs">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             public class EncryptStringPBE
             {  
            		public static String Demo() 
            		{
              		PGPLib pgp = new PGPLib();
              		
                     using (Stream publicKeyStream = File.OpenRead(@"recipient_key.asc"))
                     {
            			  String encryptedString = 
            			    pgp.EncryptStringPBE("Hello World", publicKeyStream, "password");
            			
                       return encryptedString;            
                     }
            		}   
             }
             </code>
        <code lang="vbnet">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Class EncryptStringPBE
                 Public Shared Function Demo() As String
                    Dim pgp As New PGPLib()
                    
                    Using publicKeyStream As Stream = File.OpenRead("recipient_key.asc") 
                      Dim encryptedString As String = _
                       pgp.EncryptStringPBE("Hello World", publicKeyStream, "password")
                        
                      Return encryptedString
                    End Using
             	End Function
             End Class
             </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,DidiSoft.Pgp.KeyStore,System.String)">
      <summary>
            OpenPGP encrypts a string message in ASCII format.
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="stringToEncrypt">plain text string to be encrypted</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> holding the encryption key</param>
      <param name="userId">User Id or the hexadecimal Key ID or the recipient's key</param>
      <returns>the encrypted string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class EncryptStringWithKeyStore
            {
            	public void Demo()
             {
            		string recipientKeyUserId = "support@didisoft.com";
            		
            		// initialize the key store
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            		// if this key store contains a key with the desired recipient userId - encrypt,
            		// otherwise notify that there is no such key
            		if (ks.ContainsKey(recipientKeyUserId))
            		{
            			PGPLib pgp = new PGPLib();
            			string plainText = "Hello World";
            			string encryptedString = pgp.EncryptString(plainText, ks, recipientKeyUserId);
            		}
            		else
            		{
            			Console.WriteLine("No key with user Id:" + recipientKeyUserId + " was found in this key store.");
            		}
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class EncryptStringWithKeyStore
            	Public Sub Demo()
            		Dim recipientKeyUserId As String = "support@didisoft.com"
            		
                 ' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            		
            		' if this key store contains a key with the desired recipient userId - encrypt,
            		' otherwise notify that there is no such key
            		If ks.ContainsKey(recipientKeyUserId) Then
            			Dim pgp As New PGPLib()
            			Dim plainText As String = "Hello World"
            			Dim encryptedString As String = pgp.EncryptString(plainText, ks, recipientKeyUserId)
            		Else
            			Console.WriteLine("No key with user Id:" + recipientKeyUserId + " was found in this key store.")
            		End If
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,DidiSoft.Pgp.KeyStore,System.String[])">
      <summary>
            OpenPGP encrypts a string message in ASCII format for multiple recipients
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="stringToEncrypt">plain text string to be encrypted</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> holding the encryption key</param>
      <param name="encryptionKeysUserIds">Arrayf of User Id's or the hexadecimal Key ID's or the recipients' keys</param>
      <returns>the encrypted string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class EncryptStringWithKeyStore
            {
            	public void Demo()
             {
            		string[] recipientKeyUserIds = new string[] {"support@didisoft.com",
            		                                            "partner@company.com" };
            		
            		// initialize the key store
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            		PGPLib pgp = new PGPLib();
            		string plainText = "Hello World";
            		string encryptedString = pgp.EncryptString(plainText, ks, recipientKeyUserIds);
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class EncryptStringWithKeyStore
            	Public Sub Demo()
            		Dim recipientKeyUserIds As String() = New String() {"support@didisoft.com", _
            		                                                    "partner@company.com" }
            		
                 ' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            		
            		Dim pgp As New PGPLib()
            		Dim plainText As String = "Hello World"
            		Dim encryptedString As String = pgp.EncryptString(plainText, ks, recipientKeyUserIds)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If any of the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If any of the supplied public keys is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptString(System.String,DidiSoft.Pgp.KeyStore,System.Int64)">
      <summary>
            Encrypts given String in ASCII format.
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="stringToEncrypt">plain text string to be encrypted</param>
      <param name="keyStore">KeyStore holding the encryption key</param>
      <param name="keyId">Encryption key Id</param>
      <returns>the encrypted string</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not usable</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.String,System.IO.FileInfo,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts a data stream with an OpenPGP public key 
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="internalFileName">string, every OpenPGP archive contains a file name associated with the encrypted data. If empty a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="publicKeyFile">Recipient public key file</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	FileInfo publicKey = new FileInfo(@"DataFiles\public.asc");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     bool asciiArmor = true;
                        
            			pgp.EncryptStream(inputStream, "Input.txt", publicKey, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim publicKey As New FileInfo("DataFiles\public.asc")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, "Input.txt", publicKey, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">if the <see cref="T:System.IO.FileInfo" /> parameter is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.IO.FileInfo,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            A special string '_CONSOLE' will be used as internal file name for the encryped data
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="publicKeyFile">Recipient public key file</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	FileInfo publicKey = new FileInfo(@"DataFiles\public.asc");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     // specify should the output be ASCII or binary
                     bool asciiArmor = true;
                     
                     // specify should integrity check be added
                     bool withIntegrityCheck = true;
                        
            			pgp.EncryptStream(inputStream, publicKey, encryptedStream, asciiArmor, withIntegrityCheck);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim publicKey As New FileInfo("DataFiles\public.asc")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 ' specify should the output be ASCII or binary
                 Dim asciiArmor As Boolean = True
                 
                 ' specify should integrity check be added
                 Dim withIntegrityCheck As Boolean = True
                    
                 pgp.EncryptStream(inputStream, publicKey, encryptedStream, asciiArmor, withIntegrityCheck)
            	End Sub
            End Class
            </code>
      </example>
      <seealso cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" />
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts a data stream with an OpenPGP public key located in a stream
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="internalFileName">string, every OpenPGP archive contains a file name associated with the encrypted data. If empty a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="publicKeyStream">Recipient public key as input stream for reading</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted output will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream publicKey = File.OpenRead(@"DataFiles\public.asc");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     bool asciiArmor = true;
                        
            			pgp.EncryptStream(inputStream, "Input.txt", publicKey, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim publicKey As Stream = File.OpenRead("DataFiles\public.asc")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 ' specify should the output be ASCII or binary
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, "Input.txt", publicKey, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            OpenPGP encrypts a data stream with an OpenPGP public key located in a stream
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="internalFileName">string, every OpenPGP archive contains a file name associated with the encrypted data. If empty a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="publicKeyStream">Recipient public key as input stream for reading</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted output will be in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream publicKey = File.OpenRead(@"DataFiles\public.asc");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     // specify should the output be ASCII or binary
                     bool asciiArmor = true;
                     
                     // specify should integrity check be added
                     bool withIntegrityCheck = true;
                        
            			pgp.EncryptStream(inputStream, "Input.txt", publicKey, encryptedStream, asciiArmor, withIntegrityCheck);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim publicKey As Stream = File.OpenRead("DataFiles\public.asc")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 ' specify should the output be ASCII or binary
                 Dim asciiArmor As Boolean = True
                 
                 ' specify should integrity check be added
                 Dim withIntegrityCheck As Boolean = True
                    
                 pgp.EncryptStream(inputStream, "Input.txt", publicKey, encryptedStream, asciiArmor, withIntegrityCheck)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            A special string '_CONSOLE' will be used as internal file name for the encrypted data
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="publicKeyStream">Recipient public key as input stream for reading</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream publicKey = File.OpenRead(@"DataFiles\public.asc");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     // specify should the output be ASCII or binary
                     bool asciiArmor = true;
                        
            			pgp.EncryptStream(inputStream, publicKey, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim publicKey As Stream = File.OpenRead("DataFiles\public.asc")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 ' specify should the output be ASCII or binary
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, publicKey, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            A special string '_CONSOLE' will be used as internal file name for the encrypted data
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="publicKeyStream">Recipient public key as input stream for reading</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">If <c><see langword="true" /></c> additional integrity check information will be appended</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream publicKey = File.OpenRead(@"DataFiles\public.asc");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     // specify should the output be ASCII or binary
                     bool asciiArmor = true;
                     
                     // specify should integrity check be added
                     bool withIntegrityCheck = true;
                        
            			pgp.EncryptStream(inputStream, publicKey, encryptedStream, asciiArmor, withIntegrityCheck);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim publicKey As Stream = File.OpenRead("DataFiles\public.asc")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 ' specify should the output be ASCII or binary
                 Dim asciiArmor As Boolean = True
                 
                 ' specify should integrity check be added
                 Dim withIntegrityCheck As Boolean = True
                    
                 pgp.EncryptStream(inputStream, publicKey, encryptedStream, asciiArmor, withIntegrityCheck)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="internalFileName">string, every OpenPGP archive contains a file name associated with the encrypted data. If empty a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="userId">User Id or hexadecimal Key ID of the recipient's key.
                                 The first Public key with this <b>userId</b> located in <b>keyStore</b> is used for encryption.</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
                    KeyStore keyStore = new KeyStore(@"c:\my.keystore", "password123");		
                     String recipientUserId = "support@didisoft.com";		
            
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     bool asciiArmor = true;
                        
            			pgp.EncryptStream(inputStream, "Input.txt", keyStore, recipientUserId, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
                 Dim keyStore As New KeyStore("c:\my.keystore", "password123")	
                 Dim recipientUserId As String = "support@didisoft.com"	
            
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, "Input.txt", keyStore, recipientUserId, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            A special string '_CONSOLE' will be used as internal file name for the encryped data
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="userId">User Id or hexadecimal Key ID of the recipient's key.
                                 The first Public key with this <b>userId</b> located in <b>keyStore</b> is used for encryption.</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
            		    // init the KeyStore
                     KeyStore keyStore = new KeyStore(@"c:\my.keystore", "password123");		
                     String recipientUserId = "support@didisoft.com";
                     
            	        PGPLib pgp = new PGPLib();
            			
                     Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                     Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     // specify should the output be ASCII or binary
                     bool asciiArmor = true;
                        
            	        pgp.EncryptStream(inputStream, keyStore, recipientUserId, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
            	    ' init the KeyStore
                 Dim keyStore As New KeyStore("c:\my.keystore", "password123")	
                 Dim recipientUserId As String = "support@didisoft.com"
            
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 ' specify should the output be ASCII or binary
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, keyStore, recipientUserId, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="internalFileName">string, every OpenPGP archive contains a file name associated with the encrypted data. If empty a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="keyId">Key Id of the recipient public key</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
                    KeyStore keyStore = new KeyStore(@"c:\my.keystore", "password123");		
                     long recipientKeyId = keyStore.GetKeyIdForKeyIdHex("8BA4CF8F");
            
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     bool asciiArmor = true;
                        
            			pgp.EncryptStream(inputStream, "Input.txt", keyStore, recipientKeyId, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
                 Dim keyStore As New KeyStore("c:\my.keystore", "password123")	
                 Dim recipientKeyId As Long = keyStore.GetKeyIdForKeyIdHex("8BA4CF8F")
            
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, "Input.txt", keyStore, recipientKeyId, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.EncryptStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.Int64,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP encrypts given data stream using the first available public OpenPGP key from a key file
            </summary>
      <remarks>
            A special string '_CONSOLE' will be used as internal file name for the encryped data
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="dataStream">Data to be encrypted </param>
      <param name="keyStore">KeyStore instance containing the recipient public key</param>
      <param name="keyId">Key Id of the recipient public key</param>
      <param name="outputStream">OpenPGP encrypted output</param>
      <param name="asciiArmor">If <c><see langword="true" /></c> the encrypted file will be in ASCII armoured format, otherwise in binary format</param>
      <example>
        <code lang="C#">
            using System.IO;
            using DidiSoft.Pgp; 
               
            class EncryptStreamDemo {
            		public void Demo() {
                    KeyStore keyStore = new KeyStore(@"c:\my.keystore", "password123");		
                     long recipientKeyId = keyStore.GetKeyIdForKeyIdHex("8BA4CF8F");
                     
            			PGPLib pgp = new PGPLib();
            			
                    	Stream inputStream = File.OpenRead(@"DataFiles\INPUT.txt");
                    	Stream encryptedStream = File.Create(@"DataFiles\OUTPUT.pgp");
                    	
                     bool asciiArmor = true;
                        
            			pgp.EncryptStream(inputStream, keyStore, recipientKeyId, encryptedStream, asciiArmor);	
            		}
            }	
            </code>
        <code lang="VB">
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class EncryptStreamDemo
            	Public Sub Demo()
                 Dim keyStore As New KeyStore("c:\my.keystore", "password123")	
                 Dim recipientKeyId As Long = keyStore.GetKeyIdForKeyIdHex("8BA4CF8F")
            
            		Dim pgp As New PGPLib()
            		
            		Dim inputStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
            		Dim encryptedStream As Stream = File.Create("DataFiles\OUTPUT.pgp")
            		
                 Dim asciiArmor As Boolean = True
                    
                 pgp.EncryptStream(inputStream, keyStore, recipientKeyId, encryptedStream, asciiArmor)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public keys is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public keys is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file with supplied public and private key
             </summary>
      <remarks>
             * Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFile">File to be PGP signed</param>
      <param name="privateKeyFile">Private Key file, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFile">Public key file, used for encryption</param>
      <param name="outputFile">Output file, PGP signed</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             public class SignAndEncrypt
             {
              public void Demo()
              {
                // Create an instance of the library
                PGPLib pgp = new PGPLib();
            
                // Should output be ASCII (true) or binary (false)  
                bool asciiArmor = false;
                // If true additional integrity check information will be appended
                bool withIntegrityCheck = false;
                
                FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                
                // Signing private key (usually our own private key)  
                FileInfo privateKeyFile = new FileInfo(@"DataFiles\private_key.asc");
                // Public key used for encryption (usually the public key of the recipient)
                FileInfo publicKeyFile = new FileInfo(@"DataFiles\public_key.asc");
                // Encrypted output
                FileInfo outputFile = new FileInfo(@"DataFiles\OUTPUTse.pgp");
                
                pgp.SignAndEncryptFile(inputFile,
                                            privateKeyFile, 
                                            "private key password",
                                            publicKeyFile,
                                            outputFile, 
                                            asciiArmor,
                                            withIntegrityCheck);			
              
             }
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncrypt
            		Public Sub Demo()
            		    ' Create an instance of the library
            	        Dim pgp As New PGPLib()
            
                      ' Should output be ASCII (true) or binary (false)
            	        Dim asciiArmor As Boolean = False
            	        ' If true additional integrity check information will be appended
            	        Dim withIntegrityCheck As Boolean = False
            	        
            	        Dim inputFile As FileInfo = new FileInfo("DataFiles\INPUT.txt")
            	        
                      ' Signing private key (usually our own private key)
            	        Dim privateKeyFile As FileInfo = new FileInfo("DataFiles\private_key.asc")
            	        ' Public key used for encryption (usually the public key of the recipient)
            	        Dim publicKeyFile As FileInfo = new FileInfo("DataFiles\public_key.asc")
            	        ' Encrypted output
            	        Dim outputFile As FileInfo = new FileInfo("DataFiles\OUTPUTse.pgp")
            	        
             	        pgp.SignAndEncryptFile(inputFile, _
                                            privateKeyFile, _
                                            "private key password", _
                                            publicKeyFile, _
                                            outputFile, _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo[],System.IO.FileInfo,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file with supplied private key and multiple public keys
             </summary>
      <remarks>
             * Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFile">File to be PGP signed</param>
      <param name="privateKeyFile">Private Key file, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFiles">Public key files, used for encryption</param>
      <param name="outputFile">Output file, PGP signed</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             public class SignAndEncryptForMultipleRcpt
             {
              public void Demo()
              {
                // Create an instance of the library
                PGPLib pgp = new PGPLib();
            
                // Should output be ASCII (true) or binary (false)  
                bool asciiArmor = false;
                // If true additional integrity check information will be appended
                bool withIntegrityCheck = false;
                
                FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                
                // Signing private key (usually our own private key)  
                FileInfo privateKeyFile = new FileInfo(@"DataFiles\private_key.asc");
                // Public key used for encryption (usually the public key of the recipient)
                FileInfo publicKeyFile1 = new FileInfo(@"DataFiles\public_key1.asc");
                FileInfo publicKeyFile2 = new FileInfo(@"DataFiles\public_key2.asc");
                // Encrypted output
                FileInfo outputFile = new FileInfo(@"DataFiles\OUTPUTse.pgp");
                
                pgp.SignAndEncryptFile(inputFile,
                                       privateKeyFile, 
                                       "private key password",
                                       new FileInfo[] {publicKeyFile1, publicKeyFile2},
                                       outputFile, 
                                       asciiArmor,
                                       withIntegrityCheck);			
              
             }
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncrypt
            		Public Sub Demo()
            		    ' Create an instance of the library
            	        Dim pgp As New PGPLib()
            
                      ' Should output be ASCII (true) or binary (false)
            	        Dim asciiArmor As Boolean = False
            	        ' If true additional integrity check information will be appended
            	        Dim withIntegrityCheck As Boolean = False
            	        
            	        Dim inputFile As FileInfo = new FileInfo("DataFiles\INPUT.txt")
            	        
                      ' Signing private key (usually our own private key)
            	        Dim privateKeyFile As FileInfo = new FileInfo("DataFiles\private_key.asc")
            	        ' Public keys used for encryption (usually the public keys of the recipients)
            	        Dim publicKeyFile1 As FileInfo = new FileInfo("DataFiles\public_key1.asc")
            	        Dim publicKeyFile2 As FileInfo = new FileInfo("DataFiles\public_key2.asc")
            	        ' Encrypted output
            	        Dim outputFile As FileInfo = new FileInfo("DataFiles\OUTPUTse.pgp")
            	        
             	        pgp.SignAndEncryptFile(inputFile, _
                                            privateKeyFile, _
                                            "private key password", _
                                            New FileInfo() {publicKeyFile1, publicKeyFile2}, _
                                            outputFile, _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file backward compatibile with PGP 6.5 and below
             </summary>
      <remarks>
             * Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFile">File to be PGP signed</param>
      <param name="privateKeyFile">Private Key file, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFile">Public key file, used for encryption</param>
      <param name="outputFile">Output file, PGP signed</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass backward compatibile with PGP 6.5 and below
             <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             public class SignAndEncryptV3
             {
              public void Demo()
              {
                // Create an instance of the library
                PGPLib pgp = new PGPLib();
            
                // Should output be ASCII (true) or binary (false)  
                bool asciiArmor = false;
                
                FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                
                // Signing private key (usually our own private key)  
                FileInfo privateKeyFile = new FileInfo(@"DataFiles\private_key.asc");
                // Public key used for encryption (usually the public key of the recipient)
                FileInfo publicKeyFile = new FileInfo(@"DataFiles\public_key.asc");
                // Encrypted output
                FileInfo outputFile = new FileInfo(@"DataFiles\OUTPUTse.pgp");
                
                pgp.SignAndEncryptFileV3(inputFile,
                                            privateKeyFile, 
                                            "private key password",
                                            publicKeyFile,
                                            outputFile, 
                                            asciiArmor);			
             }
             </code><code lang="VB">
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptV3
            		Public Sub Demo()
            		    ' Create an instance of the library
            	        Dim pgp As New PGPLib()
            
                      ' Should output be ASCII (true) or binary (false)
            	        Dim asciiArmor As Boolean = False
            	        
            	        Dim inputFile As FileInfo = new FileInfo("DataFiles\INPUT.txt")
            	        
                      ' Signing private key (usually our own private key)
            	        Dim privateKeyFile As FileInfo = new FileInfo("DataFiles\private_key.asc")
            	        ' Public key used for encryption (usually the public key of the recipient)
            	        Dim publicKeyFile As FileInfo = new FileInfo("DataFiles\public_key.asc")
            	        ' Encrypted output
            	        Dim outputFile As FileInfo = new FileInfo("DataFiles\OUTPUTse.pgp")
            	        
             	        pgp.SignAndEncryptFileV3(inputFile, _
                                            privateKeyFile, _
                                            "private key password", _
                                            publicKeyFile, _
                                            outputFile, _
                                            asciiArmor)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo[],System.IO.FileInfo,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file backward compatibile with PGP 6.5 and below for multiple recipients
             </summary>
      <remarks>
             * Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFile">File to be PGP signed</param>
      <param name="privateKeyFile">Private Key file, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFiles">Public key files, used for encryption</param>
      <param name="outputFile">Output file, PGP signed</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass backward compatibile with PGP 6.5 and below
             <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
             public class SignAndEncryptV3
             {
              public void Demo()
              {
                // Create an instance of the library
                PGPLib pgp = new PGPLib();
            
                // Should output be ASCII (true) or binary (false)  
                bool asciiArmor = false;
                
                FileInfo inputFile = new FileInfo(@"DataFiles\INPUT.txt");
                
                // Signing private key (usually our own private key)  
                FileInfo privateKeyFile = new FileInfo(@"DataFiles\private_key.asc");
                // Public keys used for encryption (usually the public key of the recipient)
                FileInfo publicKeyFile1 = new FileInfo(@"DataFiles\public_key1.asc");
                FileInfo publicKeyFile2 = new FileInfo(@"DataFiles\public_key2.asc");
                // Encrypted output
                FileInfo outputFile = new FileInfo(@"DataFiles\OUTPUTse.pgp");
                
                pgp.SignAndEncryptFileV3(inputFile,
                                            privateKeyFile, 
                                            "private key password",
                                            new FileInfo[] {publicKeyFile1, publicKeyFile},
                                            outputFile, 
                                            asciiArmor);			
             }
             </code><code lang="VB">
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptV3
            		Public Sub Demo()
            		    ' Create an instance of the library
            	        Dim pgp As New PGPLib()
            
                      ' Should output be ASCII (true) or binary (false)
            	        Dim asciiArmor As Boolean = False
            	        
            	        Dim inputFile As FileInfo = new FileInfo("DataFiles\INPUT.txt")
            	        
                      ' Signing private key (usually our own private key)
            	        Dim privateKeyFile As FileInfo = new FileInfo("DataFiles\private_key.asc")
            	        ' Public keys used for encryption (usually the public key of the recipient)
            	        Dim publicKeyFile1 As FileInfo = new FileInfo("DataFiles\public_key1.asc")
            	        Dim publicKeyFile2 As FileInfo = new FileInfo("DataFiles\public_key2.asc")
            	        ' Encrypted output
            	        Dim outputFile As FileInfo = new FileInfo("DataFiles\OUTPUTse.pgp")
            	        
             	        pgp.SignAndEncryptFileV3(inputFile, _
                                            privateKeyFile, _
                                            "private key password", _
                                            New FileInfo() {publicKeyFile1, publicKeyFile2}, _
                                            outputFile, _
                                            asciiArmor)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,System.String,System.String,System.String)">
      <summary>
            OpenPGP signs and encrypts a String message in one pass
            </summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="privateKey">Private Key as String, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKey">Public key as String, used for encryption</param>
      <returns>inputString OpenPGP signed and encrypted</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading public key file or private key file </exception>
      <example>
            This sample shows how to OpenPGP sign and encrypt message and afterwards decrypt and verify it.
            <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            public class Demo
            {
            	public void SignAndEncryptDemo()
            	{
            	    String PrivateKey = " .... "; // your private OpenPGP key in a String form
            	    String Password = "key password";
            	    String PublicKey = " .... "; // recipient's public OpenPGP key in a String form
            
            	    PGPLib pgp = new PGPLib();
            	    string inputString = "stringToSign"; 
            	
            	    String pgpString = pgp.SignAndEncryptString(inputString, PrivateKey, Password, PublicKey);
            	}
            }    
            </code><code lang="VB">
            Imports DidiSoft.Pgp
            Imports System
            Imports System.IO
            
            Public Class Demo
            	Public Sub SignAndEncryptDemo()
            		Dim PrivateKey As String = " .... " ' your private OpenPGP key in a String form
            		Dim Password As String = "key password"
            		Dim PublicKey As String = " .... " ' recipient's public OpenPGP key in a String form
            
            		Dim pgp As New PGPLib()
            		Dim inputString As String = "stringToSign"
            
            		Dim pgpString As String = pgp.SignAndEncryptString(inputString, PrivateKey, Password, PublicKey)
            	End Sub
            End Class
            </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,System.IO.FileInfo,System.String,System.IO.FileInfo)">
      <summary>
            OpenPGP signs and encrypts a String message in one pass
            </summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="privateKeyFile">Private Key file, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFile">Public key file, used for encryption</param>
      <returns>inputString OpenPGP signed and encrypted</returns>
      <example>
            This sample shows how to OpenPGP sign and encrypt message and afterwards decrypt and verify it.
            <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            public class Demo
            {
            	public void SignAndEncryptDemo()
            	{
            	    FileInfo PrivateKey = new FileInfo(@"c:\private_key.asc");    
            	    String Password = "key password";
            	    FileInfo PublicKey = new FileInfo(@"c:\recipient_key.asc");    
            
            	    PGPLib pgp = new PGPLib();
            	    string inputString = "stringToSign"; 
            	
            	    String pgpString = pgp.SignAndEncryptString(inputString, PrivateKey, Password, PublicKey);
            	}
            }    
            </code><code lang="VB">
            Imports DidiSoft.Pgp
            Imports System
            Imports System.IO
            
            Public Class Demo
            	Public Sub SignAndEncryptDemo()
            		Dim PrivateKey As New FileInfo("c:\private_key.asc")
            		Dim Password As String = "key password"
            		Dim PublicKey As New FileInfo(@"c:\recipient_key.asc")
            
            		Dim pgp As New PGPLib()
            		Dim inputString As String = "stringToSign"
            
            		Dim pgpString As String = pgp.SignAndEncryptString(inputString, PrivateKey, Password, PublicKey)
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if any of the <see cref="T:System.IO.FileInfo" /> parameters is <see langword="null" /></exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStringV3(System.String,System.IO.FileInfo,System.String,System.IO.FileInfo)">
      <summary>
             OpenPGP signs and encrypts a String message in one pass, backward compatible with PGP 6.5 and below
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <para></para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></para></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="privateKeyFile">Private Key file, used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFile">Public key file, used for encryption</param>
      <returns>the input message OpenPGP signed and encrypted</returns>
      <example>
             This sample shows how to OpenPGP sign and encrypt message and afterwards decrypt and verify it.
             <code lang="C#">
             using DidiSoft.Pgp;
             using System;
             using System.IO;
             
             public class Demo
             {
             	public void SignAndEncryptDemoV3()
             	{
             	    FileInfo PrivateKey = new FileInfo(@"c:\my_private_key.asc");    
             	    String Password = "pass123";
            
                  FileInfo PublicKey = new FileInfo(@"c:\recipient_public_key.asc");
             
                  // Create an instance of the library
             	    PGPLib pgp = new PGPLib();
             	    
             	    string inputString = "stringToSign"; 
             	
                  // sign and encrypt compatible with PGP 6.5 and below
             	    String pgpString = pgp.SignAndEncryptStringV3(inputString, PrivateKey, Password, PublicKey);
             	    
             	    String outputString;
             	    bool verified = pgp.DecryptAndVerifyString(pgpString, PrivateKey, Password, PublicKey, out outputString);
             	}
             }    
             </code><code lang="VB">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub SignAndEncryptDemoV3()
             		Dim PrivateKey As New FileInfo("c:\my_private_key.asc")
             		Dim Password As String = "pass123"
            
                  Dim PublicKey As New FileInfo("c:\recipient_public_key.asc")
             
                  ' Create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "stringToSign"
             
                  ' sign and encrypt compatible with PGP 6.5 and below
             		Dim pgpString As String = pgp.SignAndEncryptStringV3(inputString, PrivateKey, Password, PublicKey)
             		
             		Dim outputString As String
             		Dim verified As Boolean = pgp.DecryptAndVerifyString(pgpString, PrivateKey, Password, PublicKey, outputString)
             	End Sub
             End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,System.IO.Stream,System.String,System.IO.Stream)">
      <summary>
            OpenPGP signs and encrypts a String message in one pass
            </summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <br />
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><br />
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="privateKeyStream">Private key as Stream used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyStream">Public key as Stream used for encryption</param>
      <returns>inputString OpenPGP signed and encrypted</returns>
      <example>
            This sample shows how to OpenPGP sign and encrypt message and afterwards decrypt and verify it.
            <code lang="cs">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            public class Demo
            {
            	public void SignAndEncryptDemo()
            	{
            	    FileInfo PrivateKey = new FileInfo(@"c:\my_private_key.asc");    
            	    String Password = "pass123";
            
                 FileInfo PublicKey = new FileInfo(@"c:\recipient_public_key.asc");
            
            	    PGPLib pgp = new PGPLib();
            	    string inputString = "stringToSign"; 
            	
                 string pgpString = String.Empty
                 using (Stream privateStream = PrivateKey.OpenRead())
                 using (Stream publicStream = PublicKey.OpenRead())
                 {
            	        pgpString = pgp.SignAndEncryptString(inputString, privateStream, Password, publicStream);
            	    }
            	    string outputString;
            	    bool verified = pgp.DecryptAndVerifyString(pgpString, PrivateKey, Password, PublicKey, out outputString);
            	}
            }    
            </code><code lang="vbnet">
            Imports DidiSoft.Pgp
            Imports System
            Imports System.IO
            
            Public Class Demo
            	Public Sub SignAndEncryptDemo()
            		Dim PrivateKey As New FileInfo("c:\my_private_key.asc")
            		Dim Password As String = "pass123"
            		
                 Dim PublicKey As New FileInfo("c:\recipient_public_key.asc")
            
            		Dim pgp As New PGPLib()
            		Dim inputString As String = "stringToSign"
                 
            		Dim pgpString As String = String.Empty
            		
                 Using privateStream As Stream = PrivateKey.OpenRead()
                  Using publicStream As Stream = PublicKey.OpenRead()
                     pgpString = pgp.SignAndEncryptString(inputString, privateStream, Password, publicStream)
                  End Using    
                 End Using
            		
                 Dim outputString As String
            		Dim verified As Boolean = pgp.DecryptAndVerifyString(pgpString, PrivateKey, Password, PublicKey, outputString)
            	End Sub
            End Class
            </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStringV3(System.String,System.IO.Stream,System.String,System.IO.Stream)">
      <summary>
             OpenPGP signs and encrypts a String message in one pass, backward compatible with PGP 6.5 and below
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <br />
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /><br />
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="privateKeyStream">Private key as Stream used for signing</param>
      <param name="password">Private key password</param>
      <param name="publicKeyStream">Public key as Stream used for encryption</param>
      <returns>the input message OpenPGP signed and encrypted</returns>
      <example>
             This sample shows how to OpenPGP sign and encrypt message and afterwards decrypt and verify it.
             <code lang="cs">
             using DidiSoft.Pgp;
             using System;
             using System.IO;
             
             public class Demo
             {
             	public void SignAndEncryptDemoV3()
             	{
             	    FileInfo PrivateKey = new FileInfo(@"c:\my_private_key.asc");    
             	    String Password = "pass123";
            
                  FileInfo PublicKey = new FileInfo(@"c:\recipient_public_key.asc");
             
                  // Create an instance of the library
             	    PGPLib pgp = new PGPLib();
             	    
             	    string inputString = "stringToSign"; 
             	
                  string pgpString = String.Empty;
                  using (Stream privateKeyStream = PrivateKey.OpenRead())
                  using (Stream publicKeyStream = PublicKey.OpenRead())
                  {
                    // sign and encrypt compatible with PGP 6.5 and below
             	      pgpString = pgp.SignAndEncryptStringV3(inputString, privateKeyStream, Password, publicKeyStream);
             	    }
             	    
             	    String outputString;
             	    bool verified = pgp.DecryptAndVerifyString(pgpString, PrivateKey, Password, PublicKey, out outputString);
             	}
             }    
             </code><code lang="vbnet">
             Imports DidiSoft.Pgp
             Imports System
             Imports System.IO
             
             Public Class Demo
             	Public Sub SignAndEncryptDemoV3()
             		Dim PrivateKey As New FileInfo("c:\my_private_key.asc")
             		Dim Password As String = "pass123"
            
                  Dim PublicKey As New FileInfo("c:\recipient_public_key.asc")
             
                  ' Create an instance of the library
             		Dim pgp As New PGPLib()
             		
             		Dim inputString As String = "stringToSign"
             
                  Dim pgpString As String = String.Empty
                  Using privateKeyStream As Stream = PrivateKey.OpenRead()
                   Using publicKeyStream As Stream = PublicKey.OpenRead()
                    ' sign and encrypt compatible with PGP 6.5 and below
             		  pgpString = pgp.SignAndEncryptStringV3(inputString, PrivateKey, Password, PublicKey)
             		 End Using
             		End Using
             		
             		Dim outputString As String
             		Dim verified As Boolean = pgp.DecryptAndVerifyString(pgpString, PrivateKey, Password, PublicKey, outputString)
             	End Sub
             End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String)">
      <summary>
            OpenPGP Signs and encrypts given String message in one pass with keys located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="keyStore">KeyStore holding the signing and encryption keys</param>
      <param name="privateSigningKeyUserId">Private signing key User Id or hexadecimal Key ID</param>
      <param name="privateSigningKeyPassword">Private signing key password</param>
      <param name="publicEncryptionKeyUserId">Public encryption key User Id or hexadecimal Key ID</param>
      <returns>OpenPGP signed and encrypted message</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String[])">
      <summary>
            OpenPGP Signs and encrypts given String message in one pass with keys located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="keyStore">KeyStore holding the signing and encryption keys</param>
      <param name="privateSigningKeyUserId">Private signing key User Id or hexadecimal Key ID</param>
      <param name="privateSigningKeyPassword">Private signing key password</param>
      <param name="publicEncryptionKeyUserIds">Array of public encryption keys User Id's or hexadecimal Key ID's</param>
      <returns>OpenPGP signed and encrypted message</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If any of the supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.Int64[])">
      <summary>
            OpenPGP Signs and encrypts given String message in one pass with keys located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="keyStore">KeyStore holding the signing and encryption keys</param>
      <param name="privateSigningKeyUserId">Private signing key User Id or hexadecimal Key ID</param>
      <param name="privateSigningKeyPassword">Private signing key password</param>
      <param name="publicEncryptionKeyIds">Array of public encryption keys Id's</param>
      <returns>OpenPGP signed and encrypted message</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the any of supplied public keys is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptString(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64)">
      <summary>
            OpenPGP signs and encrypts given String message in one pass with keys located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="keyStore">KeyStore holding the signing and encryption keys</param>
      <param name="privateSigningKeyId">Private signing key Id</param>
      <param name="privateSigningKeyPassword">Private signing key password</param>
      <param name="publicEncryptionKeyId">Public encryption key Id</param>
      <returns>OpenPGP signed and encrypted message</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStringV3(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String)">
      <summary>
            OpenPGP signs and encrypts given String message in one pass backward compatible with PGP 6.5 and below, with keys located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="keyStore">KeyStore holding the signing and encryption keys</param>
      <param name="privateSigningKeyUserId">Private signing key User Id or hexadecimal Key ID</param>
      <param name="privateSigningKeyPassword">Private signing key password</param>
      <param name="publicEncryptionKeyUserId">Public encryption key User Id or hexadecimal Key ID</param>
      <returns>OpenPGP signed and encrypted message</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStringV3(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64)">
      <summary>
            OpenPGP signs and encrypts given String message in one pass backward compatible with PGP 6.5 and below, with keys located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
            * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputString">Message to be encrypted and signed</param>
      <param name="keyStore">KeyStore holding the signing and encryption keys</param>
      <param name="privateSigningKeyId">Private signing key Id</param>
      <param name="privateSigningKeyPassword">Private signing key password</param>
      <param name="publicEncryptionKeyId">Public encryption key Id</param>
      <returns>OpenPGP signed and encrypted message</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFiles(System.String[],System.String,System.String,System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts one or more files into a single archive.
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFileNames">One or more files to be OpenPGP signed and encrypted (absolute or relative path) </param>
      <param name="privateKeyFileName">Private key file used for signing (absolute or relative path)</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFileNames">Public key(s) to be used for encryption (absolute or relative path)</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c>, output file is in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptMultipleFiles
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // files to be encrypted
                     string[] inputFiles =
                        new string[] {@"c:\file1.txt",
                                      @"c:\file2.dat",
                                      @"c:\file3.xls"};
            
                     // one or more public keys to encrypt with
                     string[] recipientsPublicKeys =
                        new string[] {@"c:\recipient_1_key.asc", 
                                      @"c:\recipient_2_key.asc", 
                                      @"c:\recipient_3_key.asc"};
                                      
                     pgp.SignAndEncryptFiles(inputFiles,
                                            @"c:\my_private_key.asc", 
                                            "private key password",
                                            recipientsPublicKeys,
                                            @"c:\OUTPUTse.pgp", 
                                            asciiArmor,
                                            withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptMultipleFiles
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     '-- files to be encrypted
                     Dim inputFiles As String() = _
                        New String() {"c:\file1.txt", _
                                      "c:\file2.dat", _
                                      "c:\file3.xls"}
            
                     '-- one or more public keys to encrypt with
                     Dim recipientsPublicKeys As String() = _
                        New String() {"c:\recipient_1_key.asc", _
                                      "c:\recipient_2_key.asc", _
                                      "c:\recipient_3_key.asc"}
                                      
                     pgp.SignAndEncryptFiles(inputFiles, _
                                            "c:\my_private_key.asc", _
                                            "private key password", _
                                            recipientsPublicKeys, _
                                            "c:\OUTPUT.pgp", _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFiles(System.String[],DidiSoft.Pgp.KeyStore,System.String,System.String,System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts one or more files into a single archive.
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFileNames">One or more files to be OpenPGP signed and encrypted (absolute or relative path) </param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingPrivateKeyUserId">Key User Id or Hex Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingPrivateKeyPassword">The password of the private key</param>
      <param name="encryptionPublicKeysUserIds">Key User Id's or Hex Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c>, output file is in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptMultipleFiles
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // files to be encrypted
                     string[] inputFiles =
                        new string[] {@"c:\file1.txt",
                                      @"c:\file2.dat",
                                      @"c:\file3.xls"};
            
             		   string signingKeyUserId = "myemail@mycompany.com";
             		   string signingKeyPassword = "private key password";
             		
             		   // initialize the key store
             		   KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Public keys' User Id or Hex Id used for encryption
                     string encUserId1 = "Receiver1@company1.com";
                     string encUserId2 = "D689132A";
                                      
                     pgp.SignAndEncryptFiles(inputFiles,
                                            ks,
                                            signingKeyUserId, 
                                            signingKeyPassword,
                                            new string[encUserId1, encUserId2],
                                            @"c:\OUTPUTse.pgp", 
                                            asciiArmor,
                                            withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptMultipleFiles
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     '-- files to be encrypted
                     Dim inputFiles As String() = _
                        New String() {"c:\file1.txt", _
                                      "c:\file2.dat", _
                                      "c:\file3.xls"}
            
                     ' Signing private key User Id (usually our own private key)
             		   Dim signingKeyUserId As String = "myemail@mycompany.com"
             		   Dim signingKeyPassword As String = "private key password"
             		
                     ' Public keys' User Id or Hex Id used for encryption
                     Dim encUserId1 As String = "Receiver1@company.com"
                     Dim encUserId2 As String = "D689132A"
             
             		   // initialize the key store
             		   Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                                      
                     pgp.SignAndEncryptFiles(inputFiles, _
                                            ks, _
                                            signingKeyUserId, _
                                            signingKeyPassword, _
                                             New String() {encUserId1, encUserId2}, _ 
                                            "c:\OUTPUT.pgp", _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFiles(System.String[],DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64[],System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts one or more files into a single archive.
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFileNames">One or more files to be OpenPGP signed and encrypted (absolute or relative path) </param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingPrivateKeyId">Key Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingPrivateKeyPassword">The password of the private key</param>
      <param name="encryptionPublicKeysIds">Key Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c>, output file is in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptMultipleFiles
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // files to be encrypted
                     string[] inputFiles =
                        new string[] {@"c:\file1.txt",
                                      @"c:\file2.dat",
                                      @"c:\file3.xls"};
            
             		   // initialize the key store
             		   KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Signing private key Id (usually our own private key)
             		   string signingKeyUserId = ks.GetKeyIdForKeyIdHex("D689132A");
             		   string signingKeyPassword = "private key password";
             		
                     // Multiple recipients public keys
                     long encKeyIds[] = new long[] {keyStore.GetKeyIdForKeyIdHex("74BB3286"),
                                                     keyStore.GetKeyIdForKeyIdHex("D689132A")};
                                      
                     pgp.SignAndEncryptFiles(inputFiles,
                                            ks, 
                                            signingKeyUserId, 
                                            signingKeyPassword,
                                            encKeyIds,
                                            @"c:\OUTPUTse.pgp", 
                                            asciiArmor,
                                            withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptMultipleFiles
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     '-- files to be encrypted
                     Dim inputFiles As String() = _
                        New String() {"c:\file1.txt", _
                                      "c:\file2.dat", _
                                      "c:\file3.xls"}
            
             		   ' initialize the key store
             		   Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' Signing private key Id (usually our own private key)
             		   Dim signingKeyUserId As Long = ks.GetKeyIdForKeyIdHex("D689132A")
             		   Dim signingKeyPassword As String = "private key password"
             		
                     ' Multiple recipients public keys
                     Dim encKeyIds As Long() = New Long() {keyStore.GetKeyIdForKeyIdHex("74BB3286"), _
                                                           keyStore.GetKeyIdForKeyIdHex("D689132A")}
                                      
                     pgp.SignAndEncryptFiles(inputFiles, _
                                            ks, _
                                            signingKeyUserId, _
                                            signingKeyPassword, _
                                            encKeyIds, _
                                            "c:\OUTPUT.pgp", _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts a file in one pass.
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFileName">File Name to be PGP signed and encrypted (absolute or relative path) </param>
      <param name="privateKeyFile">Private key used for signing (absolute or relative path) or as ASCII armour string</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFile">Public key file used for encryption (absolute or relative path) or as ASCII armour string</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c>, output file is in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncrypt
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool armor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     pgp.SignAndEncryptFile(@"DataFiles\INPUT.txt",
                                            @"DataFiles\private_key.asc", 
                                            "private key password",
                                            @"DataFiles\public_key.asc",
                                            @"DataFiles\OUTPUTse.pgp", 
                                            armor,
                                            withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncrypt
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _
                                            "DataFiles\private_key.asc", _
                                            "private key password", _
                                            "DataFiles\public_key.asc", _
                                            "DataFiles\OUTPUT.pgp", _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFileV3(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts a file in one pass, backward compatible with PGP 6.5 and below
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFileName">File Name to be PGP signed and encrypted (absolute or relative path) </param>
      <param name="privateKeyFile">Private key file used for signing (absolute or relative path) or as ASCII armour string</param>
      <param name="password">Private key password</param>
      <param name="publicKeyFile">Public key file used for encryption (absolute or relative path) or as ASCII armour string</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c>, output file is in ASCII armoured format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <example>
             This sample shows how to sign and encrypt a file in one pass, backward compatible with PGP 6.5 and below.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool armor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     pgp.SignAndEncryptFileV3(@"DataFiles\INPUT.txt",
                                            @"DataFiles\private_key.asc", 
                                            "private key password",
                                            @"DataFiles\public_key.asc",
                                            @"DataFiles\OUTPUTse.pgp", 
                                            armor);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptV3
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
                     pgp.SignAndEncryptFileV3("DataFiles\INPUT.txt", _
                                            "DataFiles\private_key.asc", _
                                            "private key password", _
                                            "DataFiles\public_key.asc", _
                                            "DataFiles\OUTPUT.pgp", _
                                            asciiArmor)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFilePBE(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
             Signs and encrypts a file in one pass.
             <para>
             The file is encrypted with an additional password that can be used to decrypt the file afterwards.
             </para></summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <param name="inputFileName">File Name to be PGP signed and encrypted (absolute or relative path) </param>
      <param name="privateKeyFile">Private key file used for signing (absolute or relative path) or as ASCII armour stream</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyFile">Public key file used for encryption (absolute or relative path) or as ASCII armour stream</param>
      <param name="additionalDecryptionPassword">Additional password that can be used to decrypt the file afterwards</param>
      <param name="outputFileName">File name of the output encrypted file (absolute or relative path)</param>
      <param name="armor">if <c><see langword="true" /></c>, output file is in ASCII armoured format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncrypt
            	{
            		public void Demo()
                  {
                 // create an instance of the library
                 PGPLib pgp = new PGPLib();
            
                  // should output be ASCII or binary
                  bool asciiArmor = false;
                  // should integrity check information be added
                   bool withIntegrityCheck = false;
                    
                     string additionalDecryptionPassword = "backup password";
                     
                     pgp.SignAndEncryptFilePBE(@"DataFiles\INPUT.txt",
                                            @"DataFiles\private_key.asc", 
                                           "private key password",
                                            @"DataFiles\public_key.asc",
                                            additionalDecryptionPassword,
                                            @"DataFiles\OUTPUTse.pgp", 
                                             asciiArmor,
                                             withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncrypt
            		Public Sub Demo()
                     ' create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' should output be ASCII or binary
                     Dim asciiArmor As Boolean = False
                    ' should integrity check information be added
                      Dim withIntegrityCheck As Boolean = False
            
                     Dim additionalDecryptionPassword As String = "backup password"
                     
                     pgp.SignAndEncryptFilePBE("DataFiles\INPUT.txt", _
                                            "DataFiles\private_key.asc", _
                                            "private key password", _
                                            "DataFiles\public_key.asc", _
                                            additionalDecryptionPassword, _
                                            "DataFiles\OUTPUT.pgp", _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStream(System.IO.Stream,System.String,System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given data stream with supplied public (encryption) and private (signing) keys
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStream
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // Signing private key (usually our own private key)
                     Stream signingPrivateKeyStream = File.OpenRead(@"DataFiles\private_key.asc");
                     
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = File.OpenRead(@"DataFiles\public_key.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStream(dataStream,
                                                 internalFileNameLabel,
                                                 signingPrivateKeyStream, 
                                                 "private key password",
                                                 encryptionPublicKeyStream,
                                                 outputStream, 
                                                 asciiArmor,
                                                 withIntegrityCheck);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     ' Signing private key (usually our own private key)
                     Dim signingPrivateKeyStream As Stream = New FileInfo("DataFiles\private_key.asc").OpenRead()
                     
                     ' Public key used for encryption (usually the public key of the recipient)
                     Dim encryptionPublicKeyStream As Stream = New FileInfo("DataFiles\public_key.asc").OpenRead()
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStream(dataStream, _
                                                 internalFileNameLabel,
                                                 signingPrivateKeyStream, _
                                                 "private key password", _
                                                 encryptionPublicKeyStream, _
                                                 outputStream, _
                                                 asciiArmor, _
                                                 withIntegrityCheck)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyStream">Public key as stream, used for encryption</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStream(System.IO.Stream,System.String,System.IO.Stream,System.String,System.IO.Stream[],System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given data stream for multiple recipients
             </summary>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using System.IO;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStream
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // Signing private key (usually our own private key)
                     Stream signingPrivateKeyStream = File.OpenRead(@"DataFiles\private_key.asc");
                     
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream recpient1PublicKeyStream = File.OpenRead(@"DataFiles\public_key1.asc");
                     Stream recpient2PublicKeyStream = File.OpenRead(@"DataFiles\public_key2.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStream(dataStream,
                                                 internalFileNameLabel,
                                                 signingPrivateKeyStream, 
                                                 "private key password",
                                                 new Stream[] {recpient1PublicKeyStream, recpient2PublicKeyStream},
                                                 outputStream, 
                                                 asciiArmor,
                                                 withIntegrityCheck);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     ' Signing private key (usually our own private key)
                     Dim signingPrivateKeyStream As Stream = New FileInfo("DataFiles\private_key.asc").OpenRead()
                     
                     ' Public key used for encryption (usually the public key of the recipient)
                     Dim recpient1PublicKeyStream As Stream = New FileInfo("DataFiles\public_key1.asc").OpenRead()
                     Dim recpient2PublicKeyStream As Stream = New FileInfo("DataFiles\public_key2.asc").OpenRead()
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStream(dataStream, _
                                                 internalFileNameLabel,
                                                 signingPrivateKeyStream, _
                                                 "private key password", _
                                                 New Stream() {recpient1PublicKeyStream, recpient2PublicKeyStream}, _
                                                 outputStream, _
                                                 asciiArmor, _
                                                 withIntegrityCheck)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyStreams">Recipients' public keys as stream, used for encryption</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given data stream with supplied public (encryption) and private (signing) keys
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStream
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
             		string signingKeyUserId = "myemail@mycompany.com";
             		string signingKeyPassword = "private key password";
             		
                     string encryptionUserId = "recipient@company.com";
             
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = File.OpenRead(@"DataFiles\public_key.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStream(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 encryptionUserId,
                                                 outputStream, 
                                                 asciiArmor,
                                                 withIntegrityCheck);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     ' Signing private key User Id (usually our own private key)
             		Dim signingKeyUserId As String = "myemail@mycompany.com"
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Public key User Id used for encryption (usually the public key of the recipient)
                     Dim encryptionUserId As String = "recipient@company.com"
             
             		// initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStream(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 encryptionUserId, _
                                                 outputStream, _
                                                 asciiArmor, _
                                                 withIntegrityCheck)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingPrivateKeyUserId">Key User Id or Hex Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingPrivateKeyPassword">The password of the private key</param>
      <param name="encryptionPublicKeyUserIds">Key User Id's or Hex Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String[],System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given data stream with supplied public (encryption) and private (signing) keys
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStream
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
             		string signingKeyUserId = "myemail@mycompany.com";
             		string signingKeyPassword = "private key password";
             		
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Public keys' User Id or Hex Id used for encryption
                     string encUserId1 = "Receiver1@company1.com";
                     string encUserId2 = "D689132A";
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStream(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 new string[encUserId1, encUserId2],
                                                 outputStream, 
                                                 asciiArmor,
                                                 withIntegrityCheck);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     ' Signing private key User Id (usually our own private key)
             		Dim signingKeyUserId As String = "myemail@mycompany.com"
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Public keys' User Id or Hex Id used for encryption
                     Dim encUserId1 As String = "Receiver1@company.com"
                     Dim encUserId2 As String = "D689132A"
             
             		// initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStream(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 New String() {encUserId1, encUserId2}, _ 
                                                 outputStream, _
                                                 asciiArmor, _
                                                 withIntegrityCheck)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingPrivateKeyUserId">Key User Id or Hex Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingPrivateKeyPassword">The password of the private key</param>
      <param name="encryptionPublicKeysUserIds">Key User Id's or Hex Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given data stream with supplied public (encryption) and private (signing) keys
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStream
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Signing private key Id (usually our own private key)
             		string signingKeyUserId = ks.GetKeyIdForKeyIdHex("D689132A");
             		string signingKeyPassword = "private key password";
             		
                     // Public key Id used for encryption (usually the public key of the recipient)
                     string encryptionUserId = ks.GetKeyIdForKeyIdHex("A345B201");
             
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = File.OpenRead(@"DataFiles\public_key.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStream(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 encryptionUserId,
                                                 outputStream, 
                                                 asciiArmor,
                                                 withIntegrityCheck);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
             		' initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' Signing private key Id (usually our own private key)
             		Dim signingKeyUserId As Long = ks.GetKeyIdForKeyIdHex("D689132A")
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Public key Id used for encryption (usually the public key of the recipient)
                     Dim encryptionUserId As Long = ks.GetKeyIdForKeyIdHex("A345B201")
             
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStream(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 encryptionUserId, _
                                                 outputStream, _
                                                 asciiArmor, _
                                                 withIntegrityCheck)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="privateSigningKeyId">Key Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="privateKeyPassword">The password of the private key</param>
      <param name="publicEncryptionKeyId">Key Id of the recipients' public key used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the output.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64[],System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given data stream with supplied public (encryption) and private (signing) keys
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStream
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Signing private key Id (usually our own private key)
             		string signingKeyUserId = ks.GetKeyIdForKeyIdHex("D689132A");
             		string signingKeyPassword = "private key password";
             		
                     // Multiple recipients public keys
                     long encKeyIds[] = new long[] {keyStore.GetKeyIdForKeyIdHex("74BB3286"),
                                                     keyStore.GetKeyIdForKeyIdHex("D689132A")};
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStream(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 encKeyIds,
                                                 outputStream, 
                                                 asciiArmor,
                                                 withIntegrityCheck);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
             		' initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' Signing private key Id (usually our own private key)
             		Dim signingKeyUserId As Long = ks.GetKeyIdForKeyIdHex("D689132A")
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Multiple recipients public keys
                     Dim encKeyIds As Long() = New Long() {keyStore.GetKeyIdForKeyIdHex("74BB3286"), _
                                                           keyStore.GetKeyIdForKeyIdHex("D689132A")}
             
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStream(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 encKeyIds, _
                                                 outputStream, _
                                                 asciiArmor, _
                                                 withIntegrityCheck)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingKeyId">Key Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingKeyPassword">The password of the private key </param>
      <param name="encryptionKeysIds">Key Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the output.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStreamV3(System.IO.Stream,System.String,System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts in one pass given data stream using the old version 3 digital signatures
             </summary>
      <remarks>
             This method produces output that can be decrypted and verified with PGP 6.5.x and McAfee E-Business server 7.x
             <para>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             </para><para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStreamV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
                     // Signing private key (usually our own private key)
                     Stream signingPrivateKeyStream = File.OpenRead(@"DataFiles\private_key.asc");
                     
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = File.OpenRead(@"DataFiles\public_key.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStreamV3(dataStream,
                                                 internalFileNameLabel,
                                                 signingPrivateKeyStream, 
                                                 "private key password",
                                                 encryptionPublicKeyStream,
                                                 outputStream, 
                                                 asciiArmor);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStreamV3
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
                     ' Signing private key (usually our own private key)
                     Dim signingPrivateKeyStream As Stream = New FileInfo("DataFiles\private_key.asc").OpenRead()
                     
                     ' Public key used for encryption (usually the public key of the recipient)
                     Dim encryptionPublicKeyStream As Stream = New FileInfo("DataFiles\public_key.asc").OpenRead()
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStreamV3(dataStream, _
                                                 internalFileNameLabel,
                                                 signingPrivateKeyStream, _
                                                 "private key password", _
                                                 encryptionPublicKeyStream, _
                                                 outputStream, _
                                                 asciiArmor)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyStream">Public key as stream, used for encryption</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStreamV3(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts in one pass given data stream using the old version 3 digital signatures
             </summary>
      <remarks>
             This method produces output that can be decrypted and verified with PGP 6.5.x and McAfee E-Business server 7.x
             <para>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             </para><para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStreamV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
             		string signingKeyUserId = "myemail@mycompany.com";
             		string signingKeyPassword = "private key password";
             		
                     string encryptionUserId = "recipient@company.com";
             
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = File.OpenRead(@"DataFiles\public_key.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStreamV3(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 encryptionUserId,
                                                 outputStream, 
                                                 asciiArmor);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
                     ' Signing private key User Id (usually our own private key)
             		Dim signingKeyUserId As String = "myemail@mycompany.com"
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Public key User Id used for encryption (usually the public key of the recipient)
                     Dim encryptionUserId As String = "recipient@company.com"
             
             		// initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStreamV3(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 encryptionUserId, _
                                                 outputStream, _
                                                 asciiArmor)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingPrivateKeyUserId">Key User Id or Hex Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingPrivateKeyPassword">The password of the private key</param>
      <param name="encryptionPublicKeyUserIds">Key User Id's or Hex Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStreamV3(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String[],System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts in one pass given data stream using the old version 3 digital signatures
             </summary>
      <remarks>
             This method produces output that can be decrypted and verified with PGP 6.5.x and McAfee E-Business server 7.x
             <para>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             </para><para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStreamV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
             		string signingKeyUserId = "myemail@mycompany.com";
             		string signingKeyPassword = "private key password";
             		
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Public keys' User Id or Hex Id used for encryption
                     string encUserId1 = "Receiver1@company1.com";
                     string encUserId2 = "D689132A";
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStreamV3(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 new string[encUserId1, encUserId2],
                                                 outputStream, 
                                                 asciiArmor);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStreamV3
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
                     ' Signing private key User Id (usually our own private key)
             		Dim signingKeyUserId As String = "myemail@mycompany.com"
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Public keys' User Id or Hex Id used for encryption
                     Dim encUserId1 As String = "Receiver1@company.com"
                     Dim encUserId2 As String = "D689132A"
             
             		// initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStreamV3(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 New String() {encUserId1, encUserId2}, _ 
                                                 outputStream, _
                                                 asciiArmor)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingPrivateKeyUserId">Key User Id or Hex Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingPrivateKeyPassword">The password of the private key</param>
      <param name="encryptionPublicKeysUserIds">Key User Id's or Hex Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStreamV3(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64,System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts in one pass given data stream using the old version 3 digital signatures
             </summary>
      <remarks>
             This method produces output that can be decrypted and verified with PGP 6.5.x and McAfee E-Business server 7.x
             <para>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             </para><para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStreamV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Signing private key Id (usually our own private key)
             		string signingKeyUserId = ks.GetKeyIdForKeyIdHex("D689132A");
             		string signingKeyPassword = "private key password";
             		
                     // Public key Id used for encryption (usually the public key of the recipient)
                     string encryptionUserId = ks.GetKeyIdForKeyIdHex("A345B201");
             
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = File.OpenRead(@"DataFiles\public_key.asc");
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStreamV3(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 encryptionUserId,
                                                 outputStream, 
                                                 asciiArmor);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStreamV3
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
             		' initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' Signing private key Id (usually our own private key)
             		Dim signingKeyUserId As Long = ks.GetKeyIdForKeyIdHex("D689132A")
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Public key Id used for encryption (usually the public key of the recipient)
                     Dim encryptionUserId As Long = ks.GetKeyIdForKeyIdHex("A345B201")
             
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStreamV3(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 encryptionUserId, _
                                                 outputStream, _
                                                 asciiArmor)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="privateSigningKeyId">Key Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="privateKeyPassword">The password of the private key</param>
      <param name="publicEncryptionKeyId">Key Id of the recipients' public key used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptStreamV3(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64[],System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts in one pass given data stream using the old version 3 digital signatures
             </summary>
      <remarks>
             This method produces output that can be decrypted and verified with PGP 6.5.x and McAfee E-Business server 7.x
             <para>
             * (Note that this is not the same as first encrypt and then sign, because in that case a double compression is performed.)
             </para><para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to OpenPGP one pass sign and encrypt a data stream.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptStreamV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
             		// initialize the key store
             		KeyStore ks = new KeyStore(@"c:\my_key.store", "key store password");
             		         
                     // Signing private key Id (usually our own private key)
             		string signingKeyUserId = ks.GetKeyIdForKeyIdHex("D689132A");
             		string signingKeyPassword = "private key password";
             		
                     // Multiple recipients public keys
                     long encKeyIds[] = new long[] {keyStore.GetKeyIdForKeyIdHex("74BB3286"),
                                                     keyStore.GetKeyIdForKeyIdHex("D689132A")};
                     
                     // data stream to be signed and encrypted
                     Stream dataStream = File.OpenRead(@"DataFiles\INPUT.txt");
             
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel = "INPUT.txt";
                     
                     // Encrypted and signed output
                     using (Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create())
                     {
                         pgp.SignAndEncryptStreamV3(dataStream,
                                                 internalFileNameLabel,
                                                 ks, 
                                                 signingKeyUserId,
                                                 signingKeyPassword,
                                                 encKeyIds,
                                                 outputStream, 
                                                 asciiArmor);			
                     }
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptStream
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
             		' initialize the key store
             		Dim ks As KeyStore = New KeyStore("c:\my_key.store", "key store password")
                     
                     ' Signing private key Id (usually our own private key)
             		Dim signingKeyUserId As Long = ks.GetKeyIdForKeyIdHex("D689132A")
             		Dim signingKeyPassword As String = "private key password"
             		
                     ' Multiple recipients public keys
                     Dim encKeyIds As Long() = New Long() {keyStore.GetKeyIdForKeyIdHex("74BB3286"), _
                                                           keyStore.GetKeyIdForKeyIdHex("D689132A")}
             
                     ' data stream to be signed and encrypted
                     Dim dataStream As Stream = New FileInfo("DataFiles\INPUT.txt").OpenRead()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     ' Encrypted and signed output stream
                     Using outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                         pgp.SignAndEncryptStreamV3(dataStream, _
                                                 internalFileNameLabel,
                                                 ks,
                                                 signingKeyUserId, _
                                                 signingKeyPassword, _
                                                 encKeyIds, _
                                                 outputStream, _
                                                 asciiArmor)
                     End Using                       
            		End Sub
            	End Class
             </code></example>
      <param name="dataStream">Data stream to be OpenPGP signed</param>
      <param name="internalFileNameLabel">File Name to be stored in the PGP archive</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the signing and encryption keys</param>
      <param name="signingKeyId">Key Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingKeyPassword">The password of the private key </param>
      <param name="encryptionKeysIds">Key Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with this User Id or Key Hex Id in the specified KeyStore</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,System.String,System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given file with supplied public (encryption) and private (signing) keys
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncrypt
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // Signing private key (usually our own private key)
                     Stream signingPrivateKeyStream = new FileInfo(@"DataFiles\private_key.asc").OpenRead();
                     
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = new FileInfo(@"DataFiles\public_key.asc").OpenRead();
                     
                     // Encrypted output
                     Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create();
                     
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel As String = "INPUT.txt";
                     
                     pgp.SignAndEncryptFile(@"DataFiles\INPUT.txt",
                                             internalFileNameLabel,
                                            signingPrivateKeyStream, 
                                            "private key password",
                                            encryptionPublicKeyStream,
                                            outputStream, 
                                            asciiArmor,
                                            withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncrypt
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     ' Signing private key (usually our own private key)
                     Dim signingPrivateKeyStream As Stream = New FileInfo("DataFiles\private_key.asc").OpenRead()
                     
                     ' Public key used for encryption (usually the public key of the recipient)
                     Dim encryptionPublicKeyStream As Stream = New FileInfo("DataFiles\public_key.asc").OpenRead()
                     
                     ' Encrypted output
                     Dim outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
                     
                     pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _
                                             internalFileNameLabel,
                                            signingPrivateKeyStream, _
                                            "private key password", _
                                            encryptionPublicKeyStream, _
                                            outputStream, _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <param name="dataFileName">File containing the data to be OpenPGP signed and encrypted (absolute or relative path) </param>
      <param name="internalFileNameLabel">File name label to be stored in the PGP archive. This is usually the file name without the file path.</param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyStream">Public key as stream, used for encryption</param>
      <param name="outputStream">output stream of the OpenPGP archive</param>
      <param name="armor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,System.String,System.IO.Stream,System.String,System.IO.Stream[],System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given file in one pass for multiple recipients
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to sign and encrypt a file in one pass.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncrypt
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
            	        // If true additional integrity check information will be appended
            	        bool withIntegrityCheck = false;
            	        
                     // Signing private key (usually our own private key)
                     Stream signingPrivateKeyStream = new FileInfo(@"DataFiles\private_key.asc").OpenRead();
                     
                     // Public keys used for encryption
                     Stream recpient1PublicKeyStream = File.OpenRead(@"DataFiles\public_key1.asc");
                     Stream recpient2PublicKeyStream = File.OpenRead(@"DataFiles\public_key2.asc");
                     
                     // Encrypted output
                     Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create();
                     
                     // internal file name label to be associated with the encrypted data
                     string internalFileNameLabel As String = "INPUT.txt";
             
                     pgp.SignAndEncryptFile(@"DataFiles\INPUT.txt",
                                             internalFileNameLabel,
                                            signingPrivateKeyStream, 
                                            "private key password",
                                            new Stream[]{recpient1PublicKeyStream, recpient2PublicKeyStream},
                                            outputStream, 
                                            asciiArmor,
                                            withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncrypt
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
                     ' If true additional integrity check information will be appended
                     Dim withIntegrityCheck As Boolean = False
                     
                     ' Signing private key (usually our own private key)
                     Dim signingPrivateKeyStream As Stream = New FileInfo("DataFiles\private_key.asc").OpenRead()
                     
                     ' Public key used for encryption (usually the public key of the recipient)
                     Dim recipient1PublicKeyStream As Stream = File.OpenRead("DataFiles\public_key1.asc")
                     Dim recipient2PublicKeyStream As Stream = File.OpenRead("DataFiles\public_key2.asc")
                     
                     ' Encrypted output
                     Dim outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                     ' internal file name label to be associated with the encrypted data
                     Dim internalFileNameLabel As String = "INPUT.txt"
             
                     pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _
                                             internalFileNameLabel,
                                            signingPrivateKeyStream, _
                                            "private key password", _
                                            New Stream() {recpient1PublicKeyStream, recpient2PublicKeyStream}, _
                                            outputStream, _
                                            asciiArmor, _
                                            withIntegrityCheck)
            		End Sub
            	End Class
             </code></example>
      <param name="dataFile">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="internalFileNameLabel">File name label to be stored in the PGP archive. This is usually the file name without the file path.</param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeysStreams">Recipients public keys supplied as streams</param>
      <param name="outputStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check be added to the file.</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFileV3(System.String,System.String,System.IO.Stream,System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given file backward compatibile with PGP 6.5 and below
             </summary>
      <remarks>
             * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             <para>
             Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Compression" /></para>
             Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Cypher" /></remarks>
      <example>
             This sample shows how to sign and encrypt a file in one pass backward compatibile with PGP 6.5 and below
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class SignAndEncryptV3
            	{
            		public void Demo()
            		{
            		    // Create an instance of the library
            	        PGPLib pgp = new PGPLib();
            	
                     // Should output be ASCII (true) or binary (false)
            	        bool asciiArmor = false;
            	        
                     // Signing private key (usually our own private key)
                     Stream signingPrivateKeyStream = new FileInfo(@"DataFiles\private_key.asc").OpenRead()
                     // Public key used for encryption (usually the public key of the recipient)
                     Stream encryptionPublicKeyStream = new FileInfo(@"DataFiles\public_key.asc").OpenRead()
                     // Encrypted output
                     Stream outputStream = new FileInfo(@"DataFiles\OUTPUT.pgp").Create()
                     
                     pgp.SignAndEncryptFileV3(@"DataFiles\INPUT.txt",
                                             "INPUT.txt",
                                            signingPrivateKeyStream, 
                                            "private key password",
                                            encryptionPublicKeyStream,
                                            outputStream, 
                                            asciiArmor);			
            		}
            	}
             </code><code lang="VB">
             VB.NET
             <hr></hr>
            	Imports System
            	Imports System.IO
            	Imports DidiSoft.Pgp
            
            	Public Class SignAndEncryptV3
            		Public Sub Demo()
            		    ' Create an instance of the library
                     Dim pgp As New PGPLib()
            
                     ' Should output be ASCII (true) or binary (false)
                     Dim asciiArmor As Boolean = False
                     
                     ' Signing private key (usually our own private key)
                     Dim signingPrivateKeyStream As Stream = New FileInfo("DataFiles\private_key.asc").OpenRead()
                     ' Public key used for encryption (usually the public key of the recipient)
                     Dim encryptionPublicKeyStream As Stream = New FileInfo("DataFiles\public_key.asc").OpenRead()
                     ' Encrypted output
                     Dim outputStream As Stream = New FileInfo("DataFiles\OUTPUT.pgp").Create()
             
                     pgp.SignAndEncryptFileV3("DataFiles\INPUT.txt", _
                                             "INPUT.txt",
                                            signingPrivateKeyStream, _
                                            "private key password", _
                                            encryptionPublicKeyStream, _
                                            outputStream, _
                                            asciiArmor)
            		End Sub
            	End Class
             </code></example>
      <param name="dataFile">File containing the data to be OpenPGP signed and encrypted (absolute or relative path) </param>
      <param name="embeddedFileName">File Name to be stored in the PGP archive</param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="publicKeyStream">Public key as stream, used for encryption</param>
      <param name="outputStream">output stream for the OpenPGP archive</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file with public and private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
                  * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             </remarks>
      <param name="inputFileName">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the keys</param>
      <param name="signingKeyUserId">User Id or hexadecimal Key ID of the sender's key (usually our key).
                                            The first private key with this User Id located in <b>keyStore</b> is used for signing.</param>
      <param name="signingKeyPassword">Private key password</param>
      <param name="encryptionKeyUserId">User Id or hexadecimal Key ID of the recipient's key.
                                         The first public key with this User Id located in <b>keyStore</b> is used for encryption.</param>
      <param name="outputFileName">File name of the PGP Signed file (absolute or relative path)</param>
      <param name="armor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass when the keys are stored in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreSignAndeEncryptFile
            	{
            		public static void Demo()
            		{
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                     // Create an instance of the library
                     PGPLib pgp = new PGPLib();
            
                     // Should output be ASCII (true) or binary (false)
                     bool asciiArmor = true;
                     // If true additional integrity check information will be appended
                     bool withIntegrityCheck = true;
            
                     String signUserId = "My Company contact@mycompany.com";
                     String privateKeyPassword = "private key password"; 
                     
                     String encUserId = "Receiver@company.com";
            
                     pgp.SignAndEncryptFile("INPUT.txt",
            					              keyStore,
            					              signUserId,
            					              privateKeyPassword,
            					              encUserId,
            					              "OUTPUT.pgp",                                  
            					              asciiArmor, 
            					              withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class KeyStoreSignAndEncryptFile
                    Public Shared Sub Demo()
                        Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                        ' Create an instance of the library
                        Dim pgp As New PGPLib()
            
                        ' Should output be ASCII (true) or binary (false)
                        Dim asciiArmor As Boolean = True
                        ' If true additional integrity check information will be appended
                        Dim withIntegrityCheck As Boolean = True
            
                        Dim signUserId As String = "My Company contact@mycompany.com"
                        Dim privateKeyPassword As String = "private key password"
                        
                        Dim encUserId As String = "Receiver@company.com"
            
                        pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _ 
                                               keyStore, _
                                               signUserId, _ 
                                               privateKeyPassword, _ 
                                               encUserId, _ 
                                               "DataFiles\OUTPUT.pgp", _ 
                                               asciiArmor, 
                                               withIntegrityCheck)
                    End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no signing private key in the <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String[],System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file with public and private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
                  * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             </remarks>
      <param name="inputFileName">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the keys</param>
      <param name="signingKeyUserId">Signing key User Id or hexadecimal Key ID of the sender's key (usually our own).
                                            located in the specified <see cref="T:DidiSoft.Pgp.KeyStore" /></param>
      <param name="signingKeyPassword">Private key password</param>
      <param name="encryptionKeysUserIds">Recipients' keys User Id's or hexadecimal Key ID's
                                         located in the specified <see cref="T:DidiSoft.Pgp.KeyStore" />.</param>
      <param name="outputFileName">File name of the PGP Signed file (absolute or relative path)</param>
      <param name="armor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass with keys stored in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreSignAndEncryptFileMultiRcpt
            	{
            		public static void Demo()
            		{
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                     // Create an instance of the library
                     PGPLib pgp = new PGPLib();
            
                     // Should output be ASCII (true) or binary (false)
                     bool asciiArmor = true;
                     // If true additional integrity check information will be appended
                     bool withIntegrityCheck = true;
            
                     string signUserId = "My Company contact@mycompany.com";
                     string privateKeyPassword = "private key password"; 
                     
                     string encUserId1 = "Receiver1@company1.com";
                     string encUserId2 = "Receiver2@company2.com";
            
                     pgp.SignAndEncryptFile("INPUT.txt",
            					              keyStore,
            					              signUserId,
            					              privateKeyPassword,
            					              new string[encUserId1, encUserId2],
            					              "OUTPUT.pgp",                                  
            					              asciiArmor, 
            					              withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class KeyStoreSignAndEncryptFileMultiRcpt
                    Public Shared Sub Demo()
                        Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                        ' Create an instance of the library
                        Dim pgp As New PGPLib()
            
                        ' Should output be ASCII (true) or binary (false)
                        Dim asciiArmor As Boolean = True
                        ' If true additional integrity check information will be appended
                        Dim withIntegrityCheck As Boolean = True
            
                        Dim signUserId As String = "My Company contact@mycompany.com"
                        Dim privateKeyPassword As String = "private key password"
                        
                        Dim encUserId1 As String = "Receiver1@company.com"
                        Dim encUserId2 As String = "Receiver2@company.com"
            
                        pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _ 
                                               keyStore, _
                                               signUserId, _ 
                                               privateKeyPassword, _ 
                                               New String() {encUserId1, encUserId2}, _ 
                                               "DataFiles\OUTPUT.pgp", _ 
                                               asciiArmor, 
                                               withIntegrityCheck)
                    End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no signing private key in the <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64,System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given file with public and private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
                  * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             </remarks>
      <param name="inputFileName">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance</param>
      <param name="signingKeyId">Key Id of the private key used for signing, located in the <see cref="T:DidiSoft.Pgp.KeyStore" />.</param>
      <param name="signingKeyPassword">The password of the private key </param>
      <param name="encryptionKeyId">Key Id of the public key used for encryption, located in the <see cref="T:DidiSoft.Pgp.KeyStore" />.</param>
      <param name="outputFileName">File name of the PGP Signed file (absolute or relative path)</param>
      <param name="armor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass when the keys are stored in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreSignAndeEncryptFile
            	{
            		public static void Demo()
            		{
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                     // Create an instance of the library
                     PGPLib pgp = new PGPLib();
            
                     // Should output be ASCII (true) or binary (false)
                     bool asciiArmor = true;
                     // If true additional integrity check information will be appended
                     bool withIntegrityCheck = true;
            
                     // private key for signing 
                     long signKeyId = keyStore.GetKeyIdForKeyIdHex("D689132A");
                     String privateKeyPassword = "private key password"; 
                     
                     long encKeyId = keyStore.GetKeyIdForKeyIdHex("74BB3286");
            
                     pgp.SignAndEncryptFile("INPUT.txt",
            					              keyStore,
            					              signKeyId,
            					              privateKeyPassword,
            					              encKeyId,
            					              "OUTPUT.pgp",                                  
            					              asciiArmor, 
            					              withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class KeyStoreSignAndEncryptFile
                    Public Shared Sub Demo()
                        Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                        ' Create an instance of the library
                        Dim pgp As New PGPLib()
            
                        ' Should output be ASCII (true) or binary (false)
                        Dim asciiArmor As Boolean = True
                        ' If true additional integrity check information will be appended
                        Dim withIntegrityCheck As Boolean = True
            
                        ' private key for signing  
                        Dim signKeyId As Long = keyStore.GetKeyIdForKeyIdHex("D689132A")
                        Dim privateKeyPassword As String = "private key password"
                        
                        Dim encKeyId As Long = keyStore.GetKeyIdForKeyIdHex("74BB3286")
            
                        pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _ 
                                               keyStore, _
                                               signKeyId, _ 
                                               privateKeyPassword, _ 
                                               encKeyId, _ 
                                               "DataFiles\OUTPUT.pgp", _ 
                                               asciiArmor, 
                                               withIntegrityCheck)
                    End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no signing private key in the <see cref="T:DidiSoft.Pgp.KeyStore" /> with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFile(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64[],System.String,System.Boolean,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given file with public and private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
                  * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             </remarks>
      <param name="inputFileName">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance</param>
      <param name="signingKeyId">Key Id of the private key used for signing (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="signingKeyPassword">The password of the private key </param>
      <param name="encryptionKeysIds">Key Id's of the recipients' public keys used for encryption (located in the <see cref="T:DidiSoft.Pgp.KeyStore" />)</param>
      <param name="outputFileName">File name of the PGP Signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <param name="withIntegrityCheck">Should integrity check information be added to the file.</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass when the keys are stored in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreSignAndeEncryptFile
            	{
            		public static void Demo()
            		{
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                     // Create an instance of the library
                     PGPLib pgp = new PGPLib();
            
                     // Should output be ASCII (true) or binary (false)
                     bool asciiArmor = true;
                     // If true additional integrity check information will be appended
                     bool withIntegrityCheck = true;
            
                     // private key for signing 
                     long signKeyId = keyStore.GetKeyIdForKeyIdHex("D689132A");
                     String privateKeyPassword = "private key password";
                     
                     // Multiple recipients public keys
                     long encKeyIds[] = new long[] {keyStore.GetKeyIdForKeyIdHex("74BB3286"),
                                                     keyStore.GetKeyIdForKeyIdHex("D689132A")};
            
                     pgp.SignAndEncryptFile("INPUT.txt",
            					              keyStore,
            					              signKeyId,
            					              privateKeyPassword,
            					              encKeyIds,
            					              "OUTPUT.pgp",                                  
            					              asciiArmor, 
            					              withIntegrityCheck);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class KeyStoreSignAndEncryptFile
                    Public Shared Sub Demo()
                        Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                        ' Create an instance of the library
                        Dim pgp As New PGPLib()
            
                        ' Should output be ASCII (true) or binary (false)
                        Dim asciiArmor As Boolean = True
                        ' If true additional integrity check information will be appended
                        Dim withIntegrityCheck As Boolean = True
                        
                        ' private key for signing 
                        Dim signKeyId As Long = keyStore.GetKeyIdForKeyIdHex("D689132A")
                        Dim privateKeyPassword As String = "private key password"
                        
                        ' Multiple recipients public keys
                        Dim encKeyIds As Long() = New Long() {keyStore.GetKeyIdForKeyIdHex("74BB3286"), _
                                                                 keyStore.GetKeyIdForKeyIdHex("D689132A")}
            
                        pgp.SignAndEncryptFile("DataFiles\INPUT.txt", _ 
                                               keyStore, _
                                               signKeyId, _ 
                                               privateKeyPassword, _ 
                                               encKeyIds, _ 
                                               "DataFiles\OUTPUT.pgp", _ 
                                               asciiArmor, 
                                               withIntegrityCheck)
                    End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no signing private key in the <see cref="T:DidiSoft.Pgp.KeyStore" /> with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFileV3(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP Signs and encrypts given file backward compatible with PGP 6.5 and below, with public and private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
                  * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             </remarks>
      <param name="inputFileName">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the keys</param>
      <param name="signingKeyUserId">User Id or hexadecimal Key ID of the sender's key (usually our own).
                                            The first private key with this User Id located in <b>keyStore</b> is used for signing.</param>
      <param name="signingKeyPassword">Private key password</param>
      <param name="encryptionKeyUserId">User Id or hexadecimal Key ID of the recipient's key.
                                         The first public key with this User Id located in <b>keyStore</b> is used for encryption.</param>
      <param name="outputFileName">File name of the PGP Signed file (absolute or relative path)</param>
      <param name="armor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass, backward compatible with PGP 6.5 and below
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreSignAndeEncryptFileV3
            	{
            		public static void Demo()
            		{
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                     // Create an instance of the library
                     PGPLib pgp = new PGPLib();
            
                     // Should output be ASCII (true) or binary (false)
                     bool asciiArmor = true;
            
                     String signUserId = "My Company contact@mycompany.com";
                     String privateKeyPassword = "private key password"; 
                     String encUserId = "Receiver Company support@didisoft.com";
            
                     pgp.SignAndEncryptFileV3("INPUT.txt",
            					              keyStore,
            					              signUserId,
            					              privateKeyPassword,
            					              encUserId,
            					              "OUTPUT.pgp",                                  
            					              asciiArmor);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class KeyStoreSignAndEncryptFileV3
                    Public Shared Sub Demo()
                        Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                        ' Create an instance of the library
                        Dim pgp As New PGPLib()
            
                        ' Should output be ASCII (true) or binary (false)
                        Dim asciiArmor As Boolean = True
            
                        Dim signUserId As String = "My Company contact@mycompany.com"
                        Dim privateKeyPassword As String = "private key password"
                        Dim encUserId As String = "Receiver Company support@didisoft.com"
            
                        pgp.SignAndEncryptFileV3("DataFiles\INPUT.txt", _ 
                                               keyStore, _
                                               signUserId, _ 
                                               privateKeyPassword, _ 
                                               encUserId, _ 
                                               "DataFiles\OUTPUT.pgp", _ 
                                               asciiArmor)
                    End Sub
            	End Class
             </code></example>
      <exception cref="T:System.IO.IOException">I/O error </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no signing private key in the <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignAndEncryptFileV3(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64,System.String,System.Boolean)">
      <summary>
             OpenPGP signs and encrypts given file backward compatible with PGP 6.5 and below, with public and private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /></summary>
      <remarks>
                  * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
             </remarks>
      <param name="inputFileName">File Name to be PGP Signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance</param>
      <param name="signingKeyId">Key Id of the private key used for signing, located in the <see cref="T:DidiSoft.Pgp.KeyStore" />.</param>
      <param name="signingKeyPassword">The password of the private key </param>
      <param name="encryptionKeyId">Key Id of the public key used for encryption, located in the <see cref="T:DidiSoft.Pgp.KeyStore" />.</param>
      <param name="outputFileName">File name of the PGP Signed file (absolute or relative path)</param>
      <param name="armor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to sign and encrypt a file in one pass when the keys are stored in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             <code lang="C#">
            	using System;
            	using DidiSoft.Pgp;
            
            	public class KeyStoreSignAndeEncryptFileV3
            	{
            		public static void Demo()
            		{
                    KeyStore keyStore = new KeyStore(@"DataFiles\key.store", "key store password");		
                     // Create an instance of the library
                     PGPLib pgp = new PGPLib();
            
                     // Should output be ASCII (true) or binary (false)
                     bool asciiArmor = true;
            
                     long signKeyId = keyStore.GetKeyIdForKeyIdHex("D689132A");
                     String privateKeyPassword = "private key password"; 
                     long encKeyId = keyStore.GetKeyIdForKeyIdHex("74BB3286");
            
                     pgp.SignAndEncryptFileV3("INPUT.txt",
            					              keyStore,
            					              signKeyId,
            					              privateKeyPassword,
            					              encKeyId,
            					              "OUTPUT.pgp",                                  
            					              asciiArmor);			
            		}
            	}
             </code><code lang="VB">
            	Imports System
            	Imports DidiSoft.Pgp
            
            	Public Class KeyStoreSignAndEncryptFileV3
                    Public Shared Sub Demo()
                        Dim keyStore As New KeyStore("DataFiles\key.store", "key store password")
                        ' Create an instance of the library
                        Dim pgp As New PGPLib()
            
                        ' Should output be ASCII (true) or binary (false)
                        Dim asciiArmor As Boolean = True
            
                        Dim signUserId As Long = keyStore.GetKeyIdForKeyIdHex("D689132A")
                        Dim privateKeyPassword As String = "private key password"
                        Dim encUserId As Long = keyStore.GetKeyIdForKeyIdHex("74BB3286")
            
                        pgp.SignAndEncryptFileV3("DataFiles\INPUT.txt", _ 
                                               keyStore, _
                                               signKeyId, _ 
                                               privateKeyPassword, _ 
                                               encKeyId, _ 
                                               "DataFiles\OUTPUT.pgp", _ 
                                               asciiArmor)
                    End Sub
            	End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no signing private key in the <see cref="T:DidiSoft.Pgp.KeyStore" /> with such Key Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFile(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file.
             </summary>
      <param name="fileName">File Name to be OpenPGP Signed (absolute or relative path) </param>
      <param name="privateKeyFileName">Private key file (absolute or relative path) or as ASCII armoured string</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="signedFileName">File name of the OpenPGP signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in file
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class SignDemo
             {
                public void Demo()
                {
                    PGPLib pgp = new PGPLib();
                    bool armor = true;
                    pgp.SignFile(@"C:\Test\INPUT.txt", 
                                    @"C:\Test\private.pkr", 
                                    "private key password",
                                    @"C:\Test\OUTPUT1.pgp", 
                                    armor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignDemo
                Public Sub Demo()
                    Dim pgp As New PGPLib()
                    Dim armor As Boolean = True
                    pgp.SignFile("C:\Test\INPUT.txt", _
                                 "C:\Test\private_key.asc", _
                                 "private key password", _
                                 "C:\Test\OUTPUT1.signed", _
                                 armor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFileV3(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file using OpenPGP version 3 signatures format (compatible with PGP 6.5 systems).
             </summary>
      <param name="fileName">File Name to be OpenPGP Signed (absolute or relative path) </param>
      <param name="privateKeyFileName">Private key file (absolute or relative path) or as ASCII armoured string </param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="signedFileName">File name of the OpenPGP signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in file
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class SignV3Demo
             {
                public void Demo()
                {
                    // Create and instance of the library  
                    PGPLib pgp = new PGPLib();
                    // Should output be ASCII armored (true) or binary (false)
                    bool asciiArmor = true;
                    
                    pgp.SignFileV3(@"C:\Test\INPUT.txt", 
                                    @"C:\Test\private.pkr", 
                                    "private key password",
                                    @"C:\Test\OUTPUT1.pgp", 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignV3Demo
                Public Sub Demo()
                    ' Create and instance of the library 
                    Dim pgp As New PGPLib()
                    
                    ' Should output be ASCII armored (true) or binary (false)
                    Dim asciiArmor As Boolean = True
                    
                    pgp.SignFileV3("C:\Test\INPUT.txt", _
                                 "C:\Test\private_key.asc", _
                                 "private key password", _
                                 "C:\Test\OUTPUT1.signed", _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file.
             </summary>
      <param name="dataFile">File to be OpenPGP signed </param>
      <param name="privateKeyFile">Private key file</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="signedFile">Output OpenPGP signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in file
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class SignDemo
             {
                public void Demo()
                {
                    PGPLib pgp = new PGPLib();
                    bool armor = true;
                    pgp.SignFile(new FileInfo(@"C:\Test\INPUT.txt"), 
                                    new FileInfo(@"C:\Test\private.pkr"), 
                                    "private key password",
                                    new FileInfo(@"C:\Test\OUTPUT.pgp"), 
                                    armor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class SignDemo
                Public Sub Demo()
                    Dim pgp As New PGPLib()
                    Dim armor As Boolean = True
                    pgp.SignFile(New FileInfo("C:\Test\INPUT.txt"), _
                                 New FileInfo("C:\Test\private.asc"), _
                                 "private key password", _
                                 New FileInfo("C:\Test\OUTPUT.pgp", _
                                 armor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.ArgumentNullException">if one or more of the FileInfo parameters are <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFileV3(System.IO.FileInfo,System.IO.FileInfo,System.String,System.IO.FileInfo,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file using OpenPGP version 3 signatures format (compatible with PGP 6.5 systems).
             </summary>
      <param name="dataFile">File to be OpenPGP signed </param>
      <param name="privateKeyFile">Private key file</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="signedFile">Output OpenPGP signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in file
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class SignV3Demo
             {
                public void Demo()
                {
                    // Create an instance of the library 
                    PGPLib pgp = new PGPLib();
                    // Should output be in ASCII armoured format
                    bool asciiArmor = true;
                    
                    pgp.SignFileV3(new FileInfo(@"C:\Test\INPUT.txt"), 
                                    new FileInfo(@"C:\Test\private.pkr"), 
                                    "private key password",
                                    new FileInfo(@"C:\Test\OUTPUT.pgp"), 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Pgp
            
             Public Class SignV3Demo
                Public Sub Demo()
                    ' Create an instance of the library 
                    Dim pgp As New PGPLib()
                    ' Should output be in ASCII armoured format
                    Dim asciiArmor As Boolean = True
                    
                    pgp.SignFileV3(New FileInfo("C:\Test\INPUT.txt"), _
                                 New FileInfo("C:\Test\private.asc"), _
                                 "private key password", _
                                 New FileInfo("C:\Test\OUTPUT.pgp", _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFile(System.String,System.IO.Stream,System.String,System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file.
             </summary>
      <remarks>
             The result file contains the input file in compressed form and a digital signature, but 
             without encryption. To sign a file with encryption use one of the <c>SignAndEncrypt</c> methods.
             </remarks>
      <param name="fileName">File Name to be signed (absolute or relative path) </param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in file
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class SignDemo
             {
                public void Demo()
                {
                    // initialize the library
                    PGPLib pgp = new PGPLib();
                    
                    // should output be binary or ASCII armored 
                    bool asciiArmor = true;
                    
                    Stream privateKeyStream = File.Open(@"C:\private_key.asc");
                    Stream outputSigned = File.Create(@"C:\OUTPUT.pgp"); 
                    
                    pgp.SignFile(@"C:\Test\INPUT.tdxt", 
                                    privateKeyStream, 
                                    "private key password",
                                    outputSigned, 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignDemo
                Public Sub Demo()
                    ' initialize the library 
                    Dim pgp As New PGPLib()
                    
                    ' should output be binary or ASCII armored 
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyStream As Stream = File.Open("C:\private_key.asc")
                    Dim outputSigned As Stream = File.Create(@"C:\OUTPUT.pgp");
                    
                    pgp.SignFile("C:\Test\INPUT.txt", _
                                 privateKeyStream, _
                                 "private key password", _
                                 outputSigned, _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStream(System.IO.Stream,System.String,System.IO.Stream,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP digitally signs a stream of data into another output stream.
            </summary>
      <param name="dataStream">Stream for reading, containing the data to be signed</param>
      <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="privateKeyStream">Private key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP digitally signs a stream of data into another output stream.
            </summary>
      <param name="dataStream">Stream for reading, containing the data to be signed</param>
      <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> object containing the private key that will be used for signing</param>
      <param name="privateKeyUserId">User Id or hexadecimal Key ID of the private key that will be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified User Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStream(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP digitally signs a stream of data into another output stream.
            </summary>
      <param name="dataStream">Stream for reading, containing the data to be signed</param>
      <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> object containing the private key that will be used for signing</param>
      <param name="privateKeyId">Key Id of the private key that will be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStreamV3(System.IO.Stream,System.String,System.IO.Stream,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP digitally signs a stream for reading using OpenPGP version 3 signatures format (compatible with PGP 6.5 and older systems).
            </summary>
      <param name="dataStream">Data stream for reading to be signed</param>
      <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="privateKeyStream">Private key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed content</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStreamV3(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP digitally signs a stream for reading using OpenPGP version 3 signatures format (compatible with PGP 6.5 and older systems).
            </summary>
      <param name="dataStream">Data stream for reading to be signed</param>
      <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> object containing the private key that will be used for signing</param>
      <param name="privateKeyUserId">User Id or hexadecimal Key ID of the private key that will be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed content</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified User ID</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStreamV3(System.IO.Stream,System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            OpenPGP digitally signs a stream for reading using OpenPGP version 3 signatures format (compatible with PGP 6.5 and older systems).
            </summary>
      <param name="dataStream">Data stream for reading to be signed</param>
      <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string <see cref="F:DidiSoft.Pgp.PGPLib.CONSOLE" /> will be used.</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> object containing the private key that will be used for signing</param>
      <param name="privateKeyId">Key Id of the private key that will be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP signed content</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFileV3(System.String,System.IO.Stream,System.String,System.IO.Stream,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file using OpenPGP version 3 signatures format (compatible with PGP 6.5 systems).
             </summary>
      <remarks>
             The result file contains the input file in compressed form and a digital signature, but 
             without encryption. To sign a file with encryption use one of the <c>SignAndEncrypt</c> methods.
             </remarks>
      <param name="fileName">File Name to be signed (absolute or relative path) </param>
      <param name="privateKeyStream">Private Key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">output stream of the PGP Signed file</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in file
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class SignDemoV3
             {
                public void Demo()
                {
                    // initialize the library
                    PGPLib pgp = new PGPLib();
                    
                    // should output be binary (false) or ASCII armored (true)
                    bool asciiArmor = true;
                    
                    Stream privateKeyStream = File.Open(@"C:\private_key.asc");
                    Stream outputSigned = File.Create(@"C:\OUTPUT.pgp"); 
                    
                    pgp.SignFileV3(@"C:\Test\INPUT.tdxt", 
                                    privateKeyStream, 
                                    "private key password",
                                    outputSigned, 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignDemoV3
                Public Sub Demo()
                    ' initialize the library 
                    Dim pgp As New PGPLib()
                    
                    ' should output be binary (false) or ASCII armored (true)
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyStream As Stream = File.Open("C:\private_key.asc")
                    Dim outputSigned As Stream = File.Create(@"C:\OUTPUT.pgp");
                    
                    pgp.SignFileV3("C:\Test\INPUT.txt", _
                                 privateKeyStream, _
                                 "private key password", _
                                 outputSigned, _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignString(System.String,System.IO.Stream,System.String)">
      <summary>
            OpenPGP digitally signs a string message.
            </summary>
      <param name="stringToSign">String message to be signed</param>
      <param name="privateKeyStream">Private key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>stringToSign OpenPGP signed</returns>
      <example>
            This example shows how to OpenPGP sign a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class SignString
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
                    // initialize the library 
            		PGPLib pgp = new PGPLib();
            		
                    using (Stream privateKeyStream = File.OpenRead(@"c:\private_key.asc"))
                    {
            		    String signedString = pgp.SignString(plainString,
            											 privateKeyStream,
            											 "private key password");
            			return signedString;
            		}
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class SignString
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
                    ' initialize the library 
            		Dim pgp As New PGPLib()
            		
                    Using privateKeyStream As Stream = File.OpenRead("c:\private_key.asc")
            		    Dim signedString As String = pgp.SignString(plainString, _
            													privateKeyStream, _
            													"private key password")
            			Return signedString										
            		End Using
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStringV3(System.String,System.IO.Stream,System.String)">
      <summary>
            OpenPGP digitally signs a string message.
            </summary>
      <param name="stringToSign">String message to be signed</param>
      <param name="privateKeyStream">Private key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>stringToSign OpenPGP signed</returns>
      <example>
            This example shows how to OpenPGP sign a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class SignStringV3
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
                    // initialize the library 
            		PGPLib pgp = new PGPLib();
            		
                    Stream privateKeyStream = File.OpenRead(@"c:\private_key.asc");
                    
            		String signedString = pgp.SignStringV3(plainString,
            											 privateKeyStream,
            											 "private key password");
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class SignStringV3
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
                    ' initialize the library 
            		Dim pgp As New PGPLib()
            		
                    Dim privateKeyStream As Stream = File.OpenRead("c:\private_key.asc")
                    
            		Dim signedString As String = pgp.SignStringV3(plainString, _
            													privateKeyStream, _
            													"private key password")
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStringV3(System.String,System.String,System.String)">
      <summary>
            OpenPGP digitally signs a string message in the old OpenPGP signature format
            </summary>
      <param name="stringToSign">String message to be signed</param>
      <param name="privateKey">Private key as String</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>stringToSign OpenPGP signed</returns>
      <example>
            This example shows how to OpenPGP sign a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class SignStringV3
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
                    // initialize the library 
            		PGPLib pgp = new PGPLib();
            		
                    String privateKey = " ... "; // private key in ASCII armoured format
                    
            		String signedString = pgp.SignStringV3(plainString,
            											 privateKey,
            											 "private key password");
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class SignStringV3
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
                    ' initialize the library 
            		Dim pgp As New PGPLib()
            		
                    Dim privateKey As String = " ... " 'private key in ASCII armoured format
                    
            		Dim signedString As String = pgp.SignStringV3(plainString, _
            													privateKeyStream, _
            													"private key password")
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignString(System.String,System.String,System.String)">
      <summary>
            OpenPGP digitally signs a string message.
            </summary>
      <param name="message">string message to be signed</param>
      <param name="privateKey">Private key as a String variable</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>OpenPGP signed string</returns>
      <example>
            This example shows how to OpenPGP sign a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class SignString
            {
            	public static String Demo()
            	{
            		string plainString = "Hello World";
            		
                    // initialize the library 
            		PGPLib pgp = new PGPLib();
                    		
                    string privateKey = " ... "; // private key in ASCII armoured format
            		string signedString = pgp.SignString(plainString,
            											 privateKey,
            											 "private key password");
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class SignString
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
                    ' initialize the library 
            		Dim pgp As New PGPLib()
            		Dim privateKey As String = " ... " ' private key in ASCII armoured format
            		Dim signedString As String = pgp.SignString(plainString, _
            													privateKey, _
            													"private key password")
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignString(System.String,System.IO.FileInfo,System.String)">
      <summary>
            OpenPGP digitally signs a string message.
            </summary>
      <param name="stringToSign">string message to be signed</param>
      <param name="privateKeyFile">Private key file, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>OpenPGP signed string</returns>
      <example>
            This example shows how to OpenPGP sign a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class SignString
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
                    // initialize the library 
            		PGPLib pgp = new PGPLib();
            		
            		String signedString = pgp.SignString(plainString,
            											 new FileInfo(@"c:\private_key.asc"),
            											 "private key password");
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class SignString
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
                    ' initialize the library 
            		Dim pgp As New PGPLib()
            		
            		Dim signedString As String = pgp.SignString(plainString, _
            													New FileInfo("c:\private_key.asc"), _
            													"private key password")
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
            OpenPGP signs a string message.
            </summary>
      <param name="stringToSign">string message to be signed</param>
      <param name="keyStore">key store containing the signing key</param>
      <param name="privateKeyUserId">signing key user Id or hexadecimal Key ID</param>
      <param name="privateKeyPassword">signing key password</param>
      <returns>OpenPGP signed string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreSignString
            {
            	public void Demo()
            	{
            		string signingKeyUserId = "support@didisoft.com";
            		string signingKeyPassword = "private key password";
            
            		// initialize the key store
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            		// if this key store contains a key with the desired recipient userId - encrypt,
            		// otherwise notify that there is no such key
            		if (ks.ContainsKey(signingKeyUserId))
            		{
            			PGPLib pgp = new PGPLib();
            
            			string plainText = "Hello World";
            
            			string signedString = pgp.SignString(plainText, ks, 
            												 signingKeyUserId,
            												 signingKeyPassword);
            		}
            		else
            		{
            			Console.WriteLine("No key with user Id:" + signingKeyUserId + " was found in this key store.");
            		}
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreSignString
            	Public Sub Demo()
            		Dim signingKeyUserId As String = "support@didisoft.com"
            		Dim signingKeyPassword As String = "private key password"
            
            		' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
            		' if this key store contains a key with the desired recipient userId - encrypt,
            		' otherwise notify that there is no such key
            		If ks.ContainsKey(signingKeyUserId) Then
            			Dim pgp As New PGPLib()
            
            			Dim plainText As String = "Hello World"
            
            			Dim signedString As String = pgp.SignString(plainText, ks, signingKeyUserId, signingKeyPassword)
            		Else
            			Console.WriteLine("No key with user Id:" + signingKeyUserId + " was found in this key store.")
            		End If
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignString(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String)">
      <summary>
            OpenPGP signs a string message.
            </summary>
      <param name="stringToSign">message to be signed</param>
      <param name="keyStore">key store containing the signing key</param>
      <param name="privateKeyId">signing key Id</param>
      <param name="privateKeyPassword">signing key password</param>
      <returns>OpenPGP signed string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreSignString
            {
            	public void Demo()
            	{
            		// initialize the key store
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            		long signingKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
            		string signingKeyPassword = "private key password";
            
            		// if this key store contains a key with the desired recipient userId - encrypt,
            		// otherwise notify that there is no such key
            		PGPLib pgp = new PGPLib();
            
            		string plainText = "Hello World";
            		string signedString = pgp.SignString(plainText, ks, 
            											 signingKeyUserId,
            											 signingKeyPassword);
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreSignString
            	Public Sub Demo()
            		' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
            		Dim signingKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
            		Dim signingKeyPassword As String = "private key password"
            		
            		Dim pgp As New PGPLib()
            
            		Dim plainText As String = "Hello World"
            		Dim signedString As String = pgp.SignString(plainText, ks, signingKeyUserId, signingKeyPassword)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such Key Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStringV3(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String)">
      <summary>
            OpenPGP signs a string message.
            </summary>
      <param name="stringToSign">message to be signed</param>
      <param name="keyStore">key store containing the signing key</param>
      <param name="privateKeyId">signing key Id</param>
      <param name="privateKeyPassword">signing key password</param>
      <returns>OpenPGP signed string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreSignStringV3
            {
            	public void Demo()
            	{
            		// initialize the key store
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            		long signingKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
            		string signingKeyPassword = "private key password";
            
            		// if this key store contains a key with the desired recipient userId - encrypt,
            		// otherwise notify that there is no such key
            		PGPLib pgp = new PGPLib();
            
            		string plainText = "Hello World";
            		string signedString = pgp.SignStringV3(plainText, ks, 
            											 signingKeyUserId,
            											 signingKeyPassword);
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreSignStringV3
            	Public Sub Demo()
            		' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
            		Dim signingKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
            		Dim signingKeyPassword As String = "private key password"
            		
            		Dim pgp As New PGPLib()
            
            		Dim plainText As String = "Hello World"
            		Dim signedString As String = pgp.SignStringV3(plainText, ks, signingKeyUserId, signingKeyPassword)
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such Key Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignStringV3(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
            OpenPGP signs a string message.
            </summary>
      <param name="stringToSign">string message to be signed</param>
      <param name="keyStore">key store containing the signing key</param>
      <param name="privateKeyUserId">signing key user Id or hexadecimal Key ID</param>
      <param name="privateKeyPassword">signing key password</param>
      <returns>OpenPGP signed string</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreSignStringV3
            {
            	public void Demo()
            	{
            		string signingKeyUserId = "support@didisoft.com";
            		string signingKeyPassword = "private key password";
            
            		// initialize the key store
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            
            		// if this key store contains a key with the desired recipient userId - encrypt,
            		// otherwise notify that there is no such key
            		if (ks.ContainsKey(signingKeyUserId))
            		{
            			PGPLib pgp = new PGPLib();
            
            			string plainText = "Hello World";
            
            			string signedString = pgp.SignStringV3(plainText, ks, 
            												 signingKeyUserId,
            												 signingKeyPassword);
            		}
            		else
            		{
            			Console.WriteLine("No key with user Id:" + signingKeyUserId + " was found in this key store.");
            		}
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreSignStringV3
            	Public Sub Demo()
            		Dim signingKeyUserId As String = "support@didisoft.com"
            		Dim signingKeyPassword As String = "private key password"
            
            		' initialize the key store
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            
            		' if this key store contains a key with the desired recipient userId - encrypt,
            		' otherwise notify that there is no such key
            		If ks.ContainsKey(signingKeyUserId) Then
            			Dim pgp As New PGPLib()
            
            			Dim plainText As String = "Hello World"
            
            			Dim signedString As String = pgp.SignStringV3(plainText, ks, signingKeyUserId, signingKeyPassword)
            		Else
            			Console.WriteLine("No key with user Id:" + signingKeyUserId + " was found in this key store.")
            		End If
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file with a private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             </summary>
      <param name="fileName">File Name to be signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="userId">User Id or hexadecimal Key ID of the sender's key (usually our own).
                                  The first private key with this <b>User Id</b> will be used for signing.</param>
      <param name="privateKeyPassword">The password of the private key </param>
      <param name="signedFileName">File name of the output OpenPGP signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <see langword="true" />, output file is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /><code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class SignDemo
             {
                public void Demo()
                {
             	   // initialize the key store
             	   KeyStore ks = new KeyStore(@"c:\key.store", "key store password");
             		
                    PGPLib pgp = new PGPLib();
                    
                    bool asciiArmor = true;
                    
                    string privateKeyUserId = "support@didisoft.com";
                    string privateKeypassword = "private key password";
                    
                    pgp.SignFile(@"C:\Test\INPUT.txt", 
                                    ks, 
                                    privateKeyUserId,
                                    privateKeypassword,
                                    @"C:\Test\OUTPUT1.pgp", 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignDemo
                Public Sub Demo()
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
                    Dim pgp As New PGPLib()
                    
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyUserId As String = "support@didisoft.com"
                    Dim privateKeypassword As String = "private key password"
                    
                    pgp.SignFile("C:\Test\INPUT.txt", _
                                 ks, _
                                 privateKeyUserId, _
                                 privateKeypassword, _
                                 "C:\Test\OUTPUT1.signed", _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,System.String,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFile(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file with a private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" />.
             </summary>
      <param name="fileName">File Name to be signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="keyId">Key Id of the private key that will be used for signing.</param>
      <param name="privateKeyPassword">The password of the private key </param>
      <param name="signedFileName">File name of the output OpenPGP signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <see langword="true" />, output file is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /><code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class SignDemo
             {
                public void Demo()
                {
             	   // initialize the key store
             	  KeyStore ks = new KeyStore(@"c:\key.store", "key store password");
             		
                    PGPLib pgp = new PGPLib();
                    
                    bool asciiArmor = true;
                    
                    long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
                    string privateKeypassword = "private key password";
                    
                    pgp.SignFile(@"C:\Test\INPUT.txt", 
                                    ks, 
                                    privateKeyId,
                                    privateKeypassword,
                                    @"C:\Test\OUTPUT1.pgp", 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignDemo
                Public Sub Demo()
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
                    Dim pgp As New PGPLib()
                    
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
                    Dim privateKeypassword As String = "private key password"
                    
                    pgp.SignFile("C:\Test\INPUT.txt", _
                                 ks, _
                                 privateKeyId, _
                                 privateKeypassword, _
                                 "C:\Test\OUTPUT1.signed", _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,System.String,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFileV3(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file using version 3 signature format (compatible with PGP 6.5 and below).
             </summary>
      <param name="fileName">File Name to be signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="keyId">Key Id of the private key that will be used for signing.</param>
      <param name="privateKeyPassword">The password of the private key </param>
      <param name="signedFileName">File name of the output OpenPGP signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <see langword="true" />, output file is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /><code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class SignV3Demo
             {
                public void Demo()
                {
             	   // initialize the key store
             	  KeyStore ks = new KeyStore(@"c:\key.store", "key store password");
             	   // Create an instance of the library	
                    PGPLib pgp = new PGPLib();
                    // Should output be in ASCII armoured format 
                    bool asciiArmor = true;
                    
                    long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
                    string privateKeypassword = "private key password";
                    
                    pgp.SignFileV3(@"C:\Test\INPUT.txt", 
                                    ks, 
                                    privateKeyId,
                                    privateKeypassword,
                                    @"C:\Test\OUTPUT1.pgp", 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignV3Demo
                Public Sub Demo()
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
                    ' Create an instance of the library  
                    Dim pgp As New PGPLib()
                    ' Should output be in ASCII armoured format 
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
                    Dim privateKeypassword As String = "private key password"
                    
                    pgp.SignFileV3("C:\Test\INPUT.txt", _
                                 ks, _
                                 privateKeyId, _
                                 privateKeypassword, _
                                 "C:\Test\OUTPUT1.signed", _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,System.String,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.SignFileV3(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.Boolean)">
      <summary>
             OpenPGP digitally signs a file using version 3 signature format (compatible with PGP 6.5 and below).
             </summary>
      <param name="fileName">File Name to be signed (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="userId">User Id or hexadecimal Key ID of the sender's key (usually our own).
                                  The first private key with this <b>User Id</b> will be used for signing.</param>
      <param name="privateKeyPassword">The password of the private key </param>
      <param name="signedFileName">File name of the output OpenPGP signed file (absolute or relative path)</param>
      <param name="asciiArmor">if <see langword="true" />, output file is in ASCII armoured format, otherwise in binary format</param>
      <example>
             This sample shows how to digitally sign file using private key located in a <see cref="T:DidiSoft.Pgp.KeyStore" /><code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class SignV3Demo
             {
                public void Demo()
                {
             	   // initialize the key store
             	  KeyStore ks = new KeyStore(@"c:\key.store", "key store password");
             	   // Create an instance of the library
                    PGPLib pgp = new PGPLib();
                    // Should output be ASCII armored 
                    bool asciiArmor = true;
                    
                    string privateKeyUserId = "support@didisoft.com";
                    string privateKeypassword = "private key password";
                    
                    pgp.SignFileV3(@"C:\Test\INPUT.txt", 
                                    ks, 
                                    privateKeyUserId,
                                    privateKeypassword,
                                    @"C:\Test\OUTPUT1.pgp", 
                                    asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class SignV3Demo
                Public Sub Demo()
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
                    ' Create an instance of the library
                    Dim pgp As New PGPLib()
                    ' Should output be ASCII armored 
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyUserId As String = "support@didisoft.com"
                    Dim privateKeypassword As String = "private key password"
                    
                    pgp.SignFileV3("C:\Test\INPUT.txt", _
                                 ks, _
                                 privateKeyUserId, _
                                 privateKeypassword, _
                                 "C:\Test\OUTPUT1.signed", _
                                 asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> with such User Id</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <seealso cref="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,System.String,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignFile(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
             Creates an OpenPGP detached signature for a file.
             </summary>
      <remarks>
             Hash algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Hash" /> (default is SHA-1)
             </remarks>
      <param name="fileName">File name for which an OpenPGP detached signature will be created (absolute or relative path) </param>
      <param name="privateKeyFileName">Private key file (absolute or relative path) or as ASCII armoured formated string</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="detachedSignatureFileName">File name where the detached signature will be stored (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c>, the output file is in ASCII armoured format, when <see langword="false" /> the output will be in binary format</param>
      <example>
             This sample shows how to create a detached signature for a file 
             when our private key is located in a file
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class DetachedSignDemo
             {
                public void Demo()
                {
                    PGPLib pgp = new PGPLib();
                    bool armor = true;
                    pgp.DetachedSignFile(@"C:\Test\INPUT.txt", 
                                         @"C:\Test\private_key.asc", 
                                         "key password",
                                         @"C:\Test\INPUT.txt.sig", 
                                         armor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DetachedSignDemo
                Public Sub Demo()
                    Dim pgp As New PGPLib()
                    Dim armor As Boolean = True
                    pgp.DetachedSignFile("C:\Test\INPUT.txt", _
                                         "C:\Test\private_key.asc", _
                                         "key password", _
                                         "C:\Test\INPUT.txt.sig", _
                                         armor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignFile(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.Boolean)">
      <summary>
             Creates an OpenPGP detached signature for a file.
             </summary>
      <remarks>
             Hash algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Hash" /> (default is SHA-1)
             </remarks>
      <param name="fileName">File name for which an OpenPGP detached signature will be created (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="userId">User Id or hexadecimal Key ID of the sender's key (usually our own)
                                  The first private key with this <b>User Id</b> will be used for signing.</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="detachedSignatureFileName">File name where the detached signature will be stored (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output file is in ASCII armoured format</param>
      <example>
             This sample shows how to create a detached signature for a file when 
             our private key is stored in a KeyStore
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class DetachedSignDemo
             {
                public void Demo()
                {
             	   // initialize the key store
             	   KeyStore ks = KeyStore.OpenFile(@"c:\mykey.store", "key store password");
             		
                    // create an instance of the library  
                    PGPLib pgp = new PGPLib();
                    
                    // should the output be ASCII (true) or binary (false) 
                    bool asciiArmor = true;
                    
                    // The private key can be specified through it's Key Hex Id too 
                    string privateKeyUserId = "support@didisoft.com";
                    string privateKeyPassword = "key password";
                    
                    pgp.DetachedSignFile(@"C:\Test\INPUT.txt", 
                                         ks,
                                         privateKeyUserId, 
                                         privateKeyPassword,
                                         @"C:\Test\INPUT.txt.sig", 
                                         asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DetachedSignDemo
                Public Sub Demo()
             	   ' initialize the key store
             	   Dim ks As KeyStore = KeyStore.OpenFile("DataFiles\key.store", "key store password")
             
                    ' create an instance of the library 
                    Dim pgp As New PGPLib()
                    
                    ' should the output be ASCII (true) or binary (false) 
                    Dim asciiArmor As Boolean = True
                    
                    ' The private key can be specified through it's Key Hex Id too
                    Dim privateKeyUserId As String = "support@didisoft.com"
                    Dim privateKeyPassword As String = "private key password"
                    
                    pgp.DetachedSignFile("C:\Test\INPUT.txt", _
                                         ks, _
                                         privateKeyUserId, _
                                         privateKeyPassword, _
                                         "C:\Test\INPUT.txt.sig", _
                                         asciiArmor)
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignFile(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.String,System.Boolean)">
      <summary>
             Creates an OpenPGP detached signature for a file.
             </summary>
      <remarks>
             Hash algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Hash" /> (default is SHA-1)
             </remarks>
      <param name="fileName">File name for which an OpenPGP detached signature will be created (absolute or relative path) </param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="keyId">Key Id of the private key that will be used for signing.</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="detachedSignatureFileName">File name where the detached signature will be stored (absolute or relative path)</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output file is in ASCII armoured format</param>
      <example>
             This sample shows how to create a detached signature for a file when our private key is stored in a KeyStore
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class DetachedSignDemo
             {
                public void Demo()
                {
             	   // initialize the key store
             	   KeyStore ks = new KeyStore(@"c:\mykey.store", "key store password");
             		
                    PGPLib pgp = new PGPLib();
                    
                    bool asciiArmor = true;
                    
                    long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
                    string privateKeypassword = "key password";
                    
                    pgp.DetachedSignFile(@"C:\Test\INPUT.txt", 
                                         ks,
                                         privateKeyId, 
                                         privateKeypassword,
                                         @"C:\Test\INPUT.txt.sig", 
                                         asciiArmor);				
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DetachedSignDemo
                Public Sub Demo()
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
             
                    Dim pgp As New PGPLib()
                    
                    Dim asciiArmor As Boolean = True
                    
                    Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
                    Dim privateKeypassword As String = "private key password"
                    
                    pgp.DetachedSignFile("C:\Test\INPUT.txt", _
                                         ks, _
                                         privateKeyId, _
                                         privateKeypassword, _
                                         "C:\Test\INPUT.txt.sig", _
                                         asciiArmor)
            
                End Sub
             End Class
             </code></example>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.String,System.String,System.IO.Stream,System.Boolean)">
      <summary>
             Creates an OpenPGP detached signature for a given data stream contents.
             </summary>
      <remarks>
             The caller has the responsibility to close the output stream.
             <para>
             Hash algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Hash" /> (default is SHA-1)
             </para></remarks>
      <param name="fileStream">Data stream for which a detached signature is to be created</param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="userId">User Id or hexadecimal Key ID of the sender's key (usually our own)
                                  The first private key with this <b>User Id</b> will be used for signing.</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">Output stream where the detached signature will be stored</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <example>
             This sample shows how to create a detached signature for a stream contents 
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class DetachedSignDemo
             {
                public void Demo()
                {
                    // create an instance of the library
                    PGPLib pgp = new PGPLib();
                    
                    // should the output be binary or ASCII armored 
                    bool asciiArmor = true;
                    
                    // initialize the KeyStore
             	   KeyStore ks = new KeyStore(@"c:\mykey.store", "key store password");
                    string privateKeyUserId = "support@didisoft.com";
                    
                    Stream dataFileStream = File.Open(@"C:\INPUT.txt"); 
                    using (Stream outputSigned = File.Create(@"C:\INPUT.txt.sig"))
                    {
                     pgp.DetachedSignStream(dataFileStream, 
                                           ks, 
                                           privateKeyUserId,
                                           "private key password",
                                           outputSigned, 
                                           asciiArmor);				
                    }
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DetachedSignDemo
                Public Sub Demo()
                    ' initialize the library 
                    Dim pgp As New PGPLib()
                    
                    ' should the output be binary or ASCII armored 
                    Dim asciiArmor As Boolean = True
                    
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
                    Dim privateKeyUserId As String = "support@didisoft.com"
                    
                    Dim dataFileStream As Stream = File.Open("C:\Test\INPUT.txt")
                    Using outputSigned As Stream = File.Create("C:\INPUT.txt.sig")
                     pgp.DetachedSignStream(dataFileStream, _
                                             ks, _
                                             privateKeyUserId, _
                                             "private key password", _
                                             outputSigned, _
                                             asciiArmor)
                    End Using
                End Sub
             End Class
             </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.IO.Stream,System.Boolean)">
      <summary>
             Creates an OpenPGP detached signature for a given data stream contents.
             </summary>
      <remarks>
             The caller has the responsibility to close the output stream.
             <para>
             Hash algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Hash" /> (default is SHA-1)
             </para></remarks>
      <param name="fileStream">Data stream for which a detached signature is to be created</param>
      <param name="keyStore">KeyStore instance containing the private key used for signing</param>
      <param name="keyId">Key Id of the private key that will be used for signing.</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">Output stream where the detached signature will be stored</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <example>
             This sample shows how to create a detached signature for a stream contents 
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class DetachedSignDemo
             {
                public void Demo()
                {
                    // create an instance of the library
                    PGPLib pgp = new PGPLib();
                    
                    // should output be binary or ASCII armored 
                    bool asciiArmor = true;
                    
                    // initialize the KeyStore
             	   KeyStore ks = new KeyStore(@"c:\mykey.store", "key store password");
                    long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
                    
                    Stream dataFileStream = File.Open(@"C:\INPUT.txt"); 
                    Stream outputSigned = null;
                    try 
                    {
                     outputSigned = File.Create(@"C:\INPUT.txt.sig"); 
                    
                     pgp.DetachedSignStream(dataFileStream, 
                                           ks, 
                                           privateKeyUserId,
                                           "private key password",
                                           outputSigned, 
                                           asciiArmor);				
                    } finally {
                     // we have the obligation to close the output stream
                     outputSigned.Close();
                    }
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DetachedSignDemo
                Public Sub Demo()
                    ' initialize the library 
                    Dim pgp As New PGPLib()
                    
                    ' should output be binary or ASCII armored 
                    Dim asciiArmor As Boolean = True
                    
             	   ' initialize the key store
             	   Dim ks As New KeyStore("DataFiles\key.store", "key store password")
                    Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
                    
                    Dim dataFileStream As Stream = File.Open("C:\Test\INPUT.txt")
                    Dim outputSigned As Stream = Nothing
                    Try  
                     outputSigned = File.Create("C:\INPUT.txt.sig")
                     
                     pgp.DetachedSignStream(dataFileStream, _
                                             ks, _
                                             privateKeyId, _
                                             "private key password", _
                                             outputSigned, _
                                             asciiArmor)
                    Finally
                     ' we have the obligation to close the output stream
                     outputSigned.Close()
                    End Try
                End Sub
             End Class
             </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignStream(System.IO.Stream,System.IO.Stream,System.String,System.IO.Stream,System.Boolean)">
      <summary>
             Creates an OpenPGP detached signature for a given data stream contents.
             </summary>
      <remarks>
             The caller has the responsibility to close the output stream.
             <para>
             Hash algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.PGPLib.Hash" /> (default is SHA-1)
             </para></remarks>
      <param name="dataStream">Data stream for which a detached signature is to be created</param>
      <param name="privateKeyStream">Private key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <param name="outStream">Output stream where the detached signature will be stored</param>
      <param name="asciiArmor">if <c><see langword="true" /></c> the output is in ASCII armoured format, otherwise in binary format</param>
      <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
      <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
      <example>
             This sample shows how to create a detached signature for a stream contents 
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Pgp;
            
             public class DetachedSignDemo
             {
                public void Demo()
                {
                    // initialize the library
                    PGPLib pgp = new PGPLib();
                    
                    // should the output be binary or ASCII armored 
                    bool asciiArmor = true;
                    
                    Stream dataFileStream = File.Open(@"C:\INPUT.txt"); 
                    Stream privateKeyStream = File.Open(@"C:\private_key.asc");
                    
                    using (Stream outputSigned = File.Create(@"C:\INPUT.txt.sig")
                    {
                     pgp.DetachedSignStream(dataFileStream, 
                                           privateKeyStream, 
                                           "private key password",
                                           outputSigned, 
                                           asciiArmor);				
                    }
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class DetachedSignDemo
                Public Sub Demo()
                    ' initialize the library 
                    Dim pgp As New PGPLib()
                    
                    ' should the output be binary or ASCII armored 
                    Dim asciiArmor As Boolean = True
                    
                    Dim dataFileStream As Stream = File.Open("C:\Test\INPUT.txt")
                    Dim privateKeyStream As Stream = File.Open("C:\private_key.asc")
                    
                    Using outputSigned As Stream = outputSigned = File.Create("C:\INPUT.txt.sig")
                     pgp.DetachedSignStream(dataFileStream, _
                                             privateKeyStream, _
                                             "private key password", _
                                             outputSigned, _
                                             asciiArmor)
                    End Using
                End Sub
             End Class
             </code></example>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignString(System.String,System.IO.Stream,System.String)">
      <summary>
            Creates an OpenPGP detached signature for a string message.
            </summary>
      <param name="stringToSign">String message to be signed</param>
      <param name="privateKeyStream">Private key as stream, used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>Detached OpenPGP signature</returns>
      <example>
            This example shows how to create an OpenPGP detached signature for a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class DetachedSignStringDemo
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
                    // initialize the library 
            		PGPLib pgp = new PGPLib();
            		
                    Stream privateKeyStream = File.OpenRead(@"c:\private_key.asc");
                    
            		String signedString = pgp.DetachedSignString(plainString,
            											        privateKeyStream,
            											        "private key password");
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class DetachedSignStringDemo
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
                    ' initialize the library 
            		Dim pgp As New PGPLib()
            		
                    Dim privateKeyStream As Stream = File.OpenRead("c:\private_key.asc")
                    
            		Dim signedString As String = pgp.DetachedSignString(plainString, _
            													        privateKeyStream, _
            													        "private key password")
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignString(System.String,DidiSoft.Pgp.KeyStore,System.String,System.String)">
      <summary>
            Creates an OpenPGP detached signature for a string message.
            </summary>
      <param name="stringToSign">String message to be signed</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the private key that will be used for signing</param>
      <param name="privateKeyUserId">Key User Id or Key Hex Id of the private key that will be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>Detached OpenPGP signature for the input string message</returns>
      <example>
            This example shows how to create an OpenPGP detached signature for a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class DetachedSignStringDemo
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
            	   // initialize the key store
            	   KeyStore ks = KeyStore.OpenFile(@"c:\mykey.store", "key store password");
            		
                   // create an instance of the library  
                   PGPLib pgp = new PGPLib();
                   
                   string privateKeyUserId = "support@didisoft.com";
                   string privateKeyPassword = "key password";
                    
            		String signedString = pgp.DetachedSignString(plainString,
            											        ks,
            											        privateKeyUserId,
            											        privateKeyPassword);
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class DetachedSignStringDemo
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
            	   ' initialize the key store
            	   Dim ks As KeyStore = KeyStore.OpenFile("DataFiles\key.store", "key store password")
            
                   ' create an instance of the library 
                   Dim pgp As New PGPLib()
                   
                   Dim privateKeyUserId As String = "support@didisoft.com"
                   Dim privateKeyPassword As String = "private key password"
                    
            		Dim signedString As String = pgp.DetachedSignString(plainString, _
            													        ks, _
            													        privateKeyUserId, _
            													        privateKeyPassword)
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedSignString(System.String,DidiSoft.Pgp.KeyStore,System.Int64,System.String)">
      <summary>
            Creates an OpenPGP detached signature for a string message.
            </summary>
      <param name="stringToSign">String message to be signed</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing the private key that will be used for signing</param>
      <param name="privateKeyId">Key Id of the private key that will be used for signing</param>
      <param name="privateKeyPassword">Private key password</param>
      <returns>Detached OpenPGP signature for the input string message</returns>
      <example>
            This example shows how to create an OpenPGP detached signature for a string message 
            <code lang="C#">
            using System;
            using System.IO;
            
            using DidiSoft.Pgp;
            
            class DetachedSignStringDemo
            {
            	public static String Demo()
            	{
            		String plainString = "Hello World";
            		
            	   // initialize the key store
            	   KeyStore ks = KeyStore.OpenFile(@"c:\mykey.store", "key store password");
            		
                   // create an instance of the library  
                   PGPLib pgp = new PGPLib();
                   
                   long privateKeyId = ks.GetKeyIdForKeyIdHex("8BA4CF8F");
                   string privateKeyPassword = "key password";
                    
            		String signedString = pgp.DetachedSignString(plainString,
            											        ks,
            											        privateKeyId,
            											        privateKeyPassword);
            		return signedString;
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            
            Imports DidiSoft.Pgp
            
            Class DetachedSignStringDemo
            	Public Shared Function Demo() As String
            		Dim plainString As String = "Hello World"
            
            	   ' initialize the key store
            	   Dim ks As KeyStore = KeyStore.OpenFile("DataFiles\key.store", "key store password")
            
                   ' create an instance of the library 
                   Dim pgp As New PGPLib()
                   
                   Dim privateKeyId As Long = ks.GetKeyIdForKeyIdHex("8BA4CF8F")
                   Dim privateKeyPassword As String = "private key password"
                    
            		Dim signedString As String = pgp.DetachedSignString(plainString, _
            													        ks, _
            													        privateKeyId, _
            													        privateKeyPassword)
            		Return signedString
            	End Function
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">If an I/O error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">if a signing error has occurred</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedVerifyString(System.String,System.String,System.IO.Stream)">
      <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>
      <param name="messageText">Message against which the detached signature is to be verified</param>
      <param name="detachedSignature">Detached signature</param>
      <param name="publicKeyStream">Input stream from the Public key</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <example>
            This example shows how to create and verify an OpenPGP detached signature
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class DetachedVerifyString
            {
            	public void Demo()
            	{
            		String plainString = "Hello World";
            
            		// initialize the library 
            		PGPLib pgp = new PGPLib();
            
            		Stream privateKeyStream = File.OpenRead(@"c:\private_key.asc");
            
            		String signedString = pgp.DetachedSignString(plainString,
            													privateKeyStream,
            													"key password");
            		Console.WriteLine(signedString);
            
            		Stream publicKeyStream = File.OpenRead(@"c:\public_key.asc");
            
            		bool correct = pgp.DetachedVerifyString(plainString, signedString, publicKeyStream);
            		if (correct)
            		{
            			Console.WriteLine("Signature is correct");
            		}
            		else
            		{
            			Console.WriteLine("Signature is wrong.");
            		}
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class DetachedVerifyString
            	Public Sub Demo()
            		Dim plainString As String = "Hello World"
            
            		' initialize the library 
            		Dim pgp As New PGPLib()
            
            		Dim privateKeyStream As Stream = File.OpenRead("c:\private_key.asc")
            
            		Dim signedString As String = pgp.DetachedSignString(plainString, privateKeyStream, "key password")
            		Console.WriteLine(signedString)
            
            		Dim publicKeyStream As Stream = File.OpenRead("c:\private_key.asc")
            
            		Dim correct As Boolean = pgp.DetachedVerifyString(plainString, _
            		                                                    signedString, _
            		                                                    publicKeyStream)
            		If correct Then
            			Console.WriteLine("Signature is correct")
            		Else
            			Console.WriteLine("Signature is wrong.")
            		End If
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedVerifyString(System.String,System.String,DidiSoft.Pgp.KeyStore)">
      <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>
      <param name="messageText">Message against which the detached signature is to be verified</param>
      <param name="detachedSignature">Detached signature</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing keys from trusted partners</param>
      <returns>
        <c>
          <see langword="true" />
        </c> if signed correctly, <see langword="false" /> if not signed with a key located in the specified <see cref="T:DidiSoft.Pgp.KeyStore" /></returns>
      <example>
            This example shows how to create and verify an OpenPGP detached signature
            <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class DetachedVerifyString
            {
            	public void Demo()
            	{
            		String plainString = "Hello World";
            
            		// initialize the library 
            		PGPLib pgp = new PGPLib();
            
            		KeyStore ks = KeyStore.OpenFile(@"c:\my_key.store", "keystore password");
            
                    string privateKeyUserId = "support@didisoft.com";
                    string privateKeyPassword = "key password";
                   
            		String signedString = pgp.DetachedSignString(plainString, ks, 
            		                                            privateKeyUserId,
            		                                            privateKeyPassword);
            		Console.WriteLine(signedString);
            
            		Stream publicKeyStream = File.OpenRead(@"c:\public_key.asc");
            
            		bool correct = pgp.DetachedVerifyString(plainString, signedString, ks);
            		if (correct)
            		{
            			Console.WriteLine("Signature is correct");
            		}
            		else
            		{
            			Console.WriteLine("Signature is wrong.");
            		}
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class DetachedVerifyString
            	Public Sub Demo()
            		Dim plainString As String = "Hello World"
            
            		' initialize the library 
            		Dim pgp As New PGPLib()
            
            		Dim ks As KeyStore = KeyStore.OpenFile("c:\my_keys.store", "keystore password");
            
                    Dim privateKeyUserId As String = "support@didisoft.com"
                    Dim privateKeyPassword As String = "private key password"
            
            		Dim signedString As String = pgp.DetachedSignString(plainString, ks, _
            		                                                    privateKeyUserId, _
            		                                                    privateKeyPassword)
            		Console.WriteLine(signedString)
            
            		Dim publicKeyStream As Stream = File.OpenRead("c:\private_key.asc")
            
            		Dim correct As Boolean = pgp.DetachedVerifyString(plainString, _
            		                                                    signedString, _
            		                                                    ks)
            		If correct Then
            			Console.WriteLine("Signature is correct")
            		Else
            			Console.WriteLine("Signature is wrong.")
            		End If
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedVerifyFile(System.String,System.String,System.String)">
      <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>
      <param name="dataFileName">Input File to be verified</param>
      <param name="detachedSignatureFileName">Detached signature for the Input File</param>
      <param name="publicKeyFileName">Public key to be used for signature verification</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedVerifyFile(System.String,System.String,DidiSoft.Pgp.KeyStore)">
      <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>
      <param name="dataFileName">Input file to be verified</param>
      <param name="detachedSignatureFileName">Detached signature fro the Input file</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing a public key that can verify the detached signature</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedVerifyStream(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>
      <param name="dataFileStream">Input stream from the File to be verified</param>
      <param name="detachedSignatureStream">Detached signature as stream</param>
      <param name="publicKeyStream">Input stream from the Public key</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <code lang="csharp">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
             
            public class DetachedVerifyDemo
            {
             public static void Demo()
             {
              // create an instance of the library
              PGPLib pgp = new PGPLib();
             
              bool signatureIsValid = false;
              using (Stream dataStream = File.OpenRead(@"c:\INPUT.txt"))
              using (Stream signatureStream = File.OpenRead(@"c:\INPUT.txt.sig"))
              using (Stream publicKeyStream = File.OpenRead(@"c:\public_key.asc"))
              {
             	 signatureIsValid = pgp.DetachedVerifyStream(dataStream,
            						     signatureStream,
            						     publicKeyStream);
              }
             
              if (signatureIsValid)
            	Console.WriteLine("Signature is valid.");
              else
            	Console.WriteLine("Signature is invalid!");
             }
            }
            </code>
      <code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
             
            Class DetachedVerifyDemo
             Public Shared Sub Demo()
              ' create an instance of the library
              Dim pgp As New PGPLib()
             
              Dim signatureIsValid As Boolean = False
              Using dataStream As Stream = File.OpenRead("DataFiles\INPUT.txt")
               Using signatureStream As Stream = File.OpenRead("DataFiles\INPUT.txt.sig")
            	Using publicKeyStream As Stream = File.OpenRead("DataFiles\public_key.asc")
            		signatureIsValid = pgp.DetachedVerifyStream(dataStream, _
            						                            signatureStream, _
            						                            publicKeyStream)
            	End Using
               End Using
              End Using
             
              If signatureIsValid Then
            	Console.WriteLine("Signature is valid.")
              Else
            	Console.WriteLine("Signature is invalid!")
              End If
             End Sub
            End Class
            </code>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.DetachedVerifyStream(System.IO.Stream,System.IO.Stream,DidiSoft.Pgp.KeyStore)">
      <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>
      <param name="dataFileStream">Input stream from the File to be verified</param>
      <param name="detachedSignatureStream">Detached signature as stream</param>
      <param name="keyStore">
        <see cref="T:DidiSoft.Pgp.KeyStore" /> containing public keys from trusted partners</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with a key contained in the supplied <see cref="T:DidiSoft.Pgp.KeyStore" /></returns>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,System.IO.FileInfo,System.String@)">
      <summary>
            Verifies that the incoming string is signed from a trusted sender.
            </summary>
      <param name="signedString">OpenPGP signed string to be verified</param>
      <param name="publicKeyFile">Public key file of the sender</param>
      <param name="plainText">Extracted plain text string message.
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <c>
          <see langword="true" />
        </c> if the signature is from the public key owner, otherwise <see langword="false" /></returns>
      <example>
            This example shows how to extract the message from a digitally signed OpenPGP message
            and verify that it is from the expected sender.
            <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class VerifyString
            {
            	public static void Demo()
            	{
            		// obtain an OpenPGP signed message
            		String signedString = ...
            
            		// Extract the message and check the validity of the signature
            		String plainText;
            		PGPLib pgp = new PGPLib();
            		bool validSignature = pgp.VerifyString(signedString, 
            												new FileInfo(@"DataFiles\public_key.asc"), 
            												out plainText);
            
            		// Print the results
            		Console.WriteLine("Extracted plain text message is " + plainText);
            		if (validSignature) 
            		{
                        Console.WriteLine("Signature is valid");
                    } else 
            		{
            			Console.WriteLine("Signature is invalid");
            		}
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class VerifyString
            	Public Shared Sub Demo()
            		' obtain an OpenPGP signed message
            		Dim signedString As String = ...
            
            		' Extract the message and check the validity of the signature
            		Dim plainText As String
            		Dim pgp As New PGPLib()
            		Dim validSignature As Boolean = pgp.VerifyString(signedString, New FileInfo("DataFiles\public_key.asc"), plainText)
            
            		' Print the results
            		Console.WriteLine("Extracted plain text message is " + plainText)
            		If validSignature Then
            			Console.WriteLine("Signature is valid")
            		Else
            			Console.WriteLine("Signature is invalid")
            		End If
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.ArgumentNullException">if the <paramref name="publicKeyFile" /> is <see langword="null" /></exception>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,System.String,System.String@)">
      <summary>
            Verifies that the incoming string is signed from a trusted sender.
            </summary>
      <param name="signedString">OpenPGP signed string to be verified</param>
      <param name="publicKey">Public key as String</param>
      <param name="plainText">Extracted plain text string message.
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <see langword="true" /> if the signature is from the public key owner, otherwise <see langword="false" /></returns>
      <example>
            This example shows how to extract the message from a digitally signed OpenPGP message
            and verify that it is from the expected sender.
            <code lang="C#">
            using System;
            using System.IO;
            using DidiSoft.Pgp;
            
            class VerifyString
            {
            	public static void Demo()
            	{
            		// obtain an OpenPGP signed message
            		String signedString = ...
            
            		// Extract the message and check the validity of the signature
            		String plainText;
            		PGPLib pgp = new PGPLib();
            		bool validSignature = pgp.VerifyString(signedString, 
            												new FileInfo(@"DataFiles\public_key.asc"), 
            												out plainText);
            
            		// Print the results
            		Console.WriteLine("Extracted plain text message is " + plainText);
            		if (validSignature) 
            		{
                        Console.WriteLine("Signature is valid");
                    } else 
            		{
            			Console.WriteLine("Signature is invalid");
            		}
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports System.IO
            Imports DidiSoft.Pgp
            
            Class VerifyString
            	Public Shared Sub Demo()
            		' obtain an OpenPGP signed message
            		Dim signedString As String = ...
            
            		' Extract the message and check the validity of the signature
            		Dim plainText As String
            		Dim pgp As New PGPLib()
            		Dim validSignature As Boolean = pgp.VerifyString(signedString, New FileInfo("DataFiles\public_key.asc"), plainText)
            
            		' Print the results
            		Console.WriteLine("Extracted plain text message is " + plainText)
            		If validSignature Then
            			Console.WriteLine("Signature is valid")
            		Else
            			Console.WriteLine("Signature is invalid")
            		End If
            	End Sub
            End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,DidiSoft.Pgp.KeyStore,System.String@)">
      <summary>
            Verifies that the incoming string is signed from a trusted sender.
            <para>
            The sender public key must be already imported in theKeyStore parameter.
            </para></summary>
      <param name="signedString">OpenPGP signed string message</param>
      <param name="keyStore">KeyStore object to be searched for a public key to verify the signature</param>
      <param name="plainText">Plain text extracted message.
            <para>Must be called with the <b>out</b> keyword in C#. In VB.NET is a normal <b>ByRef</b> invocation.</para></param>
      <returns>
        <see langword="true" /> if a suitable public key to verify the message exists in the suppliedKeyStore object, 
            <see langword="false" /> otherwise.</returns>
      <example>
        <code lang="C#">
            using System;
            using DidiSoft.Pgp;
            
            class KeyStoreVerifyString
            {
            	public static void Demo()
            	{
            		// obtain an OpenPGP signed message
            		String signedString = ...
            
            		// Extract the message and check the validity of the signature
            		String plainText;
            		PGPLib pgp = new PGPLib();
            		KeyStore ks = new KeyStore(@"DataFiles\key.store", "key store password");
            		bool validSignature = pgp.VerifyString(signedString,
            												ks,
            												out plainText);
            
            		// Print the results
            		Console.WriteLine("Extracted plain text message is " + plainText);
            		if (validSignature)
            		{
            			Console.WriteLine("Signature is valid");
            		}
            		else
            		{
            			Console.WriteLine("Signature is invalid");
            		}
            	}
            }
            </code>
        <code lang="VB">
            Imports System
            Imports DidiSoft.Pgp
            
            Class KeyStoreVerifyString
            	Public Shared Sub Demo()
            		' obtain an OpenPGP signed message
            		Dim signedString As String =KeyStoreSignString.Demo()
            
            		' Extract the message and check the validity of the signature
            		Dim plainText As String
            		Dim pgp As New PGPLib()
            		Dim ks As New KeyStore("DataFiles\key.store", "key store password")
            		Dim validSignature As Boolean = pgp.VerifyString(signedString, ks, plainText)
            
            		' Print the results
            		Console.WriteLine("Extracted plain text message is " + plainText)
            		If validSignature Then
            			Console.WriteLine("Signature is valid")
            		Else
            			Console.WriteLine("Signature is invalid")
            		End If
            	End Sub
            End Class
            </code>
      </example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyString(System.String,System.IO.Stream)">
      <summary>
            Verifies that the incoming string is signed from a trusted sender.
            </summary>
      <param name="signedString">OpenPGP signed string to be verified</param>
      <param name="publicKeyStream">Input stream for the Public key of the sender</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyStream(System.IO.Stream,System.IO.Stream)">
      <summary>
            Verifies that the incoming stream is signed from a trusted sender.
            </summary>
      <param name="dataFileStream">Input stream from the File to be verified</param>
      <param name="publicKeyStream">Input stream from the Public key</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyStream(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Verifies that the incoming stream is signed from a trusted sender.
            </summary>
      <param name="dataFileStream">Input stream from the File to be verified</param>
      <param name="publicKeyStream">Input stream from the Public key</param>
      <param name="outputFileStream">Output Stream for the uncompressed signed content</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyStream(System.IO.Stream,DidiSoft.Pgp.KeyStore,System.IO.Stream)">
      <summary>
            Verifies that the incoming stream is signed from a trusted sender.
            </summary>
      <param name="dataFileStream">Input stream from the File to be verified</param>
      <param name="keyStore">Key store containing the Public key for verification</param>
      <param name="outputFileStream">Output Stream for the uncompressed signed content</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,System.String)">
      <summary>
             Verifies that the incoming stream is signed from a trusted sender.
             </summary>
      <param name="dataFileName">File name to be verified (absolute or relative path)</param>
      <param name="publicKeyFileName">Key ring file name (absolute or relative path)</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <example>
             This example shows how to only verify that it comes from the sender we expect
             without extracting the embedded data.
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class VerifyDemo
             {
                public void Demo()
                {
                    PGPLib pgp = new PGPLib();
                    bool validSignature = pgp.VerifyFile(@"C:\DATA_signed.pgp",
                                                         @"C:\sender_public_key.asc");
            		
                    Console.WriteLine(validSignature);
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class VerifyDemo
                Public Sub Demo()
                    Dim pgp As New PGPLib()
                    Dim validSignature As Boolean = _
                                     pgp.VerifyFile("C:\DATA_signed.pgp", _
                                                    "C:\sender_public_key.asc")
            
                    Console.WriteLine(validSignature)
                End Sub
             End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,System.String,System.String)">
      <summary>
             Verifies that a file is OpenPGP signed from a trusted sender.
            </summary>
      <param name="dataFileName">File name to be verified (absolute or relative path)</param>
      <param name="publicKeyFileName">Key ring file name (absolute or relative path)</param>
      <param name="outputFileName">File name where the decrypted data will be stored</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
      <example>
             This example shows how to extract the contents of an OpenPGP digitally signed file
             and verify that it comes from the sender we expect.
             <code lang="C#">
             using System;
             using DidiSoft.Pgp;
            
             public class VerifyDemo
             {
                public void Demo()
                {
                    PGPLib pgp = new PGPLib();
                    bool validSignature = pgp.VerifyFile(@"C:\DATA_signed.pgp",
                                                         @"C:\public_key.asc",
                                                         @"C:\DATA.dat");
            		
                    Console.WriteLine(validSignature);
                }
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Pgp
            
             Public Class VerifyDemo
                Public Sub Demo()
                    Dim pgp As New PGPLib()
                    Dim validSignature As Boolean = _
                                     pgp.VerifyFile("C:\DATA_signed.pgp", _
                                                    "C:\public_key.asc", _
                                                    "C:\DATA.dat")
            
                    Console.WriteLine(validSignature)
                End Sub
             End Class
            </code></example>
      <exception cref="T:System.IO.IOException">I/O error</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">general OpenPGP error</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is corrupted or not a public key at all</exception>
    </member>
    <member name="M:DidiSoft.Pgp.PGPLib.VerifyFile(System.String,DidiSoft.Pgp.KeyStore,System.String)">
      <summary>
            Verifies that the incoming stream is signed from a trusted sender.
            </summary>
      <param name="dataFileName">File name to be verified (absolute or relative path)</param>
      <param name="keyStore">Key store instance containing the public key for verification</param>
      <param name="outputFileName">File name where the decrypted data will be stored</param>
      <returns>
        <see langword="true" /> if signed correctly, <see langword="false" /> if not signed with this public key</returns>
      <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
    </member>
    <member name="E:DidiSoft.Pgp.PGPLib.LogMessageEvent">
      <summary>
            Event for collecting verbose logging information
            </summary>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.TrialVersion">
      <summary>
            A property that indicates is this a production or an evaluation version of the library
            </summary>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.AsciiVersionHeader">
      <summary>
            Version comment text that is printed in ASCII armoured output
            </summary>
      <value>Version comment text that is printed in ASCII armoured output</value>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.ContentType">
      <summary>
            Gets/Sets the type of the data to be encrypted.
            </summary>
      <remarks>
            This is useful when exchanging textual data between systems with different line endings
            <para>
            Default is ContentDataType.Binary
            </para></remarks>
      <example>
            This example demonstrates how to specify that the subsequently encrypted data is text
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.ContentType = ContentDataType.Text;
            // now in subsequent encrypt calls the data will be stored with preserved line endings
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.ContentType = ContentDataType.Text
            ' now in subsequent encrypt calls the data will be stored with preserved line endings
            </code></example>
      <value>type of the data to be encrypted (text or binary)</value>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.Hash">
      <summary>
            Gets/Sets the preferred hashing algorithm used by all methods that produce OpenPGP signatures (all Sign and SigneAndEncrypt methods)
            </summary>
      <remarks>
            Default is SHA1
            </remarks>
      <example>
            This example demonstrates how to change the preferred hash algorithm used by the library. 
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.Hash = HashAlgorithm.SHA256;
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.Hash = HashAlgorithm.SHA256
            </code></example>
      <seealso cref="T:DidiSoft.Pgp.HashAlgorithm" />
      <value>preferred hashing algorithm used by all methods that produce OpenPGP signatures</value>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.Compression">
      <summary>
            Gets/Sets the preferred compression algorithm used by all methods that produce OpenPGP messages (e.g Encrypt, Sign, etc.)
            </summary>
      <remarks>
            Default is ZIP
            </remarks>
      <example>
            This example demonstrates how to change the preferred compression algorithm used by the library. 
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.Compression = CompressionAlgorithm.ZLIB;
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.Compression = CompressionAlgorithm.ZLIB
            </code></example>
      <seealso cref="T:DidiSoft.Pgp.CompressionAlgorithm" />
      <value>preferred compression algorithm used by all methods that produce OpenPGP messages</value>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.Cypher">
      <summary>
            Gets/Sets the preferred symmetric key algorithm used by all methods that produce encrypted OpenPGP messages (Encrypt, SignAndEncrypt).
            <para>
            Changes to this property have effect on subsequent calls of encryption methods
            </para></summary>
      <remarks>
            Default is CAST5
            </remarks>
      <example>
            This example demonstrates how to change the preferred cipher algorithm used by the library. 
            <code lang="C#">
            PGPLib pgp = new PGPLib();
            pgp.Cypher = CypherAlgorithm.TRIPLE_DES;
            </code><code lang="VB">
            Dim pgp As New PGPLib()
            pgp.Cypher = CypherAlgorithm.TRIPLE_DES
            </code></example>
      <seealso cref="T:DidiSoft.Pgp.CypherAlgorithm" />
      <value>preferred symmetric key algorithm used by all methods that produce encrypted OpenPGP messages</value>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.UseExpiredKeys">
      <summary>
            Returns should expired keys still be used
            </summary>
      <remarks>
            Default is <see langword="false" /></remarks>
      <value>if <see langword="true" /> the library can still use expired public keys, when <see langword="false" /> a <see cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException" /> is thrown</value>
    </member>
    <member name="P:DidiSoft.Pgp.PGPLib.UseRevokedKeys">
      <summary>
            Returns should revoked keys still be used
            </summary>
      <remarks>
            Default is <see langword="false" /></remarks>
      <value>if <see langword="true" /> the library can still use expired public keys, when <see langword="false" /> a <see cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException" /> is thrown</value>
    </member>
    <member name="T:DidiSoft.Pgp.RevocationLib">
      <summary>
            Provides OpenPGP key revocation methods.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="F:DidiSoft.Pgp.RevocationLib.REASON_NO_REASON">
      <summary>
            Revocation code: No reason specified 
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.RevocationLib.REASON_KEY_SUPERSEDED">
      <summary>
            Revocation code: Key is superseded
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.RevocationLib.REASON_KEY_COMPROMISED">
      <summary>
            Revocation code: Key has been compromised
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.RevocationLib.REASON_KEY_NO_LONGER_USED">
      <summary>
            Revocation code: Key is no longer used
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.RevocationLib.REASON_USER_NO_LONGER_USED">
      <summary>
            Revocation code: User Id is no longer used
            </summary>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.#ctor">
      <summary>
            Constructor that initializes the revocation library class.
            </summary>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.CreateRevocationCertificateText(System.String,System.String,System.Byte,System.String)">
      <summary>
            Creates a revocation certificate in ASCII armored string format for a given OpenPGP key.
            <para>
            Key revocation certificates are especially useful if we have forgotten the pass phrase to  
            our private key and we need some way to "disable" or revoke that key.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --gen-revoke [UserId]
            </remarks>
      <param name="privateKeyFile">File name containing the private key (absolute or relative path)</param>
      <param name="privateKeyPassword">Password of the private key</param>
      <param name="reason">Revocation reason code</param>
      <param name="description">Revocation description</param>
      <returns>revocation certificate in ASCII armored string format</returns>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateText(System.String,System.String)" />
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the private key source does not contain a private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.CreateRevocationCertificateText(DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Byte,System.String)">
      <summary>
            Creates a revocation certificate in ASCII armored string format for a given OpenPGP key. 
            <para>
            Key revocation certificates are especially useful if we have forgotten the pass phrase to  
            our private key and we need some way to "disable" or revoke that key.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --gen-revoke [keyId]
            </remarks>
      <param name="keyStore">KeyStore instance containing the key for which we want to create a revocation certificate</param>
      <param name="keyId">Key ID of the target key</param>
      <param name="privateKeyPassword">corresponding private key password for this key </param>
      <param name="reason">Revocation reason code (see the REASON constants in this class)</param>
      <param name="description">Revocation description</param>
      <returns>revocation certificate in ASCII armored string format</returns>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateText(DidiSoft.Pgp.KeyStore,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.CreateRevocationCertificateText(DidiSoft.Pgp.KeyStore,System.String,System.String,System.Byte,System.String)">
      <summary>
            Creates a revocation certificate in ASCII armored string format for a given OpenPGP key. 
            <para>
            Key revocation certificates are especially useful if we have forgotten the pass phrase to  
            our private key and we need some way to "disable" or revoke that key.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --gen-revoke [UserId]
            </remarks>
      <param name="keyStore">KeyStore instance containing the key for which we want to create a revocation certificate</param>
      <param name="userId">User ID of the target key</param>
      <param name="privateKeyPassword">corresponding private key password for this key </param>
      <param name="reason">Revocation reason code (see the REASON constants in this class)</param>
      <param name="description">Revocation description</param>
      <returns>revocation certificate in ASCII armored string format</returns>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateText(DidiSoft.Pgp.KeyStore,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.CreateRevocationCertificateInFile(System.String,System.String,System.Byte,System.String,System.String)">
      <summary>
            Creates a key revocation certificate for a given OpenPGP key file and stores it in a file.
            <para>
            Key revocation certificates are especially useful if we have forgotten the pass phrase to  
            our private key and we need some way to "disable" or revoke that key.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --gen-revoke [UserId] --output [outputFileName]
            </remarks>
      <param name="privateKeyFile">File name containing the Private key (absolute or relative path) </param>
      <param name="privateKeyPassword">Password of the private key</param>
      <param name="reason">Revocation reason code (use the REASON_ constants from this class)</param>
      <param name="description">Revocation description</param>
      <param name="outputFileName">Output file name where the revocation certificate will be stored (absolute or relative path)</param>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateFile(System.String,System.String)" />
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the private key source does not contain a private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.CreateRevocationCertificateInFile(DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Byte,System.String,System.String)">
      <summary>
            Creates a key revocation certificate for a given OpenPGP key located in a KeyStore and stores it in a file.
            <para>
            Key revocation certificates are especially useful if we have forgotten the pass phrase to  
            our private key and we need some way to "disable" or revoke that key.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --gen-revoke [keyId] --output [outputFileName]
            </remarks>
      <param name="keyStore">KeyStore instance containing the key for which we want to create a revocation certificate</param>
      <param name="keyId">Key ID of the target key</param>
      <param name="privateKeyPassword">corresponding private key password for this key </param>
      <param name="reason">Revocation reason code (see the REASON constants in this class)</param>
      <param name="description">Revocation description</param>
      <param name="outputFileName">Output file name where the revocation certificate will be stored (absolute or relative path)</param>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateFile(DidiSoft.Pgp.KeyStore,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.CreateRevocationCertificateInFile(DidiSoft.Pgp.KeyStore,System.String,System.String,System.Byte,System.String,System.String)">
      <summary>
            Creates a key revocation certificate for a given OpenPGP key located in a KeyStore and stores it in a file.
            <para>
            Key revocation certificates are especially useful if we have forgotten the pass phrase to  
            our private key and we need some way to "disable" or revoke that key.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --gen-revoke [userId] --output [outputFileName]
            </remarks>
      <param name="keyStore">KeyStore instance containing the key for which we want to create a revocation certificate</param>
      <param name="userId">User ID of the target key</param>
      <param name="privateKeyPassword">corresponding private key password for this key </param>
      <param name="reason">Revocation reason code (see the REASON constants in this class)</param>
      <param name="description">Revocation description</param>
      <param name="outputFileName">Output file name where the revocation certificate will be stored (absolute or relative path)</param>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateFile(DidiSoft.Pgp.KeyStore,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.AssignDesignatedRevoker(System.String,System.String,System.String,System.String)">
      <summary>
            Authorizes the specified key as a designated revoker for this key.
            <para>
            This method writes changes in the file <b>publicKeyFileName</b>.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
        <para>
            gpg --edit-key [keyId]
            </para>
            addrevoker [revokerKeyId]
            </remarks>
      <param name="publicKeyFileName">Target public key file name (absolute or relative path)</param>
      <param name="privateKeyFileName">Corresponding private key file<para> (can be the same as <i>publicKeyFileName</i> if both keys are in one file)</para></param>
      <param name="privateKeyPassword">private key password</param>
      <param name="revokerPublicKeyFileName">Key file that will be a designated revoker (absolute or relative path)</param>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithDesignatedRevoker(System.String,System.String,System.String,System.Byte,System.String)" />
      <exception cref="T:System.IO.IOException">If there is a problem reading a files</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the public key source does not contain a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the private key source does not contain a private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.AssignDesignatedRevoker(DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Int64)">
      <summary>
            Authorizes the specified key as a designated revoker for this key.
            <para>
            Note that the corresponding private key of the key that authorizes must also be in this KeyStore.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
        <para>
            gpg --edit-key [keyId]
            </para>
            addrevoker [revokerKeyId]
            </remarks>
      <param name="keyStore">KeyStore containing the keys</param>
      <param name="keyId">Key ID of the key that authorizes the designated revoker</param>
      <param name="privateKeyPassword">private key password of the key that authorizes the designated revoker</param>
      <param name="revokerKeyId">Key ID of the designated revoker</param>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithDesignatedRevoker(DidiSoft.Pgp.KeyStore,System.Int64,System.Int64,System.String,System.Byte,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.AssignDesignatedRevoker(DidiSoft.Pgp.KeyStore,System.String,System.String,System.String)">
      <summary>
            Authorizes the specified key as a designated revoker for this key.
            <para>
            Note that the corresponding private key of the key that authorizes must also be in this KeyStore.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
        <para>
            gpg --edit-key [userId]
            </para>
            addrevoker [revokerKeyId]
            </remarks>
      <param name="keyStore">KeyStore containing the keys</param>
      <param name="userId">User ID of the key that authorizes the designated revoker</param>
      <param name="privateKeyPassword">private key password of the key that authorizes the designated revoker</param>
      <param name="revokerUserId">User ID of the designated revoker</param>
      <seealso cref="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithDesignatedRevoker(DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.Byte,System.String)" />
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateText(System.String,System.String)">
      <summary>
            Revokes a key or subkey from an OpenPGP key ring file (*.asc, *.pkr)
            using a revocation certificate supplied as text.
            </summary>
      <param name="publicKeyFileName">file name containing the target OpenPGP key (absolute or relative path)</param>
      <param name="certificateText">revocation certificate as ASCII armored string</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:System.IO.IOException">if there is a problem reading or writing the public key file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the revocation certificate is not applicable for this public key file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input certificate is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateText(DidiSoft.Pgp.KeyStore,System.String)">
      <summary>
            Revokes a key or subkey located in an OpenPGP KeyStore
            using a revocation certificate supplied as text.
            </summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --import [certificateFile]
            </remarks>
      <param name="keyStore">KeyStore instance containing the target OpenPGP key</param>
      <param name="certificateText">revocation certificate in ASCII armored string format</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the id stored in the revocation certificate</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input certificate is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateFile(System.String,System.String)">
      <summary>
            Revokes a key or subkey from an OpenPGP key ring file (*.asc, *.pkr)
            using a revocation certificate file.
            </summary>
      <param name="publicKeyFileName">file name containing the target OpenPGP key (absolute or relative path)</param>
      <param name="certificateFileName">revocation certificate file name (absolute or relative path)</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:System.IO.IOException">if there is a problem reading or writing the public key file or the certificate file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the revocation certificate does not match this public key file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input certificate is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithRevocationCertificateFile(DidiSoft.Pgp.KeyStore,System.String)">
      <summary>
            Revokes a key or subkey from an OpenPGP key ring file (*.asc, *.pkr)
            using a revocation certificate file.
            </summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --import [certificateFileName]
            </remarks>
      <param name="keyStore">KeyStore containing the target OpenPGP key</param>
      <param name="certificateFileName">revocation certificate file name (absolute or relative path)</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:System.IO.IOException">if there is a problem reading the certificate file</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the revocation certificate has no matching public key in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input certificate is not an OpenPGP data</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKey(DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.Byte,System.String)">
      <summary>
            Revokes a public key or sub key from a KeyStore.
            <para>
            Note: The corresponding private key of this key must also be in the same KeyStore object. 
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
        <para>
            gpg --edit-key [userId]
            </para>
            revkey
            </remarks>
      <param name="keyStore">KeyStore object containing the key to be revoked</param>
      <param name="keyId">Key ID of the key or sub key to be revoked</param>
      <param name="privateKeyPassword">private key password of the key to be revoked</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Key Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKey(DidiSoft.Pgp.KeyStore,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes a public key or sub key from a KeyStore.
            <para>
            Note: The corresponding private key of this key must also be in the same KeyStore object. 
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
        <para>
            gpg --edit-key [userId]
            </para>
            revkey
            </remarks>
      <param name="keyStore">KeyStore object containing the key to be revoked</param>
      <param name="userId">User ID of the key or sub key to be revoked</param>
      <param name="privateKeyPassword">private key password of the key to be revoked</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified User Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified User Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKey(System.String,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes a public key.
            </summary>
      <param name="publicKeyFileName">public key file that will be revoked (absolute or relative path)</param>
      <param name="privateKeyFileName">corresponding private key file (absolute or relative path) <para>Note: may be the same file as <i>publicKeyFileName</i></para></param>
      <param name="privateKeyPassword">private key password</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:System.IO.IOException">If there is a problem reading the key files</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the public key source does not contain a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the private key source does not contain a private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeUserIdSignature(System.String,System.String,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes a User Id signature binding from an OpenPGP public key file.
            <para>
            One reason to do this is if this User Id is no longer connected to this key,
            for example have left the company.
            </para></summary>
      <param name="publicKeyFileName">public key file that contains the User Id to be revoked (absolute or relative path)</param>
      <param name="privateKeyFileName">corresponding private key file (absolute or relative path) <para> Note: may be the same file as <i>publicKeyFileName</i></para></param>
      <param name="privateKeyPassword">private key password</param>
      <param name="userId">User Id to be revoked</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:System.IO.IOException">If there is a problem reading the key files</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the public key source does not contain a public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the private key source does not contain a private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeUserIdSignature(DidiSoft.Pgp.KeyStore,System.Int64,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes a User Id signature binding from an OpenPGP public key located in a KeyStore
            <para>
            Note: the corresponding private key must also exist in this KeyStore in order the signature to be produced. 
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --edit-key [keyId]
            </remarks>
      <param name="keyStore">KeyStore containing the public key</param>
      <param name="keyId">Key ID of the key with the signature</param>
      <param name="userId">User ID signature to be revoked</param>
      <param name="privateKeyPassword">private key password of this key</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Key Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeUserIdSignature(DidiSoft.Pgp.KeyStore,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes a User Id signature binding from an OpenPGP public key located in a KeyStore
            <para>
            Note: the corresponding private key must also exist in this KeyStore in order the signature to be produced. 
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --edit-key [userId]
            </remarks>
      <param name="keyStore">KeyStore containing the public key</param>
      <param name="userId">User ID signature to be revoked</param>
      <param name="privateKeyPassword">private key password of the target key</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified User Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified User Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithDesignatedRevoker(System.String,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes an OpenPGP public key with a designated revoker private key file.
            </summary>
      <param name="publicKeyFileName">the public key that we want to revoke (absolute or relative path)</param>
      <param name="revokerPrivateKeyFileName">designated revoker secret key file (absolute or relative path)  </param>
      <param name="revokerPassword">designated revoker secret key password</param>
      <param name="reason">revocation reason code (use the REASON_ constants in this class)</param>
      <param name="description">revocation description</param>
      <exception cref="T:System.IO.IOException">If there is a problem reading the key files</exception>
      <exception cref="T:DidiSoft.Pgp.PGPException">If the specified designated revoker key has not been assigned as such for this public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the private key source does not contain an OpenPGP private key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the private key password is wrong</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if the target public key source does not contain an OpenPGP public key</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithDesignatedRevoker(DidiSoft.Pgp.KeyStore,System.Int64,System.Int64,System.String,System.Byte,System.String)">
      <summary>
            Revokes an OpenPGP public key located in a KeyStore with a designated revoker.
            <para>
            Note: the designated revoker private key must also exist in the same KeyStore object.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --desig-revoke [keyId]
            </remarks>
      <param name="keyStore">KeyStore containing the keys</param>
      <param name="keyId">Key ID of the public key to be revoked</param>
      <param name="revokerKeyId">designated revoker key ID</param>
      <param name="revokerPassword">designated revoker secret key password</param>
      <param name="reason">revocation reason code (use the REASON_ constants from this class)</param>
      <param name="description">revocation reason description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">If the specified designated revoker key has not been assigned as such for this public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Key Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private (revoker) key with the specified Key Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private (revoker) key password is wrong</exception>
    </member>
    <member name="M:DidiSoft.Pgp.RevocationLib.RevokeKeyWithDesignatedRevoker(DidiSoft.Pgp.KeyStore,System.String,System.String,System.String,System.Byte,System.String)">
      <summary>
            Revokes an OpenPGP public key located in a KeyStore with a designated revoker.
            <para>
            Note: the designated revoker private key must also exist in the same KeyStore object.
            </para></summary>
      <remarks>
        <para>
            Equivalent GPG command: 
            </para>
            gpg --desig-revoke [userId]
            </remarks>
      <param name="keyStore">KeyStore containing the keys</param>
      <param name="userId">User ID of the public key to be revoked</param>
      <param name="revokerUserId">designated revoker User ID</param>
      <param name="revokerPassword">designated revoker secret key password</param>
      <param name="reason">revocation reason code (use the REASON_ constants from this class)</param>
      <param name="description">revocation reason description</param>
      <returns>
        <see cref="T:DidiSoft.Pgp.KeyPairInformation" /> representing the revoked key</returns>
      <exception cref="T:DidiSoft.Pgp.PGPException">If the specified designated revoker key has not been assigned as such for this public key</exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified User Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private (revoker) key with the specified User Id in the <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
      <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the specified private (revoker) key password is wrong</exception>
    </member>
    <member name="T:DidiSoft.Pgp.TrustLevel">
      <summary>
            Holds common OpenPGP trust values
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.TrustLevel.None">
      <summary>
            Not trusted 
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.TrustLevel.Marginal">
      <summary>
            Partially trusted
            </summary>
    </member>
    <member name="F:DidiSoft.Pgp.TrustLevel.Trusted">
      <summary>
            Maximum trust
            </summary>
    </member>
    <member name="T:DidiSoft.Sfx.SfxCreator">
      <summary>
            Provides methods for PGP password encrypting data into SFX (self extracting) executable file.
            </summary>
      <remarks>
            The output EXE files require .NET Framework on the machine where they will be used.
            By default the same version of the .NET Framework as the running program is targeted. A specific version can be 
            selected through the <c>TargetDotNetFramework</c> property. The minimal version supported is 2.0
            </remarks>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="F:DidiSoft.Sfx.SfxCreator.TargetDotNetFramework">
      <summary>
            Property to specify the target .NET Framework version that the resulting executable will use. 
            By default the same version as the running program will be used.
            </summary>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.#ctor">
      <summary>
            Creates an instance with default settings
            </summary>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFileToExe(System.String,System.String,System.String)">
      <summary>
            Encrypts a file with a password into a SFX (self extracting) executable file. 
            <para>
            The generated executable file requires .NET Framework 2.0 or upper.
            </para></summary>
      <remarks>
            The generated SFX (self extracting) executable file upon execution shows a dialog box
            that requires the same password used for encryption in order to extract the encrypted file.
            <para>
            If the output exe file already exists, it will be overwritten.
            </para></remarks>
      <param name="inputFile">input file to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
            This example shows how to create a password protected self extracting (SFX) executable file
            with default options.
            <code lang="C#">
            class SfxFromFile
            {
            	static void Main(string[] args)
            	{
            	    // decryption password
            		string password = "pass123";
            
            		SfxCreator sfx = new SfxCreator();
            		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
            		sfx.EnryptFileToExe(@"DataFiles\test.txt", password, "sfx_demo.exe");
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Sfx
            
            Module SfxExeFromFileDemo
                Sub Main()
            		' decryption password
            		Dim password As String = "pass123"
            
            		' create the self extracting file
            		Dim sfx As New SfxCreator()
            		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
            		sfx.EnryptFileToExe("DataFiles\test1.txt", password, "sfx_demo.exe")
            	End Sub
            End Module
            </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFileToExe(System.IO.FileInfo,System.String,System.IO.FileInfo)">
      <summary>
             Encrypts a file with a password into a SFX (self extracting) executable file. 
             <para>
             The generated executable file requires .NET Framework 2.0 or upper.
             </para></summary>
      <remarks>
             The generated SFX (self extracting) executable file upon execution shows a dialog box
             that requires the same password used for encryption in order to extract the encrypted file.
             <para>
             If the output exe file already exists, it will be overwritten.
             </para></remarks>
      <param name="inputFile">input file to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
             This example shows how to create a password protected self extracting (SFX) executable file
             with default options.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Sfx;
             
             class SfxFromFile
             {
             	static void Main(string[] args)
             	{
             	    // decryption password
             		string password = "pass123";
             
                     // create the self extracting file
             		SfxCreator sfx = new SfxCreator();
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
             		sfx.EnryptFileToExe(new FileInfo(@"DataFiles\test.txt"), password, new FileInfo("sfx_demo.exe"));
             	}
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Sfx
             
             Module SfxExeFromFileDemo
                 Sub Main()
             		' decryption password
             		Dim password As String = "pass123"
             
             		' create the self extracting file
             		Dim sfx As New SfxCreator()
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
             		sfx.EnryptFileToExe(New FileInfo("DataFiles\test1.txt"), password, New FileInfo("sfx_demo.exe"))
             	End Sub
             End Module
             </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFileToExe(System.String,System.String,DidiSoft.Sfx.SfxOptions,System.String)">
      <summary>
             Encrypts a file with a password into a SFX (self extracting) executable file. 
             <para>
             The generated executable file requires .NET Framework 2.0 or upper.
             </para></summary>
      <remarks>
             The generated SFX (self extracting) executable file upon execution shows a dialog box
             that requires the same password used for encryption in order to extract the encrypted file.
             <para>
             If the output exe file already exists, it will be overwritten.
             </para></remarks>
      <param name="inputFile">input file to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="options">Options for customization of the generated executable file</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
             This example shows how to create a password protected self extracting (SFX) executable file
             with default options.
             <code lang="C#">
             using System;
             using DidiSoft.Sfx;
             
             class SfxFromFile
             {
             	static void Main(string[] args)
             	{
             		// customization options for the result EXE file
             		SfxOptions options = new SfxOptions();
             		options.Copyright = "Copyright (c) My Company Name";
             		options.ProductName = "My SFX Demo";
             		options.Description = "My SFX Demo description";
            
                     // decryption password
             		string password = "pass123";
             
                     // create the self extracting file
             		SfxCreator sfx = new SfxCreator();
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
             		sfx.EnryptFileToExe(@"DataFiles\test.txt", password, "sfx_demo.exe");
             	}
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Sfx
             
             Module SfxExeFromFileDemo
                 Sub Main()
                 	' customization options for the result EXE file
                 	Dim options As New SfxOptions()
                 	options.Copyright = "Copyright (c) My Company Name"
                 	options.ProductName = "My SFX Demo"
                 	options.Description = "My SFX Demo description"
            
             		' decryption password
             		Dim password As String = "pass123"
             
             		' create the self extracting file
             		Dim sfx As New SfxCreator()
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
             		sfx.EnryptFileToExe(New FileInfo("DataFiles\test1.txt"), password, New FileInfo("sfx_demo.exe"))
             	End Sub
             End Module
             </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFileToExe(System.IO.FileInfo,System.String,DidiSoft.Sfx.SfxOptions,System.IO.FileInfo)">
      <summary>
             Encrypts a file with a password into a SFX (self extracting) executable file. 
             <para>
             The generated executable file requires .NET Framework 2.0 or upper.
             </para></summary>
      <remarks>
             The generated SFX (self extracting) executable file upon execution shows a dialog box
             that requires the same password used for encryption in order to extract the encrypted file.
             <para>
             If the output exe file already exists, it will be overwritten.
             </para></remarks>
      <param name="inputFile">input file to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="options">Options for customization of the generated executable file</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
             This example shows how to create a password protected self extracting (SFX) executable file
             with default options.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Sfx;
             
             class SfxFromFile
             {
             	static void Main(string[] args)
             	{
             		// customization options for the result EXE file
             		SfxOptions options = new SfxOptions();
             		options.Copyright = "Copyright (c) My Company Name";
             		options.ProductName = "My SFX Demo";
             		options.Description = "My SFX Demo description";
            
                     // decryption password
             		string password = "pass123";
             
                     // create the self extracting file
             		SfxCreator sfx = new SfxCreator();
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
                     sfx.EnryptFileToExe(new FileInfo(@"DataFiles\test.txt"), password, new FileInfo("sfx_demo.exe"));
             	}
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Sfx
             
             Module SfxExeFromFileDemo
                 Sub Main()
                 	' customization options for the result EXE file
                 	Dim options As New SfxOptions()
                 	options.Copyright = "Copyright (c) My Company Name"
                 	options.ProductName = "My SFX Demo"
                 	options.Description = "My SFX Demo description"
            
             		' decryption password
             		Dim password As String = "pass123"
             
             		' create the self extracting file
             		Dim sfx As New SfxCreator()
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
             		sfx.EnryptFileToExe("DataFiles\test1.txt", password, "sfx_demo.exe")
             	End Sub
             End Module
             </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFolderToExe(System.String,System.String,System.String)">
      <summary>
            Encrypts a folder with its contents into a a password protected SFX (self extracting) executable file. 
            <para>
            The generated executable file requires .NET Framework 2.0 or upper.
            </para></summary>
      <remarks>
            The generated SFX (self extracting) executable file upon execution shows a dialog box
            that requires the same password used for encryption in order to extract the encrypted file.
            <para>
            If the output exe file already exists, it will be overwritten.
            </para></remarks>
      <param name="inputFolder">input folder to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
            This example shows how to create a password protected self extracting (SFX) executable file
            with default options.
            <code lang="C#">
            class SfxFromFolder
            {
            	static void Main(string[] args)
            	{
            	    // decryption password
            		string password = "pass123";
            
            		SfxCreator sfx = new SfxCreator();
            		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
            		sfx.EnryptFolderToExe(@"DataFiles", password, "sfx_demo.exe");
            	}
            }
            </code><code lang="VB">
            Imports System
            Imports DidiSoft.Sfx
            
            Module SfxExeFromFolderDemo
                Sub Main()
            		' decryption password
            		Dim password As String = "pass123"
            
            		' create the self extracting file
            		Dim sfx As New SfxCreator()
            		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
            		sfx.EnryptFolderToExe("DataFiles", password, "sfx_demo.exe")
            	End Sub
            End Module
            </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFolderToExe(System.IO.FileInfo,System.String,System.IO.FileInfo)">
      <summary>
             Encrypts a folder with its contents into a a password protected SFX (self extracting) executable file. 
             <para>
             The generated executable file requires .NET Framework 2.0 or upper.
             </para></summary>
      <remarks>
             The generated SFX (self extracting) executable file upon execution shows a dialog box
             that requires the same password used for encryption in order to extract the encrypted file.
             <para>
             If the output exe file already exists, it will be overwritten.
             </para></remarks>
      <param name="inputFolder">input folder to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
             This example shows how to create a password protected self extracting (SFX) executable file
             with default options.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Sfx;
             
             class SfxFromFolder
             {
             	static void Main(string[] args)
             	{
             	    // decryption password
             		string password = "pass123";
             
                     // create the self extracting file
             		SfxCreator sfx = new SfxCreator();
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
             		sfx.EnryptFolderToExe(new FileInfo(@"DataFiles"), password, new FileInfo("sfx_demo.exe"));
             	}
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Sfx
             
             Module SfxExeFromFolderDemo
                 Sub Main()
             		' decryption password
             		Dim password As String = "pass123"
             
             		' create the self extracting file
             		Dim sfx As New SfxCreator()
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
             		sfx.EnryptFolderToExe(New FileInfo("DataFiles"), password, New FileInfo("sfx_demo.exe"))
             	End Sub
             End Module
             </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFolderToExe(System.String,System.String,DidiSoft.Sfx.SfxOptions,System.String)">
      <summary>
             Encrypts a folder with its contents into a a password protected SFX (self extracting) executable file. 
             <para>
             The generated executable file requires .NET Framework 2.0 or upper.
             </para></summary>
      <remarks>
             The generated SFX (self extracting) executable file upon execution shows a dialog box
             that requires the same password used for encryption in order to extract the encrypted file.
             <para>
             If the output exe file already exists, it will be overwritten.
             </para></remarks>
      <param name="inputFolder">input folder to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="options">Options for customization of the generated executable file</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
             This example shows how to create a password protected self extracting (SFX) executable file
             with default options.
             <code lang="C#">
             using System;
             using DidiSoft.Sfx;
             
             class SfxFromFolder
             {
             	static void Main(string[] args)
             	{
             		// customization options for the result EXE file
             		SfxOptions options = new SfxOptions();
             		options.Copyright = "Copyright (c) My Company Name";
             		options.ProductName = "My SFX Demo";
             		options.Description = "My SFX Demo description";
            
                     // decryption password
             		string password = "pass123";
             
                     // create the self extracting file
             		SfxCreator sfx = new SfxCreator();
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
             		sfx.EnryptFolderToExe(@"DataFiles", password, "sfx_demo.exe");
             	}
             }
             </code><code lang="VB">
             Imports System
             Imports DidiSoft.Sfx
             
             Module SfxExeFromFolderDemo
                 Sub Main()
                 	' customization options for the result EXE file
                 	Dim options As New SfxOptions()
                 	options.Copyright = "Copyright (c) My Company Name"
                 	options.ProductName = "My SFX Demo"
                 	options.Description = "My SFX Demo description"
            
             		' decryption password
             		Dim password As String = "pass123"
             
             		' create the self extracting file
             		Dim sfx As New SfxCreator()
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
             		sfx.EnryptFolderToExe("DataFiles", password, "sfx_demo.exe")
             	End Sub
             End Module
             </code></example>
    </member>
    <member name="M:DidiSoft.Sfx.SfxCreator.EnryptFolderToExe(System.IO.FileInfo,System.String,DidiSoft.Sfx.SfxOptions,System.IO.FileInfo)">
      <summary>
             Encrypts a folder with its contents into a a password protected SFX (self extracting) executable file. 
             <para>
             The generated executable file requires .NET Framework 2.0 or upper.
             </para></summary>
      <remarks>
             The generated SFX (self extracting) executable file upon execution shows a dialog box
             that requires the same password used for encryption in order to extract the encrypted file.
             <para>
             If the output exe file already exists, it will be overwritten.
             </para></remarks>
      <param name="inputFolder">input folder to be encrypted</param>
      <param name="encryptionPassword">encryption/decryption password</param>
      <param name="options">Options for customization of the generated executable file</param>
      <param name="outputExeFile">output executable file location</param>
      <example>
             This example shows how to create a password protected self extracting (SFX) executable file
             with default options from a folder.
             <code lang="C#">
             using System;
             using System.IO;
             using DidiSoft.Sfx;
             
             class SfxFromFolder
             {
             	static void Main(string[] args)
             	{
             		// customization options for the result EXE file
             		SfxOptions options = new SfxOptions();
             		options.Copyright = "Copyright (c) My Company Name";
             		options.ProductName = "My SFX Demo";
             		options.Description = "My SFX Demo description";
            
                     // decryption password
             		string password = "pass123";
             
                     // create the self extracting file
             		SfxCreator sfx = new SfxCreator();
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM;
                     sfx.EnryptFolderToExe(new FileInfo(@"DataFiles\test.txt"), password, new FileInfo("sfx_demo.exe"));
             	}
             }
             </code><code lang="VB">
             Imports System
             Imports System.IO
             Imports DidiSoft.Sfx
             
             Module SfxExeFromFolderDemo
                 Sub Main()
                 	' customization options for the result EXE file
                 	Dim options As New SfxOptions()
                 	options.Copyright = "Copyright (c) My Company Name"
                 	options.ProductName = "My SFX Demo"
                 	options.Description = "My SFX Demo description"
            
             		' decryption password
             		Dim password As String = "pass123"
             
             		' create the self extracting file
             		Dim sfx As New SfxCreator()
             		sfx.TargetDotNetFramework = SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM
             		sfx.EnryptFolderToExe(New FileInfo("DataFiles"), password, New FileInfo("sfx_demo.exe"))
             	End Sub
             End Module
             </code></example>
    </member>
    <member name="T:DidiSoft.Sfx.SfxCreator.DotNetFramework">
      <summary>
            List of supported .NET Framework versions that the SFX executable can target.
            </summary>
    </member>
    <member name="F:DidiSoft.Sfx.SfxCreator.DotNetFramework.SELECT_FROM_EXECUTING_PROGRAM">
      <summary>
            Auto select the same framework version as the program creating the SFX executable.
            </summary>
    </member>
    <member name="F:DidiSoft.Sfx.SfxCreator.DotNetFramework.VERSION_2_0">
      <summary>
            .NET Framework version 2.0
            </summary>
    </member>
    <member name="F:DidiSoft.Sfx.SfxCreator.DotNetFramework.VERSION_3_0">
      <summary>
            .NET Framework version 3.0
            </summary>
    </member>
    <member name="F:DidiSoft.Sfx.SfxCreator.DotNetFramework.VERSION_3_5">
      <summary>
            .NET Framework version 3.5 (including Client Profile 3.5)
            </summary>
    </member>
    <member name="F:DidiSoft.Sfx.SfxCreator.DotNetFramework.VERSION_4_0">
      <summary>
            .NET Framework version 4.0 (including Client Profile 4.0)
            </summary>
    </member>
    <member name="T:DidiSoft.Sfx.SfxOptions">
      <summary>
            Options for customization of the generated SFX (self extracting) executable file.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:DidiSoft.Sfx.SfxOptions.#ctor">
      <summary>
            Creates an instance of the object with default values
            </summary>
    </member>
    <member name="F:DidiSoft.Sfx.SfxOptions.IconFile">
      <summary>
            Absolute or relative path to an icon file (*.ico)
            that will be assigned to the generated exe file
            </summary>
      <remarks>
            Default is empty
            </remarks>
    </member>
    <member name="F:DidiSoft.Sfx.SfxOptions.ProductName">
      <summary>
            Product Name label for the exe file manifest
            </summary>
      <remarks>
            Default is empty
            </remarks>
    </member>
    <member name="F:DidiSoft.Sfx.SfxOptions.ProductVersion">
      <summary>
            Product Version label for the exe file manifest
            </summary>
      <remarks>
            Default is 1.0
            </remarks>
    </member>
    <member name="F:DidiSoft.Sfx.SfxOptions.Description">
      <summary>
            Product description label for the exe file manifest
            </summary>
      <remarks>
            Default is empty
            </remarks>
    </member>
    <member name="F:DidiSoft.Sfx.SfxOptions.Copyright">
      <summary>
            Copyright label for the exe file manifest
            </summary>
      <remarks>
            Default is empty
            </remarks>
    </member>
    <member name="F:DidiSoft.Sfx.SfxOptions.FileVersion">
      <summary>
            File Version label for the exe file manifest
            </summary>
      <remarks>
            Default is 1.0
            </remarks>
    </member>
  </members>
</doc>